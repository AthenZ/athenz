# The file contains system properties for Athenz server-common module.

# This property specifies the name of the histogram metric that will be used to
# record the latency in milliseconds for each API request. The default value is
# 'athenz_api_request_duration_msecs'. You can override this value to provide
# a different name for the histogram metric.
athenz.otel_histogram_name=athenz_api_request_duration_msecs

# This property specifies whether to separate metrics by Athenz domain name
# in the histogram metrics recording API request latencies.
# By default, only a single metric is recorded where the request and principal
# domain names are specified as labels along with the API name, http status code.
# and the http method. With this default behavior the cardinality of the metrics
# could result in a large number of time series which could be difficult to manage.
# By setting this property to true, 3 metrics are generated and reported in the
# configured histogram metric:
# {metric-name}_requestDomain - only contains a single attribute - requestDomainName
# {metric-name}_principalDomain - only contains a single attribute - principalDomainName
# {metric-name} - contains 3 attributes, httpMethod, apiName and httpStatusCode
# This will significantly reduce the cardinality of the metrics recorded.
# The default value is false.
athenz.otel_separate_domain_histogram_metrics=false

# This property further reduces the cardinality of the histogram metrics
# by skipping the recording of the requestDomain and principalDomain metrics.
# To enable this property, you must first set the athenz.otel_separate_domain_histogram_metrics
# property to true. Once enabled, only the {metric-name} metric will be recorded
# with the 3 attributes, httpMethod, apiName and httpStatusCode in the histogram.
# The default value is true.
athenz.otel_skip_domain_histogram_metrics=true

# This property specifies whether to separate metrics by Athenz domain name
# in the counter metrics recording API request counts.
# By default, only a single metric is recorded where the request and principal
# domain names are specified as labels along with the API name, http status code.
# and the http method. With this default behavior the cardinality of the metrics
# could result in a large number of time series which could be difficult to manage.
# By setting this property to true, 3 separate metrics are generated and reported:
# {metric-name}_requestDomain - only contains a single attribute - requestDomainName
# {metric-name}_principalDomain - only contains a single attribute - principalDomainName
# {metric-name} - contains 3 attributes, httpMethod, apiName and httpStatusCode
# This will significantly reduce the cardinality of the metrics recorded.
# The default value is false.
athenz.otel_separate_domain_counter_metrics=false

# This property further reduces the cardinality of the counter metrics
# by skipping the recording of the requestDomain and principalDomain metrics.
# To enable this property, you must first set the athenz.otel_separate_domain_counter_metrics
# property to true. Once enabled, only the {metric-name} metric will be recorded
# with the 3 attributes, httpMethod, apiName and httpStatusCode in the counter.
# The default value is false.
athenz.otel_skip_domain_counter_metrics=false

# The athenz.zms.jdbc.audit_log_role_max_limit property specifies the
# maximum number of entries to be maintained in the role audit log table
# which keeps track of membership changes in the role. Once this limit hits,
# the server will automatically only keep the most recent changes based
# on the value configured for the athenz.zms.jdbc.audit_log_role_keep_count
# property. If either property is 0 or a negative number, the server will
# not remove any audit log entries.
#athenz.zms.jdbc.audit_log_role_max_limit=0
#athenz.zms.jdbc.audit_log_role_keep_count=0

# The athenz.zms.jdbc.audit_log_group_max_limit property specifies the
# maximum number of entries to be maintained in the group audit log table
# which keeps track of membership changes in the group. Once this limit hits,
# the server will automatically only keep the most recent changes based
# on the value configured for the athenz.zms.jdbc.audit_log_group_keep_count
# property. If either property is 0 or a negative number, the server will
# not remove any audit log entries.
#athenz.zms.jdbc.audit_log_group_max_limit=0
#athenz.zms.jdbc.audit_log_group_keep_count=0
