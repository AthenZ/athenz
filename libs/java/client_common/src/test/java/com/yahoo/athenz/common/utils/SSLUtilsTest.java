package com.yahoo.athenz.common.utils;

import javax.net.ssl.*;
import com.yahoo.athenz.auth.impl.FilePrivateKeyStore;
import org.mockito.Mockito;
import org.testng.Assert;
import org.testng.annotations.Test;
import com.yahoo.athenz.auth.PrivateKeyStore;
import com.yahoo.athenz.common.utils.SSLUtils.ClientSSLContextBuilder;

import java.security.PrivateKey;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;
import static org.testng.Assert.*;

/**
 * ca.pkcs12 was generate with the following commands:
 * openssl genrsa -out unit_test_ca.key 2048
 * openssl req -x509 -new -nodes -key unit_test_ca.key -sha256 -days 1024 -out ca.pem
 * openssl pkcs12 -export -out ca.pkcs12 -in ca.pem -inkey unit_test_ca.key (password: changeit)
 * <p>
 * keytool -list -v -keystore ca/ca.pkcs12 
 * <p>
 * Certificate[1]:
 * Owner: CN=Self-CA, O=Oath, L=LA, ST=CA, C=US
 * Issuer: CN=Self-CA, O=Oath, L=LA, ST=CA, C=US
 * <p>
 *
 * server.pkcs12 was generate with:
 * <p>
 * openssl genrsa -out server.key 2048
 * openssl req -new -key server.key -out server.csr (no password)
 * openssl x509 -req -in server.csr -CA ca.pem -CAkey unit_test_ca.key -CAcreateserial -out server.pem -days 1024 -sha256
 * openssl pkcs12 -export -out server.pkcs12 -in server.pem -inkey server.key (password: changeit)
 * <p>
 * keytool -list -v -keystore server/server.pkcs12
 * <p>
 * Certificate[1]:
 * Owner: CN=localhost, O=Internet Widgits Pty Ltd, ST=Some-State, C=AU
 * Issuer: CN=Self-CA, O=Oath, L=LA, ST=CA, C=US
 * <p>
 * client.pkcs12 was generate with:
 * <p>
 * openssl genrsa -out client.key 2048
 * openssl req -new -key client.key -out client.csr (password: test)
 * openssl x509 -req -in client.csr -CA ca.pem -CAkey unit_test_ca.key -CAcreateserial -out client.pem -days 1024 -sha256
 * openssl pkcs12 -export -out client.pkcs12 -in client.pem -inkey client.key (password: changeit)
 * <p>
 * keytool -list -v -keystore client/client.pkcs12
 * <p>
 * Certificate[1]:
 * Owner: O=Internet Widgits Pty Ltd, ST=Some-State, C=AU
 * Issuer: CN=Self-CA, O=Oath, L=LA, ST=CA, C=US
 * <p>
 * client_multiple_keys.pkcs12 was generated by combining two pkcs12 files signed by two different CAs:
 * <p>
 * keytool -importkeystore -deststorepass changeit -destkeypass changeit -destkeystore
 * client_multiple_keys.pkcs12 -srckeystore client2.pkcs12 -srcstoretype PKCS12 -srcstorepass changeit -alias client2
 *
 * @author charlesk
 *
 */
public class SSLUtilsTest {

    private static final String DEFAULT_CERT_PWD = "changeit";
    private static final String DEFAULT_SSL_PROTOCOL = "TLSv1.2";
    private static final String DEFAULT_SSL_STORE_TYPE = "pkcs12";
    private static final String DEFAULT_CA_TRUST_STORE = "src/test/resources/certs/ca/ca.pkcs12";
    private static final String DEFAULT_SERVER_KEY_STORE = "src/test/resources/certs/server/server.pkcs12";
    private static final String DEFAULT_KEY_STORE_TYPE = "pkcs12";
    private static final String DEFAULT_TRUST_STORE_TYPE = "pkcs12";
    private static final String KEYSTORE_PASSWORD_APP_NAME = "testKeystorePassword";
    private static final String KEY_MANAGER_PASSWORD_APP_NAME = "testKeyManager";
    private static final String TRUSTSTORE_PASSWORD_APP_NAME = "testTruststorePassword";
    private static final String TRUSTSTORE_PATH = "src/test/resources/testKeyStore.pkcs12";
    private static final String KEYSTORE_PASSWORD_KEYGROUP_NAME = "testKeystorePasswordKG";
    private static final String KEY_MANAGER_PASSWORD_KEYGROUP_NAME = "testKeyManagerKG";
    private static final String TRUSTSTORE_PASSWORD_KEYGROUP_NAME = "testTruststorePasswordKG";

    @Test
    public void testEmptyConstructor() {
        SSLUtils sslUtils = new SSLUtils();
        assertNotNull(sslUtils);
    }

    @Test
    public void testClientSSLContextBuilder() {
        String protocol = DEFAULT_SSL_PROTOCOL;
        SSLContext sslContext = new SSLUtils.ClientSSLContextBuilder(protocol)
                .keyStorePath(DEFAULT_SERVER_KEY_STORE)
                .keyManagerPassword(DEFAULT_CERT_PWD.toCharArray())
                .keyStorePassword(DEFAULT_CERT_PWD.toCharArray())
                .keyStoreType(DEFAULT_KEY_STORE_TYPE)
                .trustStoreType(DEFAULT_TRUST_STORE_TYPE)
                .keyStorePasswordAppName(KEYSTORE_PASSWORD_APP_NAME)
                .keyManagerPasswordAppName(KEY_MANAGER_PASSWORD_APP_NAME)
                .trustStorePasswordAppName(TRUSTSTORE_PASSWORD_APP_NAME)
                .keyStorePasswordKeygroupName(KEYSTORE_PASSWORD_KEYGROUP_NAME)
                .keyManagerPasswordKeygroupName(KEY_MANAGER_PASSWORD_KEYGROUP_NAME)
                .trustStorePasswordKeygroupName(TRUSTSTORE_PASSWORD_KEYGROUP_NAME)
                .privateKeyStore(new FilePrivateKeyStore())
                .certAlias("test")
                .build();
        assertEquals(sslContext.getProtocol(), protocol);

        sslContext = new SSLUtils.ClientSSLContextBuilder(protocol).build();
        Assert.assertNull(sslContext);

        //key store password is null
        assertThrows(RuntimeException.class, () -> new ClientSSLContextBuilder(protocol)
                .keyStorePath(DEFAULT_SERVER_KEY_STORE)
                .keyManagerPassword(DEFAULT_CERT_PWD.toCharArray())
                .keyStorePassword(null)
                .keyStoreType(DEFAULT_KEY_STORE_TYPE)
                .trustStoreType(DEFAULT_TRUST_STORE_TYPE)
                .keyStorePasswordAppName(KEYSTORE_PASSWORD_APP_NAME)
                .keyManagerPasswordAppName(KEY_MANAGER_PASSWORD_APP_NAME)
                .trustStorePasswordAppName(TRUSTSTORE_PASSWORD_APP_NAME)
                .keyStorePasswordKeygroupName(KEYSTORE_PASSWORD_KEYGROUP_NAME)
                .keyManagerPasswordKeygroupName(KEY_MANAGER_PASSWORD_KEYGROUP_NAME)
                .trustStorePasswordKeygroupName(TRUSTSTORE_PASSWORD_KEYGROUP_NAME)
                .privateKeyStore(new FilePrivateKeyStore())
                .build());

        //trust store password is null
        new SSLUtils.ClientSSLContextBuilder(protocol)
                .keyStorePath(DEFAULT_SERVER_KEY_STORE)
                .keyManagerPassword(DEFAULT_CERT_PWD.toCharArray())
                .keyStorePassword(DEFAULT_CERT_PWD.toCharArray())
                .keyStoreType(DEFAULT_KEY_STORE_TYPE)
                .trustStoreType(DEFAULT_TRUST_STORE_TYPE)
                .keyStorePasswordAppName(KEYSTORE_PASSWORD_APP_NAME)
                .keyManagerPasswordAppName(KEY_MANAGER_PASSWORD_APP_NAME)
                .trustStorePasswordAppName(TRUSTSTORE_PASSWORD_APP_NAME)
                .keyStorePasswordKeygroupName(KEYSTORE_PASSWORD_KEYGROUP_NAME)
                .keyManagerPasswordKeygroupName(KEY_MANAGER_PASSWORD_KEYGROUP_NAME)
                .trustStorePasswordKeygroupName(TRUSTSTORE_PASSWORD_KEYGROUP_NAME)
                .trustStorePassword(null)
                .trustStorePath(TRUSTSTORE_PATH)
                .privateKeyStore(new FilePrivateKeyStore())
                .build();

        new SSLUtils.ClientSSLContextBuilder(protocol)
            .keyStorePath("")
            .keyManagerPassword(DEFAULT_CERT_PWD.toCharArray())
            .keyStorePassword(DEFAULT_CERT_PWD.toCharArray())
            .keyStoreType(DEFAULT_KEY_STORE_TYPE)
            .trustStoreType(DEFAULT_TRUST_STORE_TYPE)
            .keyStorePasswordAppName(KEYSTORE_PASSWORD_APP_NAME)
            .keyManagerPasswordAppName(KEY_MANAGER_PASSWORD_APP_NAME)
            .trustStorePasswordAppName(TRUSTSTORE_PASSWORD_APP_NAME)
            .keyStorePasswordKeygroupName(KEYSTORE_PASSWORD_KEYGROUP_NAME)
            .keyManagerPasswordKeygroupName(KEY_MANAGER_PASSWORD_KEYGROUP_NAME)
            .trustStorePasswordKeygroupName(TRUSTSTORE_PASSWORD_KEYGROUP_NAME)
            .trustStorePassword(null)
            .trustStorePath(TRUSTSTORE_PATH)
            .privateKeyStore(new FilePrivateKeyStore())
            .build();
    }

    @Test
    public void testClientAliasedX509ExtendedKeyManager() {

        SSLUtils.ClientAliasedX509ExtendedKeyManager keyManager = new SSLUtils.ClientAliasedX509ExtendedKeyManager(null, "testKeyAlias");
        assertNull(keyManager.getDelegate());
        assertThrows(RuntimeException.class, () -> keyManager.chooseEngineServerAlias(null, null, null));
        assertThrows(RuntimeException.class, () -> keyManager.getServerAliases(null, null));
        assertThrows(RuntimeException.class, () -> keyManager.chooseServerAlias(null, null, null));

        assertThrows(IllegalArgumentException.class, () -> SSLUtils.loadServicePrivateKey("testFactoryClassFail"));
        String[] temp = new String[1];
        temp[0] = "tempTest";
        String[] clientAliases  = new String[2];
        clientAliases[0] = "testClientAlias1";
        clientAliases[1] = "testClientAlias2";
        X509ExtendedKeyManager mockKeyManager = Mockito.mock(X509ExtendedKeyManager.class);
        when(mockKeyManager.chooseEngineClientAlias(any(), any(), any())).thenReturn("testPass");
        when(mockKeyManager.chooseClientAlias(any(), any(), any())).thenReturn("testPass");
        when(mockKeyManager.getClientAliases(anyString(), any())).thenReturn(clientAliases);
        SSLUtils.ClientAliasedX509ExtendedKeyManager keyManagerTemp = new SSLUtils.ClientAliasedX509ExtendedKeyManager(mockKeyManager, null);
        assertEquals(keyManagerTemp.chooseEngineClientAlias(temp, null, null), "testPass");
        assertEquals(keyManagerTemp.chooseClientAlias(temp, null, null), "testPass");
        assertEquals(keyManagerTemp.getClientAliases("testKeyType", null), clientAliases);

        when(mockKeyManager.getClientAliases(anyString(), any())).thenReturn(clientAliases);
        keyManagerTemp = new SSLUtils.ClientAliasedX509ExtendedKeyManager(mockKeyManager, "testClientAlias2");
        assertEquals(keyManagerTemp.chooseEngineClientAlias(temp, null, null), "testClientAlias2");

        when(mockKeyManager.getClientAliases(anyString(), any())).thenReturn(null);
        assertNull(keyManagerTemp.chooseEngineClientAlias(temp, null, null));
    }

    @Test
    public void testLoadServicePrivateKey() {
        PrivateKeyStore keyStore = SSLUtils.loadServicePrivateKey("com.yahoo.athenz.auth.impl.FilePrivateKeyStoreFactory");
        Assert.assertNotNull(keyStore);
    }

    @Test
    public void testGetAliasedKeyManagers() {
        assertNull(ClientSSLContextBuilder.getAliasedKeyManagers(null, null));
        KeyManager[] keyManagers = new KeyManager[2];
        X509ExtendedKeyManager keyManager1 = Mockito.mock(X509ExtendedKeyManager.class);
        keyManagers[0] = keyManager1;
        X509KeyManager keyManager2 = Mockito.mock(X509KeyManager.class);
        keyManagers[1] = keyManager2;

        KeyManager[] keyManagersRes = ClientSSLContextBuilder.getAliasedKeyManagers(keyManagers, null);
        assertEquals(keyManagersRes.length, 2);
        assertEquals(keyManagersRes[0], keyManager1);
        assertEquals(keyManagersRes[1], keyManager2);

        keyManagersRes = ClientSSLContextBuilder.getAliasedKeyManagers(keyManagers, "testAlias");
        assertEquals(keyManagersRes.length, 2);
        assertNotEquals(keyManagersRes[0], keyManager1);
        assertTrue(keyManagersRes[0] instanceof SSLUtils.ClientAliasedX509ExtendedKeyManager);
        assertEquals(keyManagersRes[1], keyManager2);
    }

    @Test
    public void testClientAliasedX509ExtendedManager() {

        X509ExtendedKeyManager keyManager = Mockito.mock(X509ExtendedKeyManager.class);
        Mockito.when(keyManager.getClientAliases(any(), any())).thenReturn(new String[]{"testAlias"});
        PrivateKey privateKey = Mockito.mock(PrivateKey.class);
        Mockito.when(keyManager.getPrivateKey("testAlias")).thenReturn(privateKey);
        Mockito.when(keyManager.getPrivateKey("testAlias2")).thenReturn(null);
        Mockito.when(keyManager.getCertificateChain("testAlias")).thenReturn(null);

        SSLUtils.ClientAliasedX509ExtendedKeyManager aliasedKeyManager =
                new SSLUtils.ClientAliasedX509ExtendedKeyManager(keyManager, "testAlias");

        assertEquals(aliasedKeyManager.chooseEngineClientAlias(new String[]{"keyType"}, null, null), "testAlias");
        assertEquals(aliasedKeyManager.chooseClientAlias(new String[]{"keyType"}, null, null), "testAlias");
        assertNotNull(aliasedKeyManager.getPrivateKey("testAlias"));
        assertNull(aliasedKeyManager.getPrivateKey("testAlias2"));
        assertNull(aliasedKeyManager.getCertificateChain("testAlias"));
    }
}
