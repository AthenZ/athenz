//
// This file generated by rdl 1.5.2. Do not modify!
//
package com.yahoo.athenz.zms;

import com.yahoo.rdl.*;
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.inject.Inject;

@Path("/v1")
public class ZMSResources {

    @GET
    @Path("/domain/{domain}")
    @Produces(MediaType.APPLICATION_JSON)
    public Domain getDomain(@PathParam("domain") String domain) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getDomain");
            context.authenticate();
            return this.delegate.getDomain(context, domain);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainList getDomainList(@QueryParam("limit") Integer limit, @QueryParam("skip") String skip, @QueryParam("prefix") String prefix, @QueryParam("depth") Integer depth, @QueryParam("account") String account, @QueryParam("ypmid") Integer productId, @QueryParam("member") String roleMember, @QueryParam("role") String roleName, @HeaderParam("If-Modified-Since") String modifiedSince) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getDomainList");
            context.authenticate();
            return this.delegate.getDomainList(context, limit, skip, prefix, depth, account, productId, roleMember, roleName, modifiedSince);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @POST
    @Path("/domain")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain postTopLevelDomain(@HeaderParam("Y-Audit-Ref") String auditRef, TopLevelDomain detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "postTopLevelDomain");
            context.authorize("create", "sys.auth:domain", null);
            return this.delegate.postTopLevelDomain(context, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postTopLevelDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @POST
    @Path("/subdomain/{parent}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain postSubDomain(@PathParam("parent") String parent, @HeaderParam("Y-Audit-Ref") String auditRef, SubDomain detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "postSubDomain");
            context.authorize("create", "" + parent + ":domain", null);
            return this.delegate.postSubDomain(context, parent, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postSubDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @POST
    @Path("/userdomain/{name}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain postUserDomain(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, UserDomain detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "postUserDomain");
            context.authorize("create", "user." + name + ":domain", null);
            return this.delegate.postUserDomain(context, name, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postUserDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteTopLevelDomain(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteTopLevelDomain");
            context.authorize("delete", "sys.auth:domain", null);
            this.delegate.deleteTopLevelDomain(context, name, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTopLevelDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/subdomain/{parent}/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteSubDomain(@PathParam("parent") String parent, @PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteSubDomain");
            context.authorize("delete", "" + parent + ":domain", null);
            this.delegate.deleteSubDomain(context, parent, name, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteSubDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/userdomain/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteUserDomain(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteUserDomain");
            context.authorize("delete", "user." + name + ":domain", null);
            this.delegate.deleteUserDomain(context, name, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteUserDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{name}/meta")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putDomainMeta(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, DomainMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putDomainMeta");
            context.authorize("update", "" + name + ":", null);
            this.delegate.putDomainMeta(context, name, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDomainMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{name}/meta/system/{attribute}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putDomainSystemMeta(@PathParam("name") String name, @PathParam("attribute") String attribute, @HeaderParam("Y-Audit-Ref") String auditRef, DomainMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putDomainSystemMeta");
            context.authorize("update", "sys.auth:meta.domain." + attribute + "." + name + "", null);
            this.delegate.putDomainSystemMeta(context, name, attribute, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDomainSystemMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{name}/template")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putDomainTemplate(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, DomainTemplate domainTemplate) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putDomainTemplate");
            context.authorize("update", "" + name + ":template", null);
            this.delegate.putDomainTemplate(context, name, auditRef, domainTemplate);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDomainTemplate");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{name}/template/{template}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putDomainTemplateExt(@PathParam("name") String name, @PathParam("template") String template, @HeaderParam("Y-Audit-Ref") String auditRef, DomainTemplate domainTemplate) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putDomainTemplateExt");
            context.authorize("update", "" + name + ":template." + template + "", null);
            this.delegate.putDomainTemplateExt(context, name, template, auditRef, domainTemplate);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDomainTemplateExt");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{name}/template")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainTemplateList getDomainTemplateList(@PathParam("name") String name) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getDomainTemplateList");
            context.authenticate();
            return this.delegate.getDomainTemplateList(context, name);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainTemplateList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{name}/template/{template}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteDomainTemplate(@PathParam("name") String name, @PathParam("template") String template, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteDomainTemplate");
            context.authorize("delete", "" + name + ":template." + template + "", null);
            this.delegate.deleteDomainTemplate(context, name, template, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteDomainTemplate");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/check")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainDataCheck getDomainDataCheck(@PathParam("domainName") String domainName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getDomainDataCheck");
            context.authenticate();
            return this.delegate.getDomainDataCheck(context, domainName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainDataCheck");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/entity/{entityName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putEntity(@PathParam("domainName") String domainName, @PathParam("entityName") String entityName, @HeaderParam("Y-Audit-Ref") String auditRef, Entity entity) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putEntity");
            context.authorize("update", "" + domainName + ":entity." + entityName + "", null);
            this.delegate.putEntity(context, domainName, entityName, auditRef, entity);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putEntity");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/entity/{entityName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Entity getEntity(@PathParam("domainName") String domainName, @PathParam("entityName") String entityName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getEntity");
            context.authenticate();
            return this.delegate.getEntity(context, domainName, entityName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getEntity");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/entity/{entityName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteEntity(@PathParam("domainName") String domainName, @PathParam("entityName") String entityName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteEntity");
            context.authorize("delete", "" + domainName + ":entity." + entityName + "", null);
            this.delegate.deleteEntity(context, domainName, entityName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteEntity");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/entity")
    @Produces(MediaType.APPLICATION_JSON)
    public EntityList getEntityList(@PathParam("domainName") String domainName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getEntityList");
            context.authenticate();
            return this.delegate.getEntityList(context, domainName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getEntityList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/role")
    @Produces(MediaType.APPLICATION_JSON)
    public RoleList getRoleList(@PathParam("domainName") String domainName, @QueryParam("limit") Integer limit, @QueryParam("skip") String skip) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getRoleList");
            context.authenticate();
            return this.delegate.getRoleList(context, domainName, limit, skip);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRoleList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/roles")
    @Produces(MediaType.APPLICATION_JSON)
    public Roles getRoles(@PathParam("domainName") String domainName, @QueryParam("members") @DefaultValue("false") Boolean members) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getRoles");
            context.authenticate();
            return this.delegate.getRoles(context, domainName, members);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/role/{roleName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Role getRole(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @QueryParam("auditLog") @DefaultValue("false") Boolean auditLog, @QueryParam("expand") @DefaultValue("false") Boolean expand, @QueryParam("pending") @DefaultValue("false") Boolean pending) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getRole");
            context.authenticate();
            return this.delegate.getRole(context, domainName, roleName, auditLog, expand, pending);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRole");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putRole(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @HeaderParam("Y-Audit-Ref") String auditRef, Role role) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putRole");
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            this.delegate.putRole(context, domainName, roleName, auditRef, role);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putRole");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/role/{roleName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteRole(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteRole");
            context.authorize("delete", "" + domainName + ":role." + roleName + "", null);
            this.delegate.deleteRole(context, domainName, roleName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteRole");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Membership getMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @QueryParam("expiration") String expiration) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getMembership");
            context.authenticate();
            return this.delegate.getMembership(context, domainName, roleName, memberName, expiration);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/overdue")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainRoleMembers getOverdueReview(@PathParam("domainName") String domainName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getOverdueReview");
            context.authenticate();
            return this.delegate.getOverdueReview(context, domainName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getOverdueReview");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/member")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainRoleMembers getDomainRoleMembers(@PathParam("domainName") String domainName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getDomainRoleMembers");
            context.authenticate();
            return this.delegate.getDomainRoleMembers(context, domainName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainRoleMembers");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/role")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainRoleMember getPrincipalRoles(@QueryParam("principal") String principal, @QueryParam("domain") String domainName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPrincipalRoles");
            context.authenticate();
            return this.delegate.getPrincipalRoles(context, principal, domainName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPrincipalRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef, Membership membership) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putMembership");
            context.authenticate();
            this.delegate.putMembership(context, domainName, roleName, memberName, auditRef, membership);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteMembership");
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            this.delegate.deleteMembership(context, domainName, roleName, memberName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/role/{roleName}/pendingmember/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deletePendingMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deletePendingMembership");
            context.authenticate();
            this.delegate.deletePendingMembership(context, domainName, roleName, memberName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deletePendingMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/admins")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putDefaultAdmins(@PathParam("domainName") String domainName, @HeaderParam("Y-Audit-Ref") String auditRef, DefaultAdmins defaultAdmins) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putDefaultAdmins");
            context.authorize("update", "sys.auth:domain", null);
            this.delegate.putDefaultAdmins(context, domainName, auditRef, defaultAdmins);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDefaultAdmins");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}/meta/system/{attribute}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putRoleSystemMeta(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("attribute") String attribute, @HeaderParam("Y-Audit-Ref") String auditRef, RoleSystemMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putRoleSystemMeta");
            context.authorize("update", "sys.auth:meta.role." + attribute + "." + domainName + "", null);
            this.delegate.putRoleSystemMeta(context, domainName, roleName, attribute, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putRoleSystemMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}/meta")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putRoleMeta(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @HeaderParam("Y-Audit-Ref") String auditRef, RoleMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putRoleMeta");
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            this.delegate.putRoleMeta(context, domainName, roleName, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putRoleMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}/decision")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putMembershipDecision(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef, Membership membership) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putMembershipDecision");
            context.authenticate();
            this.delegate.putMembershipDecision(context, domainName, roleName, memberName, auditRef, membership);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putMembershipDecision");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}/review")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putRoleReview(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @HeaderParam("Y-Audit-Ref") String auditRef, Role role) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putRoleReview");
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            this.delegate.putRoleReview(context, domainName, roleName, auditRef, role);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putRoleReview");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/groups")
    @Produces(MediaType.APPLICATION_JSON)
    public Groups getGroups(@PathParam("domainName") String domainName, @QueryParam("members") @DefaultValue("false") Boolean members) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getGroups");
            context.authenticate();
            return this.delegate.getGroups(context, domainName, members);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getGroups");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/group/{groupName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Group getGroup(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @QueryParam("auditLog") @DefaultValue("false") Boolean auditLog, @QueryParam("pending") @DefaultValue("false") Boolean pending) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getGroup");
            context.authenticate();
            return this.delegate.getGroup(context, domainName, groupName, auditLog, pending);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getGroup");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/group/{groupName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putGroup(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @HeaderParam("Y-Audit-Ref") String auditRef, Group group) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putGroup");
            context.authorize("update", "" + domainName + ":group." + groupName + "", null);
            this.delegate.putGroup(context, domainName, groupName, auditRef, group);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putGroup");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/group/{groupName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteGroup(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteGroup");
            context.authorize("delete", "" + domainName + ":group." + groupName + "", null);
            this.delegate.deleteGroup(context, domainName, groupName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteGroup");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/group/{groupName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public GroupMembership getGroupMembership(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @PathParam("memberName") String memberName, @QueryParam("expiration") String expiration) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getGroupMembership");
            context.authenticate();
            return this.delegate.getGroupMembership(context, domainName, groupName, memberName, expiration);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getGroupMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/group")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainGroupMember getPrincipalGroups(@QueryParam("principal") String principal, @QueryParam("domain") String domainName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPrincipalGroups");
            context.authenticate();
            return this.delegate.getPrincipalGroups(context, principal, domainName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPrincipalGroups");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/group/{groupName}/member/{memberName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putGroupMembership(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef, GroupMembership membership) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putGroupMembership");
            context.authenticate();
            this.delegate.putGroupMembership(context, domainName, groupName, memberName, auditRef, membership);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putGroupMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/group/{groupName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteGroupMembership(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteGroupMembership");
            context.authorize("update", "" + domainName + ":group." + groupName + "", null);
            this.delegate.deleteGroupMembership(context, domainName, groupName, memberName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteGroupMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/group/{groupName}/pendingmember/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deletePendingGroupMembership(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deletePendingGroupMembership");
            context.authenticate();
            this.delegate.deletePendingGroupMembership(context, domainName, groupName, memberName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deletePendingGroupMembership");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/group/{groupName}/meta/system/{attribute}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putGroupSystemMeta(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @PathParam("attribute") String attribute, @HeaderParam("Y-Audit-Ref") String auditRef, GroupSystemMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putGroupSystemMeta");
            context.authorize("update", "sys.auth:meta.group." + attribute + "." + domainName + "", null);
            this.delegate.putGroupSystemMeta(context, domainName, groupName, attribute, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putGroupSystemMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/group/{groupName}/meta")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putGroupMeta(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @HeaderParam("Y-Audit-Ref") String auditRef, GroupMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putGroupMeta");
            context.authorize("update", "" + domainName + ":group." + groupName + "", null);
            this.delegate.putGroupMeta(context, domainName, groupName, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putGroupMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/group/{groupName}/member/{memberName}/decision")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putGroupMembershipDecision(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef, GroupMembership membership) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putGroupMembershipDecision");
            context.authenticate();
            this.delegate.putGroupMembershipDecision(context, domainName, groupName, memberName, auditRef, membership);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putGroupMembershipDecision");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/group/{groupName}/review")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putGroupReview(@PathParam("domainName") String domainName, @PathParam("groupName") String groupName, @HeaderParam("Y-Audit-Ref") String auditRef, Group group) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putGroupReview");
            context.authorize("update", "" + domainName + ":group." + groupName + "", null);
            this.delegate.putGroupReview(context, domainName, groupName, auditRef, group);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putGroupReview");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/policy")
    @Produces(MediaType.APPLICATION_JSON)
    public PolicyList getPolicyList(@PathParam("domainName") String domainName, @QueryParam("limit") Integer limit, @QueryParam("skip") String skip) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPolicyList");
            context.authenticate();
            return this.delegate.getPolicyList(context, domainName, limit, skip);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPolicyList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/policies")
    @Produces(MediaType.APPLICATION_JSON)
    public Policies getPolicies(@PathParam("domainName") String domainName, @QueryParam("assertions") @DefaultValue("false") Boolean assertions) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPolicies");
            context.authenticate();
            return this.delegate.getPolicies(context, domainName, assertions);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPolicies");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/policy/{policyName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Policy getPolicy(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPolicy");
            context.authenticate();
            return this.delegate.getPolicy(context, domainName, policyName);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPolicy");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/policy/{policyName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putPolicy(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @HeaderParam("Y-Audit-Ref") String auditRef, Policy policy) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putPolicy");
            context.authorize("update", "" + domainName + ":policy." + policyName + "", null);
            this.delegate.putPolicy(context, domainName, policyName, auditRef, policy);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putPolicy");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/policy/{policyName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deletePolicy(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deletePolicy");
            context.authorize("delete", "" + domainName + ":policy." + policyName + "", null);
            this.delegate.deletePolicy(context, domainName, policyName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deletePolicy");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/policy/{policyName}/assertion/{assertionId}")
    @Produces(MediaType.APPLICATION_JSON)
    public Assertion getAssertion(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @PathParam("assertionId") Long assertionId) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getAssertion");
            context.authenticate();
            return this.delegate.getAssertion(context, domainName, policyName, assertionId);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getAssertion");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domainName}/policy/{policyName}/assertion")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Assertion putAssertion(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @HeaderParam("Y-Audit-Ref") String auditRef, Assertion assertion) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putAssertion");
            context.authorize("update", "" + domainName + ":policy." + policyName + "", null);
            return this.delegate.putAssertion(context, domainName, policyName, auditRef, assertion);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putAssertion");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/policy/{policyName}/assertion/{assertionId}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteAssertion(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @PathParam("assertionId") Long assertionId, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteAssertion");
            context.authorize("update", "" + domainName + ":policy." + policyName + "", null);
            this.delegate.deleteAssertion(context, domainName, policyName, assertionId, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteAssertion");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putServiceIdentity(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef, ServiceIdentity detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putServiceIdentity");
            context.authorize("update", "" + domain + ":service." + service + "", null);
            this.delegate.putServiceIdentity(context, domain, service, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putServiceIdentity");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentity getServiceIdentity(@PathParam("domain") String domain, @PathParam("service") String service) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getServiceIdentity");
            context.authenticate();
            return this.delegate.getServiceIdentity(context, domain, service);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServiceIdentity");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteServiceIdentity(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteServiceIdentity");
            context.authorize("delete", "" + domain + ":service." + service + "", null);
            this.delegate.deleteServiceIdentity(context, domain, service, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteServiceIdentity");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/services")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentities getServiceIdentities(@PathParam("domainName") String domainName, @QueryParam("publickeys") @DefaultValue("false") Boolean publickeys, @QueryParam("hosts") @DefaultValue("false") Boolean hosts) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getServiceIdentities");
            context.authenticate();
            return this.delegate.getServiceIdentities(context, domainName, publickeys, hosts);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServiceIdentities");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domainName}/service")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentityList getServiceIdentityList(@PathParam("domainName") String domainName, @QueryParam("limit") Integer limit, @QueryParam("skip") String skip) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getServiceIdentityList");
            context.authenticate();
            return this.delegate.getServiceIdentityList(context, domainName, limit, skip);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServiceIdentityList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}/publickey/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public PublicKeyEntry getPublicKeyEntry(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("id") String id) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPublicKeyEntry");
            context.authenticate();
            return this.delegate.getPublicKeyEntry(context, domain, service, id);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPublicKeyEntry");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/publickey/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putPublicKeyEntry(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("id") String id, @HeaderParam("Y-Audit-Ref") String auditRef, PublicKeyEntry publicKeyEntry) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putPublicKeyEntry");
            context.authorize("update", "" + domain + ":service." + service + "", null);
            this.delegate.putPublicKeyEntry(context, domain, service, id, auditRef, publicKeyEntry);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putPublicKeyEntry");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}/publickey/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deletePublicKeyEntry(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("id") String id, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deletePublicKeyEntry");
            context.authorize("update", "" + domain + ":service." + service + "", null);
            this.delegate.deletePublicKeyEntry(context, domain, service, id, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deletePublicKeyEntry");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/meta/system/{attribute}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putServiceIdentitySystemMeta(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("attribute") String attribute, @HeaderParam("Y-Audit-Ref") String auditRef, ServiceIdentitySystemMeta detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putServiceIdentitySystemMeta");
            context.authorize("update", "sys.auth:meta.service." + attribute + "." + domain + "", null);
            this.delegate.putServiceIdentitySystemMeta(context, domain, service, attribute, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putServiceIdentitySystemMeta");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domain}/tenancy/{service}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putTenancy(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef, Tenancy detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putTenancy");
            context.authorize("update", "" + domain + ":tenancy", null);
            this.delegate.putTenancy(context, domain, service, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenancy");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domain}/tenancy/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteTenancy(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteTenancy");
            context.authorize("delete", "" + domain + ":tenancy", null);
            this.delegate.deleteTenancy(context, domain, service, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenancy");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putTenant(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @HeaderParam("Y-Audit-Ref") String auditRef, Tenancy detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putTenant");
            context.authorize("update", "" + domain + ":tenant." + service + "", null);
            this.delegate.putTenant(context, domain, service, tenantDomain, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenant");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteTenant(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteTenant");
            context.authorize("delete", "" + domain + ":tenant." + service + "", null);
            this.delegate.deleteTenant(context, domain, service, tenantDomain, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenant");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public TenantResourceGroupRoles putTenantResourceGroupRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef, TenantResourceGroupRoles detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putTenantResourceGroupRoles");
            context.authorize("update", "" + domain + ":tenant." + service + "", null);
            return this.delegate.putTenantResourceGroupRoles(context, domain, service, tenantDomain, resourceGroup, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenantResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public TenantResourceGroupRoles getTenantResourceGroupRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @PathParam("resourceGroup") String resourceGroup) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getTenantResourceGroupRoles");
            context.authenticate();
            return this.delegate.getTenantResourceGroupRoles(context, domain, service, tenantDomain, resourceGroup);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getTenantResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteTenantResourceGroupRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteTenantResourceGroupRoles");
            context.authorize("update", "" + domain + ":tenant." + service + "", null);
            this.delegate.deleteTenantResourceGroupRoles(context, domain, service, tenantDomain, resourceGroup, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenantResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public ProviderResourceGroupRoles putProviderResourceGroupRoles(@PathParam("tenantDomain") String tenantDomain, @PathParam("provDomain") String provDomain, @PathParam("provService") String provService, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef, ProviderResourceGroupRoles detail) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putProviderResourceGroupRoles");
            context.authorize("update", "" + tenantDomain + ":tenancy." + provDomain + "." + provService + "", null);
            return this.delegate.putProviderResourceGroupRoles(context, tenantDomain, provDomain, provService, resourceGroup, auditRef, detail);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putProviderResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public ProviderResourceGroupRoles getProviderResourceGroupRoles(@PathParam("tenantDomain") String tenantDomain, @PathParam("provDomain") String provDomain, @PathParam("provService") String provService, @PathParam("resourceGroup") String resourceGroup) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getProviderResourceGroupRoles");
            context.authenticate();
            return this.delegate.getProviderResourceGroupRoles(context, tenantDomain, provDomain, provService, resourceGroup);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getProviderResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteProviderResourceGroupRoles(@PathParam("tenantDomain") String tenantDomain, @PathParam("provDomain") String provDomain, @PathParam("provService") String provService, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteProviderResourceGroupRoles");
            context.authorize("update", "" + tenantDomain + ":tenancy." + provDomain + "." + provService + "", null);
            this.delegate.deleteProviderResourceGroupRoles(context, tenantDomain, provDomain, provService, resourceGroup, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteProviderResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/access/{action}/{resource}")
    @Produces(MediaType.APPLICATION_JSON)
    public Access getAccess(@PathParam("action") String action, @PathParam("resource") String resource, @QueryParam("domain") String domain, @QueryParam("principal") String checkPrincipal) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getAccess");
            context.authenticate();
            return this.delegate.getAccess(context, action, resource, domain, checkPrincipal);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getAccess");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/access/{action}")
    @Produces(MediaType.APPLICATION_JSON)
    public Access getAccessExt(@PathParam("action") String action, @QueryParam("resource") String resource, @QueryParam("domain") String domain, @QueryParam("principal") String checkPrincipal) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getAccessExt");
            context.authenticate();
            return this.delegate.getAccessExt(context, action, resource, domain, checkPrincipal);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getAccessExt");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/resource")
    @Produces(MediaType.APPLICATION_JSON)
    public ResourceAccessList getResourceAccessList(@QueryParam("principal") String principal, @QueryParam("action") String action) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getResourceAccessList");
            context.authenticate();
            return this.delegate.getResourceAccessList(context, principal, action);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getResourceAccessList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/sys/modified_domains")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getSignedDomains(@QueryParam("domain") String domain, @QueryParam("metaonly") String metaOnly, @QueryParam("metaattr") String metaAttr, @QueryParam("master") Boolean master, @HeaderParam("If-None-Match") String matchingTag) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getSignedDomains");
            context.authenticate();
            return this.delegate.getSignedDomains(context, domain, metaOnly, metaAttr, master, matchingTag);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getSignedDomains");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{name}/signed")
    @Produces(MediaType.APPLICATION_JSON)
    public JWSDomain getJWSDomain(@PathParam("name") String name) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getJWSDomain");
            context.authenticate();
            return this.delegate.getJWSDomain(context, name);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getJWSDomain");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/user/{userName}/token")
    @Produces(MediaType.APPLICATION_JSON)
    public UserToken getUserToken(@PathParam("userName") String userName, @QueryParam("services") String serviceNames, @QueryParam("header") @DefaultValue("false") Boolean header) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getUserToken");
            context.authenticate();
            return this.delegate.getUserToken(context, userName, serviceNames, header);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getUserToken");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @OPTIONS
    @Path("/user/{userName}/token")
    public UserToken optionsUserToken(@PathParam("userName") String userName, @QueryParam("services") String serviceNames) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "optionsUserToken");
            return this.delegate.optionsUserToken(context, userName, serviceNames);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource optionsUserToken");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/principal")
    @Produces(MediaType.APPLICATION_JSON)
    public ServicePrincipal getServicePrincipal() {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getServicePrincipal");
            context.authenticate();
            return this.delegate.getServicePrincipal(context);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServicePrincipal");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/template")
    @Produces(MediaType.APPLICATION_JSON)
    public ServerTemplateList getServerTemplateList() {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getServerTemplateList");
            context.authenticate();
            return this.delegate.getServerTemplateList(context);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServerTemplateList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/template/{template}")
    @Produces(MediaType.APPLICATION_JSON)
    public Template getTemplate(@PathParam("template") String template) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getTemplate");
            context.authenticate();
            return this.delegate.getTemplate(context, template);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getTemplate");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{name}/templatedetails")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainTemplateDetailsList getDomainTemplateDetailsList(@PathParam("name") String name) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getDomainTemplateDetailsList");
            context.authenticate();
            return this.delegate.getDomainTemplateDetailsList(context, name);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainTemplateDetailsList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/user")
    @Produces(MediaType.APPLICATION_JSON)
    public UserList getUserList() {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getUserList");
            context.authenticate();
            return this.delegate.getUserList(context);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getUserList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/user/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteUser(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteUser");
            context.authorize("delete", "sys.auth:user", null);
            this.delegate.deleteUser(context, name, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteUser");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{domainName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteDomainRoleMember(@PathParam("domainName") String domainName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteDomainRoleMember");
            context.authorize("update", "" + domainName + ":", null);
            this.delegate.deleteDomainRoleMember(context, domainName, memberName, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteDomainRoleMember");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/domain/{name}/quota")
    @Produces(MediaType.APPLICATION_JSON)
    public Quota getQuota(@PathParam("name") String name) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getQuota");
            context.authenticate();
            return this.delegate.getQuota(context, name);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getQuota");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @PUT
    @Path("/domain/{name}/quota")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public void putQuota(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, Quota quota) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "putQuota");
            context.authorize("update", "sys.auth:quota", null);
            this.delegate.putQuota(context, name, auditRef, quota);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putQuota");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @DELETE
    @Path("/domain/{name}/quota")
    @Produces(MediaType.APPLICATION_JSON)
    public void deleteQuota(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "deleteQuota");
            context.authorize("update", "sys.auth:quota", null);
            this.delegate.deleteQuota(context, name, auditRef);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteQuota");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/status")
    @Produces(MediaType.APPLICATION_JSON)
    public Status getStatus() {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getStatus");
            context.authenticate();
            return this.delegate.getStatus(context);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getStatus");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/pending_members")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainRoleMembership getPendingDomainRoleMembersList(@QueryParam("principal") String principal) {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getPendingDomainRoleMembersList");
            context.authenticate();
            return this.delegate.getPendingDomainRoleMembersList(context, principal);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPendingDomainRoleMembersList");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }

    @GET
    @Path("/schema")
    @Produces(MediaType.APPLICATION_JSON)
    public Schema getRdlSchema() {
        int code = ResourceException.OK;
        ResourceContext context = null;
        try {
            context = this.delegate.newResourceContext(this.request, this.response, "getRdlSchema");
            context.authenticate();
            return this.delegate.getRdlSchema(context);
        } catch (ResourceException e) {
            code = e.getCode();
            switch (code) {
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRdlSchema");
                throw typedException(code, e, ResourceError.class);
            }
        } finally {
            this.delegate.recordMetrics(context, code);
        }
    }


    WebApplicationException typedException(int code, ResourceException e, Class<?> eClass) {
        Object data = e.getData();
        Object entity = eClass.isInstance(data) ? data : null;
        if (entity != null) {
            return new WebApplicationException(Response.status(code).entity(entity).build());
        } else {
            return new WebApplicationException(code);
        }
    }

    @Inject private ZMSHandler delegate;
    @Context private HttpServletRequest request;
    @Context private HttpServletResponse response;
    
}
