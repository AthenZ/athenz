//
// This file generated by rdl 1.4.14. Do not modify!
//
package com.yahoo.athenz.zms;

import com.yahoo.rdl.*;
import java.util.*;
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.inject.Inject;

@Path("/v1")
public class ZMSResources {

    @GET
    @Path("/domain/{domain}")
    @Produces(MediaType.APPLICATION_JSON)
    public Domain getDomain(@PathParam("domain") String domain) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Domain e = this.delegate.getDomain(context, domain);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainList getDomainList(@QueryParam("limit") Integer limit, @QueryParam("skip") String skip, @QueryParam("prefix") String prefix, @QueryParam("depth") Integer depth, @QueryParam("account") String account, @QueryParam("ypmid") Integer productId, @QueryParam("member") String roleMember, @QueryParam("role") String roleName, @HeaderParam("If-Modified-Since") String modifiedSince) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            DomainList e = this.delegate.getDomainList(context, limit, skip, prefix, depth, account, productId, roleMember, roleName, modifiedSince);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @POST
    @Path("/domain")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain postTopLevelDomain(@HeaderParam("Y-Audit-Ref") String auditRef, TopLevelDomain detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("create", "sys.auth:domain", null);
            Domain e = this.delegate.postTopLevelDomain(context, auditRef, detail);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postTopLevelDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @POST
    @Path("/subdomain/{parent}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain postSubDomain(@PathParam("parent") String parent, @HeaderParam("Y-Audit-Ref") String auditRef, SubDomain detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("create", "" + parent + ":domain", null);
            Domain e = this.delegate.postSubDomain(context, parent, auditRef, detail);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postSubDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @POST
    @Path("/userdomain/{name}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain postUserDomain(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, UserDomain detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("create", "user." + name + ":domain", null);
            Domain e = this.delegate.postUserDomain(context, name, auditRef, detail);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource postUserDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public TopLevelDomain deleteTopLevelDomain(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "sys.auth:domain", null);
            TopLevelDomain e = this.delegate.deleteTopLevelDomain(context, name, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTopLevelDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/subdomain/{parent}/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public SubDomain deleteSubDomain(@PathParam("parent") String parent, @PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + parent + ":domain", null);
            SubDomain e = this.delegate.deleteSubDomain(context, parent, name, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteSubDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/userdomain/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public UserDomain deleteUserDomain(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "user." + name + ":domain", null);
            UserDomain e = this.delegate.deleteUserDomain(context, name, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteUserDomain");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{name}/meta")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Domain putDomainMeta(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, DomainMeta detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + name + ":", null);
            Domain e = this.delegate.putDomainMeta(context, name, auditRef, detail);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDomainMeta");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{name}/template")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public DomainTemplate putDomainTemplate(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, DomainTemplate template) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + name + ":template", null);
            DomainTemplate e = this.delegate.putDomainTemplate(context, name, auditRef, template);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDomainTemplate");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{name}/template")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainTemplateList getDomainTemplateList(@PathParam("name") String name) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            DomainTemplateList e = this.delegate.getDomainTemplateList(context, name);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainTemplateList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{name}/template/{template}")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainTemplate deleteDomainTemplate(@PathParam("name") String name, @PathParam("template") String template, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + name + ":template." + template + "", null);
            DomainTemplate e = this.delegate.deleteDomainTemplate(context, name, template, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteDomainTemplate");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/check")
    @Produces(MediaType.APPLICATION_JSON)
    public DomainDataCheck getDomainDataCheck(@PathParam("domainName") String domainName) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            DomainDataCheck e = this.delegate.getDomainDataCheck(context, domainName);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getDomainDataCheck");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domainName}/entity/{entityName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Entity putEntity(@PathParam("domainName") String domainName, @PathParam("entityName") String entityName, @HeaderParam("Y-Audit-Ref") String auditRef, Entity entity) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":" + entityName + "", null);
            Entity e = this.delegate.putEntity(context, domainName, entityName, auditRef, entity);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putEntity");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/entity/{entityName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Entity getEntity(@PathParam("domainName") String domainName, @PathParam("entityName") String entityName) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Entity e = this.delegate.getEntity(context, domainName, entityName);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getEntity");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domainName}/entity/{entityName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Entity deleteEntity(@PathParam("domainName") String domainName, @PathParam("entityName") String entityName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + domainName + ":" + entityName + "", null);
            Entity e = this.delegate.deleteEntity(context, domainName, entityName, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteEntity");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/entity")
    @Produces(MediaType.APPLICATION_JSON)
    public EntityList getEntityList(@PathParam("domainName") String domainName) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            EntityList e = this.delegate.getEntityList(context, domainName);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getEntityList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/role")
    @Produces(MediaType.APPLICATION_JSON)
    public RoleList getRoleList(@PathParam("domainName") String domainName, @QueryParam("limit") Integer limit, @QueryParam("skip") String skip) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            RoleList e = this.delegate.getRoleList(context, domainName, limit, skip);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRoleList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/roles")
    @Produces(MediaType.APPLICATION_JSON)
    public Roles getRoles(@PathParam("domainName") String domainName, @QueryParam("members") @DefaultValue("false") Boolean members) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Roles e = this.delegate.getRoles(context, domainName, members);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/role/{roleName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Role getRole(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @QueryParam("auditLog") @DefaultValue("false") Boolean auditLog, @QueryParam("expand") @DefaultValue("false") Boolean expand) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Role e = this.delegate.getRole(context, domainName, roleName, auditLog, expand);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRole");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Role putRole(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @HeaderParam("Y-Audit-Ref") String auditRef, Role role) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            Role e = this.delegate.putRole(context, domainName, roleName, auditRef, role);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putRole");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domainName}/role/{roleName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Role deleteRole(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + domainName + ":role." + roleName + "", null);
            Role e = this.delegate.deleteRole(context, domainName, roleName, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteRole");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Membership getMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Membership e = this.delegate.getMembership(context, domainName, roleName, memberName);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getMembership");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Membership putMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef, Membership membership) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            Membership e = this.delegate.putMembership(context, domainName, roleName, memberName, auditRef, membership);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putMembership");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domainName}/role/{roleName}/member/{memberName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Membership deleteMembership(@PathParam("domainName") String domainName, @PathParam("roleName") String roleName, @PathParam("memberName") String memberName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":role." + roleName + "", null);
            Membership e = this.delegate.deleteMembership(context, domainName, roleName, memberName, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteMembership");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domainName}/admins")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public DefaultAdmins putDefaultAdmins(@PathParam("domainName") String domainName, @HeaderParam("Y-Audit-Ref") String auditRef, DefaultAdmins defaultAdmins) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "sys.auth:domain", null);
            DefaultAdmins e = this.delegate.putDefaultAdmins(context, domainName, auditRef, defaultAdmins);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putDefaultAdmins");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/policy")
    @Produces(MediaType.APPLICATION_JSON)
    public PolicyList getPolicyList(@PathParam("domainName") String domainName, @QueryParam("limit") Integer limit, @QueryParam("skip") String skip) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            PolicyList e = this.delegate.getPolicyList(context, domainName, limit, skip);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPolicyList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/policies")
    @Produces(MediaType.APPLICATION_JSON)
    public Policies getPolicies(@PathParam("domainName") String domainName, @QueryParam("assertions") @DefaultValue("false") Boolean assertions) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Policies e = this.delegate.getPolicies(context, domainName, assertions);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPolicies");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/policy/{policyName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Policy getPolicy(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Policy e = this.delegate.getPolicy(context, domainName, policyName);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPolicy");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domainName}/policy/{policyName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Policy putPolicy(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @HeaderParam("Y-Audit-Ref") String auditRef, Policy policy) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":policy." + policyName + "", null);
            Policy e = this.delegate.putPolicy(context, domainName, policyName, auditRef, policy);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putPolicy");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domainName}/policy/{policyName}")
    @Produces(MediaType.APPLICATION_JSON)
    public Policy deletePolicy(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + domainName + ":policy." + policyName + "", null);
            Policy e = this.delegate.deletePolicy(context, domainName, policyName, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deletePolicy");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/policy/{policyName}/assertion/{assertionId}")
    @Produces(MediaType.APPLICATION_JSON)
    public Assertion getAssertion(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @PathParam("assertionId") Long assertionId) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Assertion e = this.delegate.getAssertion(context, domainName, policyName, assertionId);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getAssertion");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domainName}/policy/{policyName}/assertion")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Assertion putAssertion(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @HeaderParam("Y-Audit-Ref") String auditRef, Assertion assertion) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":policy." + policyName + "", null);
            Assertion e = this.delegate.putAssertion(context, domainName, policyName, auditRef, assertion);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.CREATED:
                throw typedException(code, e, Assertion.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putAssertion");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domainName}/policy/{policyName}/assertion/{assertionId}")
    @Produces(MediaType.APPLICATION_JSON)
    public Assertion deleteAssertion(@PathParam("domainName") String domainName, @PathParam("policyName") String policyName, @PathParam("assertionId") Long assertionId, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domainName + ":policy." + policyName + "", null);
            Assertion e = this.delegate.deleteAssertion(context, domainName, policyName, assertionId, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteAssertion");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentity putServiceIdentity(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef, ServiceIdentity detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":service", null);
            ServiceIdentity e = this.delegate.putServiceIdentity(context, domain, service, auditRef, detail);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putServiceIdentity");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentity getServiceIdentity(@PathParam("domain") String domain, @PathParam("service") String service) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ServiceIdentity e = this.delegate.getServiceIdentity(context, domain, service);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServiceIdentity");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentity deleteServiceIdentity(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + domain + ":service", null);
            ServiceIdentity e = this.delegate.deleteServiceIdentity(context, domain, service, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteServiceIdentity");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/services")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentities getServiceIdentities(@PathParam("domainName") String domainName, @QueryParam("publickeys") @DefaultValue("false") Boolean publickeys, @QueryParam("hosts") @DefaultValue("false") Boolean hosts) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ServiceIdentities e = this.delegate.getServiceIdentities(context, domainName, publickeys, hosts);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServiceIdentities");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domainName}/service")
    @Produces(MediaType.APPLICATION_JSON)
    public ServiceIdentityList getServiceIdentityList(@PathParam("domainName") String domainName, @QueryParam("limit") Integer limit, @QueryParam("skip") String skip) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ServiceIdentityList e = this.delegate.getServiceIdentityList(context, domainName, limit, skip);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServiceIdentityList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}/publickey/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public PublicKeyEntry getPublicKeyEntry(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("id") String id) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            PublicKeyEntry e = this.delegate.getPublicKeyEntry(context, domain, service, id);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getPublicKeyEntry");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/publickey/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public PublicKeyEntry putPublicKeyEntry(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("id") String id, @HeaderParam("Y-Audit-Ref") String auditRef, PublicKeyEntry publicKeyEntry) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":service." + service + "", null);
            PublicKeyEntry e = this.delegate.putPublicKeyEntry(context, domain, service, id, auditRef, publicKeyEntry);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putPublicKeyEntry");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}/publickey/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public PublicKeyEntry deletePublicKeyEntry(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("id") String id, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":service." + service + "", null);
            PublicKeyEntry e = this.delegate.deletePublicKeyEntry(context, domain, service, id, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deletePublicKeyEntry");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domain}/tenancy/{service}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Tenancy putTenancy(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef, Tenancy detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":tenancy", null);
            Tenancy e = this.delegate.putTenancy(context, domain, service, auditRef, detail);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenancy");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domain}/tenancy/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public Tenancy getTenancy(@PathParam("domain") String domain, @PathParam("service") String service) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Tenancy e = this.delegate.getTenancy(context, domain, service);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getTenancy");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domain}/tenancy/{service}")
    @Produces(MediaType.APPLICATION_JSON)
    public Tenancy deleteTenancy(@PathParam("domain") String domain, @PathParam("service") String service, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + domain + ":tenancy", null);
            Tenancy e = this.delegate.deleteTenancy(context, domain, service, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenancy");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domain}/tenancy/{service}/resourceGroup/{resourceGroup}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public TenancyResourceGroup putTenancyResourceGroup(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef, TenancyResourceGroup detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":tenancy." + service + "", null);
            TenancyResourceGroup e = this.delegate.putTenancyResourceGroup(context, domain, service, resourceGroup, auditRef, detail);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenancyResourceGroup");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domain}/tenancy/{service}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public TenancyResourceGroup deleteTenancyResourceGroup(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":tenancy." + service + "", null);
            TenancyResourceGroup e = this.delegate.deleteTenancyResourceGroup(context, domain, service, resourceGroup, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenancyResourceGroup");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public TenantRoles putTenantRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @HeaderParam("Y-Audit-Ref") String auditRef, TenantRoles detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":tenant." + tenantDomain + "", null);
            TenantRoles e = this.delegate.putTenantRoles(context, domain, service, tenantDomain, auditRef, detail);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.CREATED:
                throw typedException(code, e, TenantRoles.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenantRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}")
    @Produces(MediaType.APPLICATION_JSON)
    public TenantRoles getTenantRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            TenantRoles e = this.delegate.getTenantRoles(context, domain, service, tenantDomain);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getTenantRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}")
    @Produces(MediaType.APPLICATION_JSON)
    public TenantRoles deleteTenantRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "" + domain + ":tenant." + tenantDomain + "", null);
            TenantRoles e = this.delegate.deleteTenantRoles(context, domain, service, tenantDomain, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenantRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public TenantResourceGroupRoles putTenantResourceGroupRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef, TenantResourceGroupRoles detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":tenant." + tenantDomain + "", null);
            TenantResourceGroupRoles e = this.delegate.putTenantResourceGroupRoles(context, domain, service, tenantDomain, resourceGroup, auditRef, detail);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.CREATED:
                throw typedException(code, e, TenantResourceGroupRoles.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putTenantResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public TenantResourceGroupRoles getTenantResourceGroupRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @PathParam("resourceGroup") String resourceGroup) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            TenantResourceGroupRoles e = this.delegate.getTenantResourceGroupRoles(context, domain, service, tenantDomain, resourceGroup);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getTenantResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public TenantResourceGroupRoles deleteTenantResourceGroupRoles(@PathParam("domain") String domain, @PathParam("service") String service, @PathParam("tenantDomain") String tenantDomain, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + domain + ":tenant." + tenantDomain + "", null);
            TenantResourceGroupRoles e = this.delegate.deleteTenantResourceGroupRoles(context, domain, service, tenantDomain, resourceGroup, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteTenantResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public ProviderResourceGroupRoles putProviderResourceGroupRoles(@PathParam("tenantDomain") String tenantDomain, @PathParam("provDomain") String provDomain, @PathParam("provService") String provService, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef, ProviderResourceGroupRoles detail) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + tenantDomain + ":tenancy." + provDomain + "." + provService + "", null);
            ProviderResourceGroupRoles e = this.delegate.putProviderResourceGroupRoles(context, tenantDomain, provDomain, provService, resourceGroup, auditRef, detail);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.CREATED:
                throw typedException(code, e, ProviderResourceGroupRoles.class);
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putProviderResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public ProviderResourceGroupRoles getProviderResourceGroupRoles(@PathParam("tenantDomain") String tenantDomain, @PathParam("provDomain") String provDomain, @PathParam("provService") String provService, @PathParam("resourceGroup") String resourceGroup) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ProviderResourceGroupRoles e = this.delegate.getProviderResourceGroupRoles(context, tenantDomain, provDomain, provService, resourceGroup);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getProviderResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
    @Produces(MediaType.APPLICATION_JSON)
    public ProviderResourceGroupRoles deleteProviderResourceGroupRoles(@PathParam("tenantDomain") String tenantDomain, @PathParam("provDomain") String provDomain, @PathParam("provService") String provService, @PathParam("resourceGroup") String resourceGroup, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "" + tenantDomain + ":tenancy." + provDomain + "." + provService + "", null);
            ProviderResourceGroupRoles e = this.delegate.deleteProviderResourceGroupRoles(context, tenantDomain, provDomain, provService, resourceGroup, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteProviderResourceGroupRoles");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/access/{action}/{resource}")
    @Produces(MediaType.APPLICATION_JSON)
    public Access getAccess(@PathParam("action") String action, @PathParam("resource") String resource, @QueryParam("domain") String domain, @QueryParam("principal") String checkPrincipal) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Access e = this.delegate.getAccess(context, action, resource, domain, checkPrincipal);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getAccess");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/access/{action}")
    @Produces(MediaType.APPLICATION_JSON)
    public Access getAccessExt(@PathParam("action") String action, @QueryParam("resource") String resource, @QueryParam("domain") String domain, @QueryParam("principal") String checkPrincipal) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Access e = this.delegate.getAccessExt(context, action, resource, domain, checkPrincipal);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getAccessExt");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/resource")
    @Produces(MediaType.APPLICATION_JSON)
    public ResourceAccessList getResourceAccessList(@QueryParam("principal") String principal, @QueryParam("action") String action) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ResourceAccessList e = this.delegate.getResourceAccessList(context, principal, action);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getResourceAccessList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/sys/modified_domains")
    @Produces(MediaType.APPLICATION_JSON)
    public void getSignedDomains(@QueryParam("domain") String domain, @QueryParam("metaonly") String metaOnly, @HeaderParam("If-None-Match") String matchingTag) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            GetSignedDomainsResult result = new GetSignedDomainsResult(context);
            this.delegate.getSignedDomains(context, domain, metaOnly, matchingTag, result);
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.NOT_MODIFIED:
                throw typedException(code, e, void.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getSignedDomains");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/user/{userName}/token")
    @Produces(MediaType.APPLICATION_JSON)
    public UserToken getUserToken(@PathParam("userName") String userName, @QueryParam("services") String serviceNames, @QueryParam("header") @DefaultValue("false") Boolean header) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            UserToken e = this.delegate.getUserToken(context, userName, serviceNames, header);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getUserToken");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @OPTIONS
    @Path("/user/{userName}/token")
    public UserToken optionsUserToken(@PathParam("userName") String userName, @QueryParam("services") String serviceNames) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            UserToken e = this.delegate.optionsUserToken(context, userName, serviceNames);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource optionsUserToken");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/principal")
    @Produces(MediaType.APPLICATION_JSON)
    public ServicePrincipal getServicePrincipal() {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ServicePrincipal e = this.delegate.getServicePrincipal(context);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServicePrincipal");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/template")
    @Produces(MediaType.APPLICATION_JSON)
    public ServerTemplateList getServerTemplateList() {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            ServerTemplateList e = this.delegate.getServerTemplateList(context);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getServerTemplateList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/template/{template}")
    @Produces(MediaType.APPLICATION_JSON)
    public Template getTemplate(@PathParam("template") String template) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Template e = this.delegate.getTemplate(context, template);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getTemplate");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/user")
    @Produces(MediaType.APPLICATION_JSON)
    public UserList getUserList() {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            UserList e = this.delegate.getUserList(context);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getUserList");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/user/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public User deleteUser(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("delete", "sys.auth:user", null);
            User e = this.delegate.deleteUser(context, name, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.TOO_MANY_REQUESTS:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteUser");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/domain/{name}/quota")
    @Produces(MediaType.APPLICATION_JSON)
    public Quota getQuota(@PathParam("name") String name) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Quota e = this.delegate.getQuota(context, name);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getQuota");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @PUT
    @Path("/domain/{name}/quota")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Quota putQuota(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef, Quota quota) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "sys.auth:quota", null);
            Quota e = this.delegate.putQuota(context, name, auditRef, quota);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource putQuota");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @DELETE
    @Path("/domain/{name}/quota")
    @Produces(MediaType.APPLICATION_JSON)
    public Quota deleteQuota(@PathParam("name") String name, @HeaderParam("Y-Audit-Ref") String auditRef) {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authorize("update", "sys.auth:quota", null);
            Quota e = this.delegate.deleteQuota(context, name, auditRef);
            return null;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.CONFLICT:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.FORBIDDEN:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource deleteQuota");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/status")
    @Produces(MediaType.APPLICATION_JSON)
    public Status getStatus() {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Status e = this.delegate.getStatus(context);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            case ResourceException.BAD_REQUEST:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.NOT_FOUND:
                throw typedException(code, e, ResourceError.class);
            case ResourceException.UNAUTHORIZED:
                throw typedException(code, e, ResourceError.class);
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getStatus");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }

    @GET
    @Path("/schema")
    @Produces(MediaType.APPLICATION_JSON)
    public Schema getRdlSchema() {
        try {
            ResourceContext context = this.delegate.newResourceContext(this.request, this.response);
            context.authenticate();
            Schema e = this.delegate.getRdlSchema(context);
            return e;
        } catch (ResourceException e) {
            int code = e.getCode();
            switch (code) {
            default:
                System.err.println("*** Warning: undeclared exception (" + code + ") for resource getRdlSchema");
                throw typedException(code, e, ResourceError.class);
            }
        }
    }


    WebApplicationException typedException(int code, ResourceException e, Class<?> eClass) {
        Object data = e.getData();
        Object entity = eClass.isInstance(data) ? data : null;
        if (entity != null) {
            return new WebApplicationException(Response.status(code).entity(entity).build());
        } else {
            return new WebApplicationException(code);
        }
    }

    @Inject private ZMSHandler delegate;
    @Context private HttpServletRequest request;
    @Context private HttpServletResponse response;
    
}
