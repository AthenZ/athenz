/*
 * Copyright The Athenz Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.yahoo.athenz.zms;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Strings;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSObject;
import com.nimbusds.jose.JWSVerifier;
import com.nimbusds.jose.crypto.RSASSAVerifier;
import com.nimbusds.jose.util.Base64URL;
import com.yahoo.athenz.auth.Authority;
import com.yahoo.athenz.auth.Principal;
import com.yahoo.athenz.auth.ServerPrivateKey;
import com.yahoo.athenz.auth.impl.*;
import com.yahoo.athenz.auth.token.PrincipalToken;
import com.yahoo.athenz.auth.util.AthenzUtils;
import com.yahoo.athenz.auth.util.Crypto;
import com.yahoo.athenz.common.config.AuthzDetailsEntity;
import com.yahoo.athenz.common.config.AuthzDetailsField;
import com.yahoo.athenz.common.messaging.DomainChangeMessage;
import com.yahoo.athenz.common.messaging.MockDomainChangePublisher;
import com.yahoo.athenz.common.metrics.Metric;
import com.yahoo.athenz.common.server.log.AuditLogMsgBuilder;
import com.yahoo.athenz.common.server.log.AuditLogger;
import com.yahoo.athenz.common.server.log.impl.DefaultAuditLogMsgBuilder;
import com.yahoo.athenz.common.server.metastore.DomainMetaStore;
import com.yahoo.athenz.common.server.notification.Notification;
import com.yahoo.athenz.common.server.notification.NotificationToEmailConverterCommon;
import com.yahoo.athenz.common.server.util.AuthzHelper;
import com.yahoo.athenz.common.server.util.ResourceUtils;
import com.yahoo.athenz.common.server.util.config.dynamic.DynamicConfigBoolean;
import com.yahoo.athenz.common.utils.SignUtils;
import com.yahoo.athenz.zms.ZMSImpl.AccessStatus;
import com.yahoo.athenz.zms.ZMSImpl.AthenzObject;
import com.yahoo.athenz.zms.config.MemberDueDays;
import com.yahoo.athenz.zms.notification.PutRoleMembershipNotificationTask;
import com.yahoo.athenz.zms.provider.DomainDependencyProviderResponse;
import com.yahoo.athenz.zms.provider.ServiceProviderClient;
import com.yahoo.athenz.zms.provider.ServiceProviderManager;
import com.yahoo.athenz.zms.status.MockStatusCheckerNoException;
import com.yahoo.athenz.zms.status.MockStatusCheckerThrowException;
import com.yahoo.athenz.zms.store.AthenzDomain;
import com.yahoo.athenz.zms.store.ObjectStoreConnection;
import com.yahoo.athenz.zms.utils.ZMSUtils;
import com.yahoo.rdl.Schema;
import com.yahoo.rdl.Struct;
import com.yahoo.rdl.Timestamp;
import jakarta.servlet.ServletContext;
import org.hamcrest.CoreMatchers;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import org.testng.Assert;
import org.testng.annotations.*;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.ws.rs.core.EntityTag;
import jakarta.ws.rs.core.Response;

import java.io.*;
import java.lang.reflect.Field;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.security.PrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import static com.yahoo.athenz.common.messaging.DomainChangeMessage.ObjectType.*;
import static com.yahoo.athenz.zms.ZMSConsts.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.testng.Assert.*;

public class ZMSImplTest {

    private final ZMSTestInitializer zmsTestInitializer = new ZMSTestInitializer();
    private final long fetchDomainDependencyFrequency = 1L; // For the tests, fetch every second

    @BeforeClass
    public void startMemoryMySQL() {
        zmsTestInitializer.startMemoryMySQL();
    }

    @AfterClass
    public void stopMemoryMySQL() {
        zmsTestInitializer.stopMemoryMySQL();
    }

    @BeforeMethod
    public void setUp() throws Exception {
        System.setProperty(ZMS_PROP_SERVICE_PROVIDER_MANAGER_FREQUENCY_SECONDS, String.valueOf(fetchDomainDependencyFrequency));
        zmsTestInitializer.setUp();
    }

    @AfterMethod
    public void clearConnections() throws Exception {
        zmsTestInitializer.clearConnections();
        System.clearProperty(ZMS_PROP_SERVICE_PROVIDER_MANAGER_FREQUENCY_SECONDS);
        // Reset ServiceProviderManager Singleton
        ServiceProviderManager.getInstance(zmsTestInitializer.getZms().dbService, zmsTestInitializer.getZms()).shutdown();
        Field instance = ServiceProviderManager.class.getDeclaredField("instance");
        instance.setAccessible(true);
        instance.set(null, null);
    }

    static class TestAuditLogger implements AuditLogger {

        final List<String> logMsgList = new ArrayList<>();

        List<String> getLogMsgList() {
            return logMsgList;
        }

        public void log(String logMsg, String msgVersionTag) {
            logMsgList.add(logMsg);
        }
        public void log(AuditLogMsgBuilder msgBldr) {
            String msg = msgBldr.build();
            logMsgList.add(msg);
        }
        @Override
        public AuditLogMsgBuilder getMsgBuilder() {
            return new DefaultAuditLogMsgBuilder();
        }
    }

    @Test
    public void testSchema() {
        Schema schema = zmsTestInitializer.getZms().schema();
        assertNotNull(schema);
    }

    @Test
    public void testGetAuditLogMsgBuildauditRefer() {
        AuditLogMsgBuilder msgBldr = ZMSUtils.getAuditLogMsgBuilder(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditLogger(),
                "mydomain", zmsTestInitializer.getAuditRef(), "myapi", "PUT");
        assertNotNull(msgBldr);
    }

    @Test
    public void testGetAuditLogMsgBuilderNullCtx() {
        AuditLogMsgBuilder msgBldr = ZMSUtils.getAuditLogMsgBuilder(null, zmsTestInitializer.getAuditLogger(),
                "mydomain", zmsTestInitializer.getAuditRef(), "myapi", "PUT");
        assertNotNull(msgBldr);
    }

    @Test
    public void testGetAuditLogMsgBuilderNullPrincipal() {
        ResourceContext ctx = zmsTestInitializer.createResourceContext(null);
        AuditLogMsgBuilder msgBldr = ZMSUtils.getAuditLogMsgBuilder(ctx, zmsTestInitializer.getAuditLogger(),
                "mydomain", zmsTestInitializer.getAuditRef(), "myapi", "PUT");
        assertNotNull(msgBldr);
    }

    @Test
    public void testGetAuditLogMsgBuilderTokenWithSig() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String userId     = "user1";
        String signature = "ABRACADABRA";
        String unsignedCreds = "v=U1;d=user;n=user1";
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=" + signature,
                0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds); // set unsigned creds
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal);
        AuditLogMsgBuilder msgBldr = ZMSUtils.getAuditLogMsgBuilder(ctx, zmsTestInitializer.getAuditLogger(),
                "mydomain", zmsTestInitializer.getAuditRef(), "myapi", "PUT");
        assertNotNull(msgBldr);
        String who = msgBldr.who();
        assertNotNull(who);
        assertTrue(who.contains(userId));
        assertFalse(who.contains(signature), "Should not contain the signature: " + who);
    }

    @Test
    public void testGetAuditLogMsgBuilderTokenSigMissing() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String userId     = "user1";
        String unsignedCreds = "v=U1;d=user;n=user1";
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds,
                0, principalAuthority);
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal);
        AuditLogMsgBuilder msgBldr = ZMSUtils.getAuditLogMsgBuilder(ctx, zmsTestInitializer.getAuditLogger(),
                "mydomain", zmsTestInitializer.getAuditRef(), "myapi", "PUT");
        assertNotNull(msgBldr);
        String who = msgBldr.who();
        assertNotNull(who);
        assertTrue(who.contains(userId));
    }

    @Test
    public void testGetAuditLogMsgBuilderNullParams() {
        AuditLogMsgBuilder msgBldr = ZMSUtils.getAuditLogMsgBuilder(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditLogger(),
                null, null, null, null);
        assertNotNull(msgBldr);
    }

    @Test
    public void testGetDomain() {
        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth");
        assertNotNull(domain);
    }

    @Test
    public void testGetDomainThrowException() {
        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "wrongDomain");
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testPostDomain() {
        String domName = "olddominion";
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        TopLevelDomain dom = new TopLevelDomain();
        dom.setName(domName);
        dom.setDescription("old virginny");
        dom.setOrg("universities");
        dom.setYpmId(1930);

        List<String> admins = new ArrayList<>();
        admins.add(zmsTestInitializer.getAdminUser());
        dom.setAdminUsers(admins);

        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        // post subdomain
        String subDomName = "extension";
        SubDomain subDom = zmsTestInitializer.createSubDomainObject(subDomName, domName,
                "old dominion extension", "education", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef(), subDom);

        // post sub domain that is too big - default length is 128
        String subDomNameBad = "extension0extension0extension0extension0";
        subDomNameBad = subDomNameBad.concat("extension0extension0extension0extension0");
        subDomNameBad = subDomNameBad.concat("extension0extension0extension0extension0");

        subDom = zmsTestInitializer.createSubDomainObject(subDomNameBad, domName,
                "old dominion extension+++", "education", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef(), subDom);
            fail("requesterror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Invalid SubDomain name"));
            assertTrue(ex.getMessage().contains("name length cannot exceed"));
        }

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, subDomName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPostDomainNullObject() {
        try {
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), null);
            fail("requesterror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
    }

    @Test
    public void testPostTopLevelDomainNoProductId() {

        // enable product id support

        System.setProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT, "true");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        String domName = "jabberwocky";
        try {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        TopLevelDomain dom = new TopLevelDomain();
        dom.setName(domName);
        dom.setDescription("mythic animal");
        dom.setOrg("animals");

        List<String> admins = new ArrayList<>();
        admins.add(zmsTestInitializer.getAdminUser());
        dom.setAdminUsers(admins);

        try {
            zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);
            fail("requesterror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Product Id is required when creating top level domain"));
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testPostTopLevelDomainNameTooLong() {

        // have 129 chars - default is 128

        final String domName = Strings.repeat("a", 129);

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        TopLevelDomain dom = new TopLevelDomain();
        dom.setName(domName);
        dom.setDescription("bigun");
        dom.setOrg("bigdog");

        List<String> admins = new ArrayList<>();
        admins.add(zmsTestInitializer.getAdminUser());
        dom.setAdminUsers(admins);

        try {
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);
            fail("requesterror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("name length cannot exceed"));
        }
    }

    @Test
    public void testPostDomainNameOnSizeLimit() {

        // set the domain size limit to 45
        System.setProperty(ZMSConsts.ZMS_PROP_DOMAIN_NAME_MAX_SIZE, "45");

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        // have 45 chars
        final String domName = Strings.repeat("a", 45);

        try {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        TopLevelDomain dom = new TopLevelDomain();
        dom.setName(domName);
        dom.setDescription("bigun");
        dom.setOrg("bigdog");
        dom.setYpmId(999999);

        List<String> admins = new ArrayList<>();
        admins.add(zmsTestInitializer.getAdminUser());
        dom.setAdminUsers(admins);

        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        // post sub domain which will be too big by 1 char
        String subDomNameBad = "B";
        SubDomain subDom = zmsTestInitializer.createSubDomainObject(subDomNameBad, domName,
                "1 char too many", "dogs", zmsTestInitializer.getAdminUser());
        try {
            zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef(), subDom);
            fail("requesterror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Invalid SubDomain name"));
            assertTrue(ex.getMessage().contains("name length cannot exceed"));
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_DOMAIN_NAME_MAX_SIZE);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testPostTopLevelDomainNameReduceSizeLimitTooSmall() {

        // lower name length to 5 which should be reset internally to the default
        System.setProperty(ZMSConsts.ZMS_PROP_DOMAIN_NAME_MAX_SIZE, "5");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        String domName = "abcdef7890";
        try {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        TopLevelDomain dom = new TopLevelDomain();
        dom.setName(domName);
        dom.setDescription("bigun");
        dom.setOrg("bigdog");
        dom.setYpmId(77777);

        List<String> admins = new ArrayList<>();
        admins.add(zmsTestInitializer.getAdminUser());
        dom.setAdminUsers(admins);

        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_DOMAIN_NAME_MAX_SIZE);
        zmsImpl.objectStore.clearConnections();
    }
    
    @Test
    public void testGetDomainList() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("ListDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, null, null);
        assertNotNull(domList);

        assertTrue(domList.getNames().contains("ListDom1".toLowerCase()));
        assertTrue(domList.getNames().contains("ListDom2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListByAccount() {

        String domainName = "lookupdomainaccount";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAccount("1234");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                "1234", null, null, null, null, null, null, null, null);
        assertNotNull(domList.getNames());
        assertEquals(domList.getNames().size(), 1);
        assertEquals(domList.getNames().get(0), domainName);

        domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                "1235", null, null, null, null, null, null, null, null);
        assertNull(domList.getNames());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListBySubscription() {

        final String domainName = "lookup-domain-azure-subscription";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAzureSubscription("azure1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, "azure1", null, null, null, null);
        assertNotNull(domList.getNames());
        assertEquals(domList.getNames().size(), 1);
        assertEquals(domList.getNames().get(0), domainName);

        domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, "azure2", null, null, null, null);
        assertNull(domList.getNames());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListByBusinessService() {

        final String domainName1 = "lookup-domain-business-service1";
        final String domainName2 = "lookup-domain-business-service2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setBusinessService("sports");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, "sports", null);
        assertNotNull(domList.getNames());
        assertEquals(domList.getNames().size(), 1);
        assertEquals(domList.getNames().get(0), domainName1);

        // now let's get 2 domains with same service name

        DomainMeta dm = new DomainMeta().setBusinessService("sports");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef(), dm);

        domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, "sports", null);
        assertNotNull(domList.getNames());
        assertEquals(domList.getNames().size(), 2);
        assertTrue(domList.getNames().contains(domainName1));
        assertTrue(domList.getNames().contains(domainName2));

        // unknown service - no match

        domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, "unknown-service", null);
        assertNotNull(domList.getNames());
        assertTrue(domList.getNames().isEmpty());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListByRoleDetails() {

        final String domainName = "lookup-domain-role-details";
        final String roleName = "role-test1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.user101", null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, "user.user101", roleName, null, null, null, null, null);
        assertNotNull(domList.getNames());
        assertEquals(domList.getNames().size(), 1);
        assertEquals(domList.getNames().get(0), domainName);

        domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null, null, null,
                "user.user101", "unknown-role-name", null, null, null, null, null);
        assertTrue(domList.getNames().isEmpty());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListByProductId() {

        String domainName = "lookupdomainbyproductid";

        // enable product id support

        System.setProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT, "true");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setYpmId(101);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainList domList = zmsImpl.getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null,
                null, null, 101, null, null, null, null, null, null, null);
        assertNotNull(domList.getNames());
        assertEquals(domList.getNames().size(), 1);
        assertEquals(domList.getNames().get(0), domainName);

        domList = zmsImpl.getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null, null,
                102, null, null, null, null, null, null, null);
        assertNull(domList.getNames());

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testGetDomainListIfModifiedSince() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // let's get the current time

        Date now = new Date();

        ZMSUtils.threadSleep(1000);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("ListDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DateFormat df = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss zzz");
        String modifiedSince = df.format(now);

        // this is only a partial list since our file struct store
        // which the unit tests use does not support last modified
        // option so this will be tested in zms_system_test package

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null,
                null, null, null, null, null, null, null, null, null, modifiedSince);
        assertNotNull(domList);

        assertTrue(domList.getNames().contains("ListDom2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListInvalidIfModifiedSince() {

        try {
            zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null, null,
                    null, null, null, null, null, null, null, "abc");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        try {
            zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null, null,
                    null, null, null, null, null, null, null, "May 20, 1099");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        try {
            zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null, null,
                    null, null, null, null, null, null, null, "03:03:20 PM");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
    }

    @Test
    public void testGetDomainListParamsLimit() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("LimitDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("LimitDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), 1, null, null,
                null, null, null, null, null, null, null, null, null, null);
        assertEquals(1, domList.getNames().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "LimitDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "LimitDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListParamsSkip() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SkipDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("SkipDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject("SkipDom3",
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null,
                null, null, null, null, null, null, null, null, null, null);
        int size = domList.getNames().size();
        assertTrue(size > 3);

        // ask for only for 2 domains back
        domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), 2, null, null, null, null,
                null, null, null, null, null, null, null, null);
        assertEquals(domList.getNames().size(), 2);

        // ask for the remaining domains
        DomainList remList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, domList.getNext(),
                null, null, null, null, null, null, null, null, null, null, null);
        assertEquals(remList.getNames().size(), size - 2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SkipDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SkipDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SkipDom3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListParamsPrefix() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("NoPrefixDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("PrefixDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null,
                "Prefix", null, null, null, null, null, null, null, null, null, null);

        assertFalse(domList.getNames().contains("NoPrefixDom1".toLowerCase()));
        assertTrue(domList.getNames().contains("PrefixDom2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "NoPrefixDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PrefixDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListParamsDepth() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DepthDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("DepthDom2", "DepthDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1", zmsTestInitializer.getAuditRef(), dom2);

        SubDomain dom3 = zmsTestInitializer.createSubDomainObject("DepthDom3",
                "DepthDom1.DepthDom2", "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1.DepthDom2", zmsTestInitializer.getAuditRef(), dom3);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null,
                1, null, null, null, null, null, null, null, null, null);

        assertTrue(domList.getNames().contains("DepthDom1".toLowerCase()));
        assertTrue(domList.getNames().contains("DepthDom1.DepthDom2".toLowerCase()));
        assertFalse(domList.getNames().contains("DepthDom1.DepthDom2.DepthDom3".toLowerCase()));

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1.DepthDom2", "DepthDom3", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1", "DepthDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainListThrowException() {
        try {
            zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), -1, null, null, null, null, null, null,
                    null, null, null, null, null, null);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }
    }

    @Test
    public void testCreateTopLevelDomain() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AddTopDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom1 = zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        assertNotNull(resDom1);

        Domain resDom2 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddTopDom1");
        assertNotNull(resDom2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddTopDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateTopLevelDomainOnceOnly() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AddOnceTopDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom1 = zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        assertNotNull(resDom1);

        // we should get an exception for the second call

        try {
            zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddOnceTopDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateSubDomain() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AddSubDom1",
            "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("AddSubDom2", "AddSubDom1",
            "Test Domain2", null, zmsTestInitializer.getAdminUser());
        Domain resDom1 = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", zmsTestInitializer.getAuditRef(), dom2);
        assertNotNull(resDom1);

        Domain resDom2 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1.AddSubDom2");
        assertNotNull(resDom2);

        assertEquals(dom2.getOrg(), "testorg");
        assertFalse(resDom2.getAuditEnabled());

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", "AddSubDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateSubDomainInAuditEnabledParent() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AddSubDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Test Domain1", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("AddSubDom2", "AddSubDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom1 = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", zmsTestInitializer.getAuditRef(), dom2);
        assertNotNull(resDom1);

        Domain resDom2 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1.AddSubDom2");
        assertNotNull(resDom2);

        assertTrue(resDom2.getAuditEnabled());

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", "AddSubDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateUserDomain() {

        RsrcCtxWrapper ctx = zmsTestInitializer.contextWithMockPrincipal("postUserDomain");
        UserDomain dom1 = zmsTestInitializer.createUserDomainObject("hga", "Test Domain1", "testOrg");
        zmsTestInitializer.getZms().postUserDomain(ctx, "hga", zmsTestInitializer.getAuditRef(), dom1);

        assertSingleChangeMessage(ctx.getDomainChangeMessages(), DOMAIN, "user.hga", "user.hga", "postUserDomain");
        
        Domain resDom2 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.hga");
        assertNotNull(resDom2);

        RsrcCtxWrapper deleteCtx = zmsTestInitializer.contextWithMockPrincipal("deleteUserDomain");
        zmsTestInitializer.getZms().deleteUserDomain(deleteCtx, "hga", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(deleteCtx.getDomainChangeMessages(), DOMAIN, "user.hga", "user.hga", "deleteUserDomain");
    }

    @Test
    public void testCreateUserDomainWithTemplates() {

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysSecurity = zmsTestInitializer.createSubDomainObject("security", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysSecurity);

        UserDomain dom1 = zmsTestInitializer.createUserDomainObject("hga", "Test Domain1", "testOrg");
        DomainTemplateList templates = new DomainTemplateList();
        List<String> templateNames = new ArrayList<>();
        templateNames.add("network");
        templates.setTemplateNames(templateNames);
        dom1.setTemplates(templates);
        zmsImpl.postUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "hga", zmsTestInitializer.getAuditRef(), dom1);

        Domain resDom2 = zmsImpl.getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.hga");
        assertNotNull(resDom2);
        templates = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), "user.hga");
        assertEquals(templates.getTemplateNames().size(), 1);
        assertEquals(templates.getTemplateNames().get(0), "network");

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "security", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "hga", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateUserDomainMismatch() {

        UserDomain dom1 = zmsTestInitializer.createUserDomainObject("hga", "Test Domain Mismatch", "testMismatchOrg");
        try {
            zmsTestInitializer.getZms().postUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "hga2", zmsTestInitializer.getAuditRef(), dom1);
        } catch (ResourceException ex) {
            assertEquals(403, ex.getCode());
        }
    }

    @Test
    public void testDeleteUserDomain() {

        UserDomain dom1 = zmsTestInitializer.createUserDomainObject("hga", "Test Domain Delete User Domain", "testDeleteOrg");
        zmsTestInitializer.getZms().postUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "hga", zmsTestInitializer.getAuditRef(), dom1);

        zmsTestInitializer.getZms().deleteUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "hga", zmsTestInitializer.getAuditRef());

        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "hga");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }
    }

    @Test
    public void testCreateSubDomainNoParent() {

        SubDomain dom = zmsTestInitializer.createSubDomainObject("sub", "parent",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "parent", zmsTestInitializer.getAuditRef(), dom);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // now first create the parent

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("parent",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // and then create the subdomain

        Domain resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "parent", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        // clean up domains

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "parent", "sub", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "parent", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateSubDomainWithVirtualLimit() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "2");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SubDomNoVirtual",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom = zmsTestInitializer.createSubDomainObject("sub1", "SubDomNoVirtual",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub2", "SubDomNoVirtual",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub3", "SubDomNoVirtual",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", "sub3", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", "sub2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SubDomNoVirtual", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testCreateSubDomainVirtual() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "5");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        SubDomain dom = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub2", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub3", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1a", "user.user1.sub1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1aa", "user.user1.sub1.sub1a",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1.sub1a", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1ab", "user.user1.sub1.sub1a",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1.sub1a", zmsTestInitializer.getAuditRef(), dom);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        dom = zmsTestInitializer.createSubDomainObject("sub4", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1.sub1a", "sub1aa", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1", "sub1a", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub3", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testCreateSubDomainVirtualNoLimit() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "0");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        SubDomain dom = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub2", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub3", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub4", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub5", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub6", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub6", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub5", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub4", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub3", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testCreateSubDomainMismatchParent() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AddSubMismatchParentDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("AddSubDom2", "AddSubMismatchParentDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());

        try {
            zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubMismatchParentDom2", zmsTestInitializer.getAuditRef(), dom2);
        } catch (ResourceException ex) {
            assertEquals(403, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddSubMismatchParentDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateSubdomainOnceOnly() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AddOnceSubDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("AddOnceSubDom2",
                "AddOnceSubDom1", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom1 = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddOnceSubDom1", zmsTestInitializer.getAuditRef(), dom2);
        assertNotNull(resDom1);

        // we should get an exception for the second call

        try {
            zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddOnceSubDom1", zmsTestInitializer.getAuditRef(), dom2);
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddOnceSubDom1", "AddOnceSubDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddOnceSubDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteDomain() {

        // make sure we can't delete system domains

        try {
            zmsTestInitializer.getZms().deleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), "sys.auth", "testDeleteDomain");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("reserved system domain"));
        }

        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                "TestDeleteDomain", null, null, zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        zmsTestInitializer.getZms().deleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), "testdeletedomain", "testDeleteDomain");

        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "TestDeleteDomain");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testDeleteDomainNonExistant() {
        try {
            zmsTestInitializer.getZms().deleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), "TestDeleteDomainNonExist", "testDeleteDomainNonExistant");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testDeleteDomainMissingAuditRef() {
        // create domain and require auditing
        String domain = "testdeletedomainmissingauditref";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, null, null, zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        // delete it without an auditRef and catch exception
        try {
            zmsTestInitializer.getZms().deleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), null, domain, "testDeleteDomainMissingAuditRef");
            fail("requesterror not thrown by testDeleteDomainMissingAuditRef.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteTopLevelDomain() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DelTopDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain resDom1 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopDom1");
        assertNotNull(resDom1);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopDom1", zmsTestInitializer.getAuditRef());

        // we should get a forbidden exception since the domain
        // no longer exists

        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopDom1");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }
    }

    @Test
    public void testVerifyServiceProvidersAuthorizeDelete() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        String domain = "test";
        String caller = "deleteDomain";

        // Mock service provider manager and service provider client

        zmsImpl.serviceProviderManager = Mockito.mock(ServiceProviderManager.class);
        zmsImpl.serviceProviderClient = Mockito.mock(ServiceProviderClient.class);
        Map<String, ServiceProviderManager.DomainDependencyProvider> serviceProvidersWithEndpoints = new HashMap<>();
        boolean isInstance = false;
        String status = PROVIDER_RESPONSE_DENY;
        int numberOfProviders = 20;
        for (int i = 1; i <= numberOfProviders; ++i) {
            ServiceProviderManager.DomainDependencyProvider domainDependencyProvider = new ServiceProviderManager.DomainDependencyProvider("provider" + i, "https://provider" + i, isInstance);
            serviceProvidersWithEndpoints.put("provider" + i, domainDependencyProvider);
            DomainDependencyProviderResponse providerResponse = new DomainDependencyProviderResponse();
            providerResponse.setStatus(status);
            providerResponse.setMessage("message for provider number " + i + "isInstance? " + isInstance);
            Mockito.when(zmsImpl.serviceProviderClient.getDependencyStatus(domainDependencyProvider, domain, ctx.principal().getFullName())).thenReturn(providerResponse);
            isInstance = !isInstance;
            status = status.equals(PROVIDER_RESPONSE_DENY) ? PROVIDER_RESPONSE_ALLOW : PROVIDER_RESPONSE_DENY;
        }
        Mockito.when(zmsImpl.serviceProviderManager.getServiceProvidersWithEndpoints()).thenReturn(serviceProvidersWithEndpoints);

        try {
            zmsImpl.verifyServiceProvidersAuthorizeDelete(ctx, domain, caller);
            fail();
        } catch (ResourceException ex) {
            status = PROVIDER_RESPONSE_DENY;
            isInstance = false;
            for (int i = 1; i <= numberOfProviders; ++i) {
                if (status.equals(PROVIDER_RESPONSE_DENY)) {
                    assertTrue(ex.getMessage().contains("message for provider number " + i + "isInstance? " + isInstance));
                } else {
                    assertFalse(ex.getMessage().contains("message for provider number " + i + "isInstance? " + isInstance));
                }
                isInstance = !isInstance;
                status = status.equals(PROVIDER_RESPONSE_DENY) ? PROVIDER_RESPONSE_ALLOW : PROVIDER_RESPONSE_DENY;
            }
        }
        Mockito.verify(zmsImpl.serviceProviderManager, Mockito.times(1)).getServiceProvidersWithEndpoints();
    }

    @Test
    public void testDeleteTopLevelDomainServiceProviderDeclines() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();

        String topLevelDomainName = "deltopdomdependencyexist";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(topLevelDomainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, zmsTestInitializer.getAuditRef(), dom1);

        Domain resDom1 = zmsImpl.getDomain(ctx, topLevelDomainName);
        assertNotNull(resDom1);

        // Create services

        ServiceIdentity service = zmsTestInitializer.createServiceObject(topLevelDomainName,
                "Service1", "http://localhost/ser", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), topLevelDomainName, "Service1", zmsTestInitializer.getAuditRef(), false, service);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject(topLevelDomainName,
                "Service2", "http://localhost/ser2", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), topLevelDomainName, "Service2", zmsTestInitializer.getAuditRef(), false, service2);

        // Set endpoint for services

        RsrcCtxWrapper sysAdminCtx = zmsTestInitializer.contextWithMockPrincipal("deleteMembership");

        ServiceIdentitySystemMeta meta = new ServiceIdentitySystemMeta();
        meta.setProviderEndpoint("https://localhost/service-provider-test-delete");
        zmsTestInitializer.getZms().putServiceIdentitySystemMeta(sysAdminCtx, topLevelDomainName, "Service1", "providerendpoint", zmsTestInitializer.getAuditRef(), meta);

        ServiceIdentitySystemMeta meta2 = new ServiceIdentitySystemMeta();
        meta2.setProviderEndpoint("https://localhost/service-provider-test-delete2");
        zmsTestInitializer.getZms().putServiceIdentitySystemMeta(sysAdminCtx, topLevelDomainName, "Service2", "providerendpoint", zmsTestInitializer.getAuditRef(), meta2);

        // Make service2 an instance provider as well as service provider
        makeInstanceProvider(topLevelDomainName, sysAdminCtx, "service2");
        makeServiceProviders(zmsTestInitializer.getZms(), sysAdminCtx, Arrays.asList(topLevelDomainName + ".service1", topLevelDomainName + ".service2"));

        // Make service1 provider deny deletion for regular user and allow it for admin for service1
        // Make service2 provider deny deletion for all users

        zmsTestInitializer.getZms().serviceProviderClient = Mockito.mock(ServiceProviderClient.class);
        DomainDependencyProviderResponse providerResponseDeniesRegularUser = new DomainDependencyProviderResponse();
        providerResponseDeniesRegularUser.setStatus(PROVIDER_RESPONSE_DENY);
        providerResponseDeniesRegularUser.setMessage("provider denied deleting the domain for principal " + ctx.principal().getFullName());
        ServiceProviderManager.DomainDependencyProvider domainDependencyProvider = new ServiceProviderManager.DomainDependencyProvider(topLevelDomainName + ".service1", "https://localhost/service-provider-test-delete", false);
        when(zmsTestInitializer.getZms().serviceProviderClient.getDependencyStatus(domainDependencyProvider, topLevelDomainName, ctx.principal().getFullName())).thenReturn(providerResponseDeniesRegularUser);
        DomainDependencyProviderResponse providerResponseAllows = new DomainDependencyProviderResponse();
        providerResponseAllows.setStatus(PROVIDER_RESPONSE_ALLOW);
        when(zmsTestInitializer.getZms().serviceProviderClient.getDependencyStatus(domainDependencyProvider, topLevelDomainName, sysAdminCtx.principal().getFullName())).thenReturn(providerResponseAllows);
        ServiceProviderManager.DomainDependencyProvider domainDependencyProvider2 = new ServiceProviderManager.DomainDependencyProvider(topLevelDomainName + ".service2", "https://localhost/service-provider-test-delete2", true);
        when(zmsTestInitializer.getZms().serviceProviderClient.getDependencyStatus(domainDependencyProvider2, topLevelDomainName, ctx.principal().getFullName())).thenReturn(providerResponseDeniesRegularUser);
        DomainDependencyProviderResponse providerResponseDeniesAdmin = new DomainDependencyProviderResponse();
        providerResponseDeniesAdmin.setStatus(PROVIDER_RESPONSE_DENY);
        providerResponseDeniesAdmin.setMessage("provider denied deleting the domain for principal " + sysAdminCtx.principal().getFullName());
        when(zmsTestInitializer.getZms().serviceProviderClient.getDependencyStatus(domainDependencyProvider2, topLevelDomainName, sysAdminCtx.principal().getFullName()))
                .thenReturn(providerResponseDeniesAdmin) // Service2 provider will deny deletion in the first call by a sys admin
                .thenReturn(providerResponseAllows);

        // Wait for cache to be ServiceProviderManager cache to refresh

        ZMSTestUtils.sleep((1000 * fetchDomainDependencyFrequency) + 50);

        // Denies deletion for regular user by both service providers

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(ctx, topLevelDomainName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Service 'deltopdomdependencyexist.service2' is dependent on domain 'deltopdomdependencyexist'. Error: provider denied deleting the domain for principal user.user1, Service 'deltopdomdependencyexist.service1' is dependent on domain 'deltopdomdependencyexist'. Error: provider denied deleting the domain for principal user.user1\"}");
        }

        // Denies deletion for sys admin by service2 provider

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(sysAdminCtx, topLevelDomainName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Service 'deltopdomdependencyexist.service2' is dependent on domain 'deltopdomdependencyexist'. Error: provider denied deleting the domain for principal user.testadminuser\"}");
        }


        // Now the client will start to allow deletions for sys admin

        zmsTestInitializer.getZms().deleteTopLevelDomain(sysAdminCtx, topLevelDomainName, zmsTestInitializer.getAuditRef());
    }

    private void makeInstanceProvider(String topLevelDomainName, RsrcCtxWrapper sysAdminCtx, String serviceInstanceProvider) {
        String instanceProvidersRoleName = "instance-providers";
        Role role = new Role();
        role.setName(instanceProvidersRoleName);
        RoleMember roleMember = new RoleMember();
        roleMember.setMemberName(topLevelDomainName + "." + serviceInstanceProvider);
        List<RoleMember> roleMembers = Arrays.asList(roleMember);
        role.setRoleMembers(roleMembers);
        zmsTestInitializer.getZms().putRole(sysAdminCtx, "sys.auth", instanceProvidersRoleName, zmsTestInitializer.getAuditRef(), false, role);

        String instanceProviderPolicyName = "instanceProviderPolicy";
        Policy policy = new Policy();
        policy.setName(instanceProviderPolicyName);
        Assertion assertion = new Assertion();
        assertion.setAction("launch");
        assertion.setResource("sys.auth:instance");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setRole("sys.auth:role." + instanceProvidersRoleName);
        List<Assertion> assertions = Arrays.asList(assertion);
        policy.setAssertions(assertions);
        zmsTestInitializer.getZms().putPolicy(sysAdminCtx, "sys.auth", instanceProviderPolicyName, zmsTestInitializer.getAuditRef(), false, policy);
    }

    @Test
    public void testDeleteTopLevelDomainDependencyExist() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();

        String topLevelDomainName = "deltopdomdependencyexist";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(topLevelDomainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, zmsTestInitializer.getAuditRef(), dom1);

        Domain resDom1 = zmsImpl.getDomain(ctx, topLevelDomainName);
        assertNotNull(resDom1);

        registerDependency(ctx, topLevelDomainName, zmsImpl, topLevelDomainName, "service-provider1");

        // We can't delete a domain that has service dependency

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(ctx, topLevelDomainName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Remove domain 'deltopdomdependencyexist' dependency from the following service(s):deltopdomdependencyexist.service-provider1\"}");
        }

        // Register another dependency, verify it appears in the delete error list

        registerDependency(ctx, topLevelDomainName, zmsImpl, topLevelDomainName, "service-provider2");
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(ctx, topLevelDomainName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Remove domain 'deltopdomdependencyexist' dependency from the following service(s):deltopdomdependencyexist.service-provider1, deltopdomdependencyexist.service-provider2\"}");
        }

        // Remove one of the dependencies, verify the error message is updated

        deRegisterDependency(topLevelDomainName, zmsImpl, topLevelDomainName, "service-provider1");
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(ctx, topLevelDomainName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Remove domain 'deltopdomdependencyexist' dependency from the following service(s):deltopdomdependencyexist.service-provider2\"}");
        }

        // Now remove the dependency but set endpoint for the service - verify the error message change
        RsrcCtxWrapper sysAdminCtx = zmsTestInitializer.contextWithMockPrincipal("deleteMembership");
        zmsTestInitializer.getZms().deleteDomainDependency(sysAdminCtx, topLevelDomainName, topLevelDomainName + ".service-provider2", zmsTestInitializer.getAuditRef());
        // Verify dependency was removed
        DomainList dependentDomainList = zmsImpl.getDependentDomainList(sysAdminCtx, topLevelDomainName + ".service-provider1");
        assertEquals(dependentDomainList.getNames().size(), 0);
        ServiceIdentitySystemMeta meta = new ServiceIdentitySystemMeta();
        meta.setProviderEndpoint("https://localhost/testendpoint");
        zmsTestInitializer.getZms().putServiceIdentitySystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), topLevelDomainName, "service-provider2", "providerendpoint", zmsTestInitializer.getAuditRef(), meta);

        // Wait for cache to be ServiceProviderManager cache to refresh

        ZMSTestUtils.sleep((1000 * fetchDomainDependencyFrequency) + 50);

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(ctx, topLevelDomainName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Service '" + topLevelDomainName + ".service-provider2' is dependent on domain '" + topLevelDomainName + "'. Error: Exception thrown during call to provider: Failed to get response from server: https://localhost/testendpoint\"}");
        }

        // Now make the provider approve the deletion

        ServiceProviderManager.DomainDependencyProvider domainDependencyProvider = new ServiceProviderManager.DomainDependencyProvider(topLevelDomainName + ".service-provider2", "https://localhost/testendpoint", false);
        DomainDependencyProviderResponse providerResponse = new DomainDependencyProviderResponse();
        providerResponse.setStatus("allow");
        ServiceProviderClient serviceProviderClientMock = Mockito.mock(ServiceProviderClient.class);
        when(serviceProviderClientMock.getDependencyStatus(domainDependencyProvider, topLevelDomainName, ctx.principal().getFullName())).thenReturn(providerResponse);
        zmsTestInitializer.getZms().serviceProviderClient = serviceProviderClientMock;
        zmsTestInitializer.getZms().deleteTopLevelDomain(ctx, topLevelDomainName, zmsTestInitializer.getAuditRef());
    }

    private RsrcCtxWrapper registerDependency(RsrcCtxWrapper mockDomRsrcCtx, String domainName, ZMSImpl zmsImpl, String serviceProviderDomain, String serviceProviderName) {

        // Check if service provider exists. If not create it

        try {
            zmsImpl.getServiceIdentity(mockDomRsrcCtx, serviceProviderDomain, serviceProviderName);
        } catch (ResourceException ex) {
            ServiceIdentity serviceProvider = zmsTestInitializer.createServiceObject(serviceProviderDomain,
                    serviceProviderName, "http://localhost", "/usr/bin/java", "root",
                    "users", "host1");

            zmsImpl.putServiceIdentity(mockDomRsrcCtx, serviceProviderDomain, serviceProviderName, zmsTestInitializer.getAuditRef(), false, serviceProvider);
        }

        String fullServiceProviderName = serviceProviderDomain + "." + serviceProviderName;

        // Create service provider role if doesn't exist

        String sysAdminDomainName = "sys.auth";
        String serviceProvidersRoleName = "service_providers";
        try {
            zmsImpl.getRole(mockDomRsrcCtx, sysAdminDomainName, serviceProvidersRoleName, false, false, false);
        } catch (ResourceException ex) {
            Role role = new Role();
            role.setName(serviceProvidersRoleName);
            role.setRoleMembers(new ArrayList<>());
            zmsImpl.putRole(mockDomRsrcCtx, sysAdminDomainName, serviceProvidersRoleName, zmsTestInitializer.getAuditRef(), false, role);
        }

        // Add service to authorized service providers list

        Membership membership = new Membership();
        membership.setMemberName(fullServiceProviderName);

        RsrcCtxWrapper sysAdminContext = zmsTestInitializer.contextWithMockPrincipal("putMembership");
        zmsImpl.putMembership(sysAdminContext, sysAdminDomainName, serviceProvidersRoleName, fullServiceProviderName, zmsTestInitializer.getAuditRef(), false, membership);

        // Wait for cache to be ServiceProviderManager cache to refresh

        ZMSTestUtils.sleep((1000 * fetchDomainDependencyFrequency) + 50);

        // Now make the service provider put a dependency on the  domain

        RsrcCtxWrapper serviceProviderCtx = zmsTestInitializer.contextWithMockPrincipal("putDomainDependency", serviceProviderDomain, serviceProviderName);
        DependentService dependentService = new DependentService().setService(fullServiceProviderName);
        zmsImpl.putDomainDependency(serviceProviderCtx, domainName, zmsTestInitializer.getAuditRef(), dependentService);
        return serviceProviderCtx;
    }

    private void deRegisterDependency(String domainName, ZMSImpl zmsImpl, String serviceProviderDomain, String serviceProviderName) {
        String fullServiceProviderName = serviceProviderDomain + "." + serviceProviderName;
        RsrcCtxWrapper serviceProviderCtx = zmsTestInitializer.contextWithMockPrincipal("putDomainDependency", serviceProviderDomain, serviceProviderName);
        zmsImpl.deleteDomainDependency(serviceProviderCtx, domainName, fullServiceProviderName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteTopLevelDomainChildExist() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DelTopChildDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("DelSubDom2", "DelTopChildDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopChildDom1", zmsTestInitializer.getAuditRef(), dom2);

        // we can't delete Dom1 since Dom2 still exists

        try {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopChildDom1", zmsTestInitializer.getAuditRef());
            fail("requesterror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopChildDom1", "DelSubDom2", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelTopChildDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteTopLevelDomainNonExistant() {
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "NonExistantDomain", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testDeleteTopLevelDomainNonExistantNoAuditRef() {
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "NonExistantDomain", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testDeleteTopLevelDomainMissingAuditRef() {
        // create domain and require auditing
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                "TopDomainAuditRequired", null, null, zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        // delete it without an auditRef and catch exception
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "TopDomainAuditRequired", null);
            fail("requesterror not thrown by deleteTopLevelDomain.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "TopDomainAuditRequired", zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteSubDomain() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DelSubDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("DelSubDom2", "DelSubDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubDom1", zmsTestInitializer.getAuditRef(), dom2);

        Domain resDom1 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubDom1.DelSubDom2");
        assertNotNull(resDom1);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubDom1", "DelSubDom2", zmsTestInitializer.getAuditRef());

        // we should get a forbidden exception since the domain
        // no longer exists

        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubDom1.DelSubDom2");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteSubDomainChildExist() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DelSubChildDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("DelSubDom2", "DelSubChildDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubChildDom1", zmsTestInitializer.getAuditRef(), dom2);

        SubDomain dom3 = zmsTestInitializer.createSubDomainObject("DelSubDom3", "DelSubChildDom1.DelSubDom2",
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubChildDom1.DelSubDom2", zmsTestInitializer.getAuditRef(), dom3);

        // we can't delete Dom2 since Dom3 still exists

        try {
            zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubChildDom1", "DelSubDom2", zmsTestInitializer.getAuditRef());
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubChildDom1.DelSubDom2", "DelSubDom3", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubChildDom1", "DelSubDom2", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DelSubChildDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteSubDomainNonExistant() {
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                "ExistantTopDomain", null, null, zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);
        try {
            zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ExistantTopDomain", "NonExistantSubDomain", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ExistantTopDomain", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteSubDomainSubAndTopNonExistant() {
        try {
            zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "NonExistantTopDomain", "NonExistantSubDomain", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testDeleteSubDomainMissingAuditRef() {
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                "ExistantTopDomain2", null, null, zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        SubDomain subDom = zmsTestInitializer.createSubDomainObject(
                "ExistantSubDom2", "ExistantTopDomain2",
                null, null, zmsTestInitializer.getAdminUser());
        subDom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ExistantTopDomain2", zmsTestInitializer.getAuditRef(), subDom);

        try {
            zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ExistantTopDomain2", "ExistantSubDom2", null);
            fail("requesterror not thrown by deleteSubDomain.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ExistantTopDomain2", "ExistantSubDom2", zmsTestInitializer.getAuditRef());
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ExistantTopDomain2", zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutDomainMetaThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domName = "wrongDomainName";
        DomainMeta meta = new DomainMeta();
        meta.setYpmId(ZMSTestInitializer.getRandomProductId());
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domName, zmsTestInitializer.getAuditRef(), meta);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(404, e.getCode());
        }
    }

    @Test
    public void testPutDomainMeta() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MetaDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        Domain resDom1 = zmsImpl.getDomain(ctx, "MetaDom1");
        assertNotNull(resDom1);
        assertEquals(resDom1.getDescription(), "Test Domain1");
        assertEquals(resDom1.getOrg(), "testorg");
        assertTrue(resDom1.getEnabled());
        assertFalse(resDom1.getAuditEnabled());
        assertNull(resDom1.getServiceCertExpiryMins());
        assertNull(resDom1.getRoleCertExpiryMins());
        assertNull(resDom1.getMemberExpiryDays());
        assertNull(resDom1.getServiceExpiryDays());
        assertNull(resDom1.getGroupExpiryDays());
        assertNull(resDom1.getTokenExpiryMins());
        assertNull(resDom1.getMemberPurgeExpiryDays());

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Test2 Domain", "NewOrg",
                true, true, "12345", 1001);
        meta.setCertDnsDomain("YAHOO.cloud");
        meta.setServiceCertExpiryMins(100);
        meta.setRoleCertExpiryMins(200);
        meta.setMemberPurgeExpiryDays(90);
        meta.setSignAlgorithm("ec");
        zmsImpl.putDomainMeta(ctx, "MetaDom1", auditRef, meta);
        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "auditenabled", auditRef, meta);
        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "account", auditRef, meta);
        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "certdnsdomain", auditRef, meta);

        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsImpl, ctx.principal().getFullName(),
                "metadom1", "productid", "org", "certdnsdomain");
        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "org", auditRef, meta);
        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "productid", auditRef, meta);

        Domain resDom3 = zmsImpl.getDomain(ctx, "MetaDom1");
        assertNotNull(resDom3);
        assertEquals(resDom3.getDescription(), "Test2 Domain");
        assertEquals(resDom3.getOrg(), "neworg");
        assertTrue(resDom3.getEnabled());
        assertTrue(resDom3.getAuditEnabled());
        assertEquals(resDom3.getAccount(), "12345");
        assertEquals(Integer.valueOf(1001), resDom3.getYpmId());
        assertEquals(resDom3.getCertDnsDomain(), "yahoo.cloud");
        assertEquals(resDom3.getServiceCertExpiryMins(), Integer.valueOf(100));
        assertEquals(resDom3.getMemberPurgeExpiryDays(), Integer.valueOf(90));
        assertEquals(resDom3.getRoleCertExpiryMins(), Integer.valueOf(200));
        assertNull(resDom3.getMemberExpiryDays());
        assertNull(resDom3.getServiceExpiryDays());
        assertNull(resDom3.getGroupExpiryDays());
        assertNull(resDom3.getTokenExpiryMins());
        assertEquals(resDom3.getSignAlgorithm(), "ec");

        // put the meta data using same product id

        meta = zmsTestInitializer.createDomainMetaObject("just a new desc", "organs",
                true, true, "12345", 1001);
        meta.setMemberExpiryDays(300);
        meta.setServiceExpiryDays(350);
        meta.setGroupExpiryDays(375);
        meta.setTokenExpiryMins(400);
        zmsImpl.putDomainMeta(ctx, "MetaDom1", auditRef, meta);

        resDom3 = zmsImpl.getDomain(ctx, "MetaDom1");
        assertNotNull(resDom3);
        assertEquals(resDom3.getDescription(), "just a new desc");
        //org is system attr. so it won't be changed by putdomainmeta call
        assertEquals(resDom3.getOrg(), "neworg");
        assertTrue(resDom3.getEnabled());
        assertTrue(resDom3.getAuditEnabled());
        assertEquals(resDom3.getAccount(), "12345");
        assertEquals(Integer.valueOf(1001), resDom3.getYpmId());
        assertEquals(resDom3.getServiceCertExpiryMins(), Integer.valueOf(100));
        assertEquals(resDom3.getRoleCertExpiryMins(), Integer.valueOf(200));
        assertEquals(resDom3.getMemberExpiryDays(), Integer.valueOf(300));
        assertEquals(resDom3.getServiceExpiryDays(), Integer.valueOf(350));
        assertEquals(resDom3.getGroupExpiryDays(), Integer.valueOf(375));
        assertEquals(resDom3.getTokenExpiryMins(), Integer.valueOf(400));
        assertEquals(resDom3.getMemberPurgeExpiryDays(), Integer.valueOf(90));

        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "org", auditRef, meta);
        resDom3 = zmsImpl.getDomain(ctx, "MetaDom1");
        assertNotNull(resDom3);
        assertEquals(resDom3.getOrg(), "organs");

        // put the meta data using new product
        meta = zmsTestInitializer.createDomainMetaObject("just a new desc", "organs",
                true, true, "12345", 1001);
        Integer newProductId = ZMSTestInitializer.getRandomProductId();
        meta.setYpmId(newProductId);
        meta.setServiceCertExpiryMins(5);
        meta.setRoleCertExpiryMins(0);
        meta.setMemberExpiryDays(15);
        meta.setServiceExpiryDays(17);
        meta.setGroupExpiryDays(18);
        meta.setTokenExpiryMins(20);
        meta.setMemberPurgeExpiryDays(120);
        meta.setSignAlgorithm("rsa");
        zmsImpl.putDomainMeta(ctx, "MetaDom1", auditRef, meta);
        zmsImpl.putDomainSystemMeta(ctx, "MetaDom1", "productid", auditRef, meta);

        resDom3 = zmsImpl.getDomain(ctx, "MetaDom1");
        assertNotNull(resDom3);
        assertEquals(resDom3.getDescription(), "just a new desc");
        assertEquals(resDom3.getOrg(), "organs");
        assertTrue(resDom3.getEnabled());
        assertTrue(resDom3.getAuditEnabled());
        assertEquals(resDom3.getAccount(), "12345");
        assertEquals(newProductId, resDom3.getYpmId());
        assertEquals(resDom3.getServiceCertExpiryMins(), Integer.valueOf(5));
        assertNull(resDom3.getRoleCertExpiryMins());
        assertEquals(resDom3.getMemberExpiryDays(), Integer.valueOf(15));
        assertEquals(resDom3.getServiceExpiryDays(), Integer.valueOf(17));
        assertEquals(resDom3.getGroupExpiryDays(), Integer.valueOf(18));
        assertEquals(resDom3.getTokenExpiryMins(), Integer.valueOf(20));
        assertEquals(resDom3.getMemberPurgeExpiryDays(), Integer.valueOf(120));
        assertEquals(resDom3.getSignAlgorithm(), "rsa");

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsImpl);
        zmsImpl.deleteTopLevelDomain(ctx, "MetaDom1", auditRef);
    }

    @Test
    public void testPutDomainSystemMetaModifiedTimestamp() {

        final String domainName = "metadomainmodified";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain resDom1 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom1);
        long domMod1 = resDom1.getModified().millis();

        ZMSTestUtils.sleep(1);

        DomainMeta meta = new DomainMeta();
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "modified", zmsTestInitializer.getAuditRef(), meta);

        Domain resDom2 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom2);
        long domMod2 = resDom2.getModified().millis();

        assertTrue(domMod2 > domMod1);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainMetaInvalid() {

        // enable product id support

        System.setProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT, "true");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        final String domainName = "MetaDomProductid";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Domain resDom = zmsImpl.getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom);
        assertEquals(resDom.getDescription(), "Test Domain");
        assertEquals(resDom.getOrg(), "testorg");
        assertTrue(resDom.getEnabled());
        assertFalse(resDom.getAuditEnabled());
        Integer productId = resDom.getYpmId();

        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), domainName, "productid");
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Test2 Domain", "NewOrg",
                true, true, "12345", null);
        try {
            zmsImpl.putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "productid", zmsTestInitializer.getAuditRef(), meta);
            fail("bad request exc not thrown");
        } catch (ResourceException exc) {
            assertEquals(400, exc.getCode());
            assertTrue(exc.getMessage().contains("Unique Product Id must be specified for top level domain"));
        }

        // put meta data using another domains productId
        dom = zmsTestInitializer.createTopLevelDomainObject("MetaDomProductid2",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        resDom = zmsImpl.getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid2");
        Integer productId2 = resDom.getYpmId();
        assertNotEquals(productId, productId2);

        meta = zmsTestInitializer.createDomainMetaObject("Test3 Domain", "NewOrg",
                true, true, "12345", productId2);
        try {
            zmsImpl.putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "productid", zmsTestInitializer.getAuditRef(), meta);
            fail("bad request exc not thrown");
        } catch (ResourceException exc) {
            assertEquals(400, exc.getCode());
            assertTrue(exc.getMessage().contains("is already assigned to domain"));
        }

        // test negative values

        meta = new DomainMeta().setServiceExpiryDays(-10);
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        meta = new DomainMeta().setGroupExpiryDays(-10);
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        meta = new DomainMeta().setMemberExpiryDays(-10);
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        meta = new DomainMeta().setRoleCertExpiryMins(-10);
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        meta = new DomainMeta().setServiceCertExpiryMins(-10);
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        meta = new DomainMeta().setTokenExpiryMins(-10);
        try {
            zmsImpl.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid2", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testPutDomainMetaDefaults() {

        final String domainName = "meta-dom-values";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, null, null, zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain resDom1 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom1);
        assertNull(resDom1.getDescription());
        assertNull(resDom1.getOrg());
        assertTrue(resDom1.getEnabled());
        assertFalse(resDom1.getAuditEnabled());

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Test2 Domain", "NewOrg", true, false, null, 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);

        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "org", zmsTestInitializer.getAuditRef(), meta);

        Domain resDom3 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom3);
        assertEquals(resDom3.getDescription(), "Test2 Domain");
        assertEquals(resDom3.getOrg(), "neworg");
        assertTrue(resDom3.getEnabled());
        assertFalse(resDom3.getAuditEnabled());
        assertNull(resDom3.getAccount());
        assertNull(resDom3.getAzureSubscription());
        assertNull(resDom3.getBusinessService());
        assertEquals(Integer.valueOf(0), resDom3.getYpmId());

        meta.setAccount("aws");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "account", zmsTestInitializer.getAuditRef(), meta);
        resDom3 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom3);
        assertEquals(resDom3.getOrg(), "neworg");
        assertEquals(resDom3.getAccount(), "aws");
        assertNull(resDom3.getAzureSubscription());
        assertNull(resDom3.getBusinessService());

        meta.setAzureSubscription("azure");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "azuresubscription", zmsTestInitializer.getAuditRef(), meta);
        resDom3 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom3);
        assertEquals(resDom3.getOrg(), "neworg");
        assertEquals(resDom3.getAccount(), "aws");
        assertEquals(resDom3.getAzureSubscription(), "azure");
        assertNull(resDom3.getBusinessService());

        meta.setBusinessService("123:business service");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "businessservice", zmsTestInitializer.getAuditRef(), meta);
        resDom3 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(resDom3);
        assertEquals(resDom3.getOrg(), "neworg");
        assertEquals(resDom3.getAccount(), "aws");
        assertEquals(resDom3.getAzureSubscription(), "azure");
        assertEquals(resDom3.getBusinessService(), "123:business service");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainMetaMissingAuditRef() {
        String domain = "testSetDomainMetaMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test1 Domain", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Domain resDom = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain);
        assertNotNull(resDom);
        assertEquals(resDom.getDescription(), "Test1 Domain");
        assertEquals(resDom.getOrg(), "testorg");
        assertTrue(resDom.getAuditEnabled());

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Test2 Domain", "NewOrg", false, true, null, 0);
        try {
            zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domain, null, meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutDomainMetaSubDomain() {
        try {
            TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject("MetaDomProductid",
                    "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);
        } catch (ResourceException rexc) {
            assertEquals(400, rexc.getCode());
        }

        SubDomain subDom = zmsTestInitializer.createSubDomainObject("metaSubDom", "MetaDomProductid",
                "sub Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid", zmsTestInitializer.getAuditRef(), subDom);

        // put meta data with null productId
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Test sub Domain", "NewOrg",
                true, true, "12345", null);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom", zmsTestInitializer.getAuditRef(), meta);

        // put meta data with a productId
        meta = zmsTestInitializer.createDomainMetaObject("Test sub Domain", "NewOrg",
                true, true, "12345", ZMSTestInitializer.getRandomProductId());
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom", zmsTestInitializer.getAuditRef(), meta);

        // set the expiry days to 30

        meta.setMemberExpiryDays(30);
        meta.setServiceExpiryDays(25);
        meta.setGroupExpiryDays(35);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom", zmsTestInitializer.getAuditRef(), meta);
        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom");
        assertEquals(domain.getMemberExpiryDays(), Integer.valueOf(30));
        assertEquals(domain.getServiceExpiryDays(), Integer.valueOf(25));
        assertEquals(domain.getGroupExpiryDays(), Integer.valueOf(35));

        // if value is null we're not going to change it

        meta.setMemberExpiryDays(null);
        meta.setServiceExpiryDays(null);
        meta.setGroupExpiryDays(null);
        meta.setDescription("test1");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom", zmsTestInitializer.getAuditRef(), meta);
        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom");
        assertEquals(domain.getMemberExpiryDays(), Integer.valueOf(30));
        assertEquals(domain.getServiceExpiryDays(), Integer.valueOf(25));
        assertEquals(domain.getGroupExpiryDays(), Integer.valueOf(35));
        assertEquals(domain.getDescription(), "test1");

        // setting is to 0

        meta.setMemberExpiryDays(0);
        meta.setServiceExpiryDays(0);
        meta.setGroupExpiryDays(0);
        meta.setDescription("test2");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom", zmsTestInitializer.getAuditRef(), meta);
        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid.metaSubDom");
        assertNull(domain.getMemberExpiryDays());
        assertNull(domain.getServiceExpiryDays());
        assertNull(domain.getGroupExpiryDays());
        assertEquals(domain.getDescription(), "test2");

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid", "metaSubDom", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MetaDomProductid", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleList() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("RoleListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("RoleListDom1", "Role1", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("RoleListDom1", "Role2", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        RoleList roleList = zmsTestInitializer.getZms().getRoleList(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListDom1", null, null);
        assertNotNull(roleList);

        assertTrue(roleList.getNames().contains("Role1".toLowerCase()));
        assertTrue(roleList.getNames().contains("Role2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleListParams() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("RoleListParamDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("RoleListParamDom1", "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListParamDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("RoleListParamDom1", "Role2", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListParamDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        RoleList roleList = zmsTestInitializer.getZms().getRoleList(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListParamDom1", null, "role1");
        assertNotNull(roleList);

        assertFalse(roleList.getNames().contains("role1"));
        assertTrue(roleList.getNames().contains("role2"));

        // only one role at a time

        roleList = zmsTestInitializer.getZms().getRoleList(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListParamDom1", 1, null);
        assertNotNull(roleList);
        assertEquals(roleList.getNames().size(), 1);
        assertEquals(roleList.getNames().get(0), "admin");
        assertEquals(roleList.getNext(), "admin");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "RoleListParamDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleListThrowException() {
        try {
            zmsTestInitializer.getZms().getRoleList(zmsTestInitializer.getMockDomRsrcCtx(), "wrongDomainName", null, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testGetRole() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("GetRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("GetRoleDom1", "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "GetRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "GetRoleDom1", "Role1", false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), "GetRoleDom1:role.Role1".toLowerCase());
        assertNull(role.getTrust());
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "GetRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleWithAttributes() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("GetRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("GetRoleDom1", "Role1", null,
                "user.joe", "user.jane");
        role1.setMemberExpiryDays(30);
        role1.setServiceExpiryDays(35);
        role1.setGroupExpiryDays(40);
        role1.setSelfServe(true);
        role1.setMemberReviewDays(70);
        role1.setServiceReviewDays(80);
        role1.setGroupReviewDays(90);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "GetRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "GetRoleDom1", "Role1", false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), "GetRoleDom1:role.Role1".toLowerCase());
        assertNull(role.getTrust());
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkRoleMember(checkList, members);

        assertEquals(role.getMemberExpiryDays(), Integer.valueOf(30));
        assertEquals(role.getServiceExpiryDays(), Integer.valueOf(35));
        assertEquals(role.getGroupExpiryDays(), Integer.valueOf(40));
        assertEquals(role.getMemberReviewDays(), Integer.valueOf(70));
        assertEquals(role.getServiceReviewDays(), Integer.valueOf(80));
        assertEquals(role.getGroupReviewDays(), Integer.valueOf(90));
        assertTrue(role.getSelfServe());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "GetRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleThrowException() {
        String domainName = "MbrGetRoleDom1";
        String roleName = "Role1";

        // Tests the getRole() condition: if (domain == null)...
        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Tests the getRole() condition: if (collection == null)...
        try {
            // Should fail because we did not create a role resource.
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        // Tests the getRole() condition: if (role == null)...
        String wrongRoleName = "Role2";
        try {
            Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null);
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

            // Should fail because we are trying to find a non-existent role.
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, wrongRoleName, false, false, false);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domainName = "DomainName1";
        String roleName = "RoleName1";
        Role role = new Role();

        // Tests the getRole() condition : if (!roleResourceName(domainName, roleName).equals(role.getName()))...
        try {
            String roleRoleName = "inconsistentRoleName1";
            role.setName(roleRoleName);

            // The role naming is inconsistent.
            zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the getRole() condition : if (domain == null)...
        try {
            String roleRoleName = "DomainName1:role.RoleName1";
            role.setName(roleRoleName);

            // We never created a domain for this role.
            zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testCreateRole() {

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("CreateRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putrole");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("CreateRoleDom1", "Role1", null,
                "user.joe", "user.jane");
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role3 = zmsImpl.getRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleDom1", "Role1", false, false, false);
        assertNotNull(role3);
        assertEquals(role3.getName(), "CreateRoleDom1:role.Role1".toLowerCase());
        assertNull(role3.getTrust());

        // check audit log msg for putRole
        boolean foundError = false;
        System.err.println("testCreateRole: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putrole)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"name\": \"role1\", \"trust\": \"null\", \"added-members\": [");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // delete member of the role
        //
        List<RoleMember> listrm = role1.getRoleMembers();
        for (RoleMember rmemb: listrm) {
            if (rmemb.getMemberName().equals("user.jane")) {
                listrm.remove(rmemb);
                break;
            }
        }

        aLogMsgs.clear();
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        foundError = false;
        System.err.println("testCreateRole: Now Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putrole)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"name\": \"role1\", \"trust\": \"null\", \"deleted-members\": [{\"member\": \"user.jane\", \"approved\": true, \"system-disabled\": 0}], \"added-members\": []");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // create a role with no members

        Role role4 = zmsTestInitializer.createRoleObject("CreateRoleDom1", "Role4", null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleDom1", "Role4", zmsTestInitializer.getAuditRef(), false, role4);

        Role role4Res = zmsImpl.getRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleDom1", "Role4", false, false, false);
        assertNotNull(role4Res);
        assertTrue(role4Res.getRoleMembers().isEmpty());

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleLocalNameOnly() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("CreateRoleLocalNameOnly",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = new Role();
        role1.setName("role1");
        role1.setMemberExpiryDays(30);
        role1.setServiceExpiryDays(45);
        role1.setGroupExpiryDays(50);
        role1.setMemberReviewDays(70);
        role1.setServiceReviewDays(80);
        role1.setGroupReviewDays(90);

        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleLocalNameOnly", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role3 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleLocalNameOnly", "Role1", false, false, false);
        assertNotNull(role3);
        assertEquals(role3.getName(), "CreateRoleLocalNameOnly:role.Role1".toLowerCase());
        assertEquals(role3.getMemberExpiryDays(), Integer.valueOf(30));
        assertEquals(role3.getServiceExpiryDays(), Integer.valueOf(45));
        assertEquals(role3.getGroupExpiryDays(), Integer.valueOf(50));
        assertEquals(role3.getMemberReviewDays(), Integer.valueOf(70));
        assertEquals(role3.getServiceReviewDays(), Integer.valueOf(80));
        assertEquals(role3.getGroupReviewDays(), Integer.valueOf(90));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleLocalNameOnly", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleMissingAuditRef() {
        String domain = "testCreateRoleMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Role role = zmsTestInitializer.createRoleObject(
                domain, "Role1", null, "user.joe", "user.jane");
        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Role1", null, false, role);
            fail("requesterror not thrown by putRole.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testCreateRoleMismatchName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "CreateMismatchRoleDom1", "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("CreateMismatchRoleDom1", "Role1", null,
                "user.joe", "user.jane");

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateMismatchRoleDom1",
                    "CreateMismatchRoleDom1.Role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "CreateMismatchRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleInvalidName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "CreateRoleInvalidNameDom1", "Test Domain1", "testOrg",
                zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = new Role();
        role1.setName("Role1");

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleInvalidNameDom1", "Role111", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"CreateRoleInvalidNameDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleInvalidStruct() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "CreateRoleInvalidStructDom1", "Test Domain1", "testOrg",
                zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = new Role();

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateRoleInvalidStructDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"CreateRoleInvalidStructDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleInvalidMembers() {

        final String domainName = "create-role-invalid-members";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null, "user.joe", "jane");

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "Role2", null, "joe", "user.jane");

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        // invalid group member

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "Role3", null, "user.jane", domainName + ":group.dev-team");

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role3", zmsTestInitializer.getAuditRef(), false, role3);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleBothMemberAndTrust() {

        String domainName = "rolebothmemberandtrust";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", "sys.auth",
                "user.joe", "user.jane");

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateRoleTrustItself() {

        String domainName = "roletrustitself";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", domainName,
                null, null);

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateDuplicateMemberRole() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("CreateDuplicateMemberRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("CreateDuplicateMemberRoleDom1", "Role1", null,
                "user.joe", "user.joe");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateDuplicateMemberRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateDuplicateMemberRoleDom1", "Role1", false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), "CreateDuplicateMemberRoleDom1:role.Role1".toLowerCase());
        assertNull(role.getTrust());
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals("user.joe", members.get(0).getMemberName());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"CreateDuplicateMemberRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedUserMemberRole() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("CreateNormalizedUserMemberRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ArrayList<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.jane"));

        Role role1 = zmsTestInitializer.createRoleObject("CreateNormalizedUserMemberRoleDom1", "Role1",
                null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateNormalizedUserMemberRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateNormalizedUserMemberRoleDom1", "Role1", false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), "CreateNormalizedUserMemberRoleDom1:role.Role1".toLowerCase());
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"CreateNormalizedUserMemberRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedServiceMemberRole() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("CreateNormalizedServiceMemberRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        SubDomain subDom3 = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), subDom3);

        SubDomain subDom4 = zmsTestInitializer.createSubDomainObject("dom1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), subDom4);

        ArrayList<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("coretech.storage"));
        roleMembers.add(new RoleMember().setMemberName("coretech.storage"));
        roleMembers.add(new RoleMember().setMemberName("user.user1.dom1.api"));

        Role role1 = zmsTestInitializer.createRoleObject("CreateNormalizedServiceMemberRoleDom1", "Role1",
                null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateNormalizedServiceMemberRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "CreateNormalizedServiceMemberRoleDom1", "Role1", false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), "CreateNormalizedServiceMemberRoleDom1:role.Role1".toLowerCase());
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("coretech.storage");
        checkList.add("user.user1.dom1.api");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "dom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"CreateNormalizedServiceMemberRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedGroupMemberRole() {

        final String domainName = "group-member-role";
        final String roleName = "role1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject("coretech", "dev-team", "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "dev-team", zmsTestInitializer.getAuditRef(), false, group2);

        ArrayList<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName(domainName + ":group.group1"));
        roleMembers.add(new RoleMember().setMemberName("coretech:group.dev-team"));

        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), ResourceUtils.roleResourceName(domainName, roleName));
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add(domainName + ":group.group1");
        checkList.add("coretech:group.dev-team");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedCombinedMemberRole() {

        final String domainName = "normalized-combined-member-role";
        final String roleName = "role1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        SubDomain subDom3 = zmsTestInitializer.createSubDomainObject("user1", "user", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), subDom3);

        SubDomain subDom4 = zmsTestInitializer.createSubDomainObject("dom1", "user.user1", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), subDom4);

        Group group1 = zmsTestInitializer.createGroupObject("coretech.storage", "dev-team", "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), "coretech.storage", "dev-team", zmsTestInitializer.getAuditRef(), false, group1);

        ArrayList<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.jane"));
        roleMembers.add(new RoleMember().setMemberName("coretech.storage"));
        roleMembers.add(new RoleMember().setMemberName("coretech.storage"));
        roleMembers.add(new RoleMember().setMemberName("user.user1.dom1.api"));
        roleMembers.add(new RoleMember().setMemberName("coretech.storage:group.dev-team"));

        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
        assertNotNull(role);

        assertEquals(role.getName(), ResourceUtils.roleResourceName(domainName, roleName));
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 5);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("coretech.storage");
        checkList.add("user.user1.dom1.api");
        checkList.add("coretech.storage:group.dev-team");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "dom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteRole() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DelRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("DelRoleDom1", "Role1", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "DelRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("DelRoleDom1", "Role2", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "DelRoleDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        RoleList roleList = zmsTestInitializer.getZms().getRoleList(zmsTestInitializer.getMockDomRsrcCtx(), "DelRoleDom1", null, null);
        assertNotNull(roleList);

        // our role count is +1 because of the admin role
        assertEquals(roleList.getNames().size(), 3);

        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(),"DelRoleDom1", "Role1", zmsTestInitializer.getAuditRef());

        roleList = zmsTestInitializer.getZms().getRoleList(zmsTestInitializer.getMockDomRsrcCtx(), "DelRoleDom1", null, null);
        assertNotNull(roleList);

        // our role count is +1 because of the admin role
        assertEquals(roleList.getNames().size(), 2);

        assertFalse(roleList.getNames().contains("Role1".toLowerCase()));
        assertTrue(roleList.getNames().contains("Role2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"DelRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteRoleMissingAuditRef() {
        String domain = "testDeleteRoleMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Role role = zmsTestInitializer.createRoleObject(
                domain, "Role1", null, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Role1", zmsTestInitializer.getAuditRef(), false, role);

        try {
            zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Role1", null);
            fail("requesterror not thrown by deleteRole.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteRoleThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domainName = "DomainName1";
        String roleName = "RoleName1";
        try {
            zmsImpl.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(),domainName, roleName, zmsTestInitializer.getAuditRef());
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testDeleteAdminRole() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DelAdminRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        try {
            zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(),"DelAdminRoleDom1", "admin", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"DelAdminRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteRoleAssociatedToPolicy() {

        String domain = "testDeleteRoleAssociatedToPolicy";
        String role = "associatedRole";
        String policy = "policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domain,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        Role relatedRole = zmsTestInitializer.createRoleObject(domain, role, null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, role, zmsTestInitializer.getAuditRef(), false, relatedRole);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domain, policy, role,
                "update_members", domain + ":role." + role, AssertionEffect.ALLOW);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, policy, zmsTestInitializer.getAuditRef(), false, policy1);

        try {
            zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, role, zmsTestInitializer.getAuditRef());
            fail("should be fail");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("it cannot be deleted"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testValidateRoleNotAssociatedToPolicy() {

        final String relatedRole = "role1";
        final String domainName = "dom1";
        final String caller = "testValidateRoleNotAssociatedToPolicy";

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1", relatedRole, "", "", AssertionEffect.ALLOW );
        List<Policy> policies = Collections.singletonList(policy);

        try {
            zmsTestInitializer.getZms().validateRoleNotAssociatedToPolicy(policies, relatedRole, domainName, caller);
            fail("should be fail");
        } catch (ResourceException ex){
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("it cannot be deleted"));
        }

        // we're going to retry our first example with feature turned off
        // save our existing value so we can restore after the test

        DynamicConfigBoolean currentValue = zmsTestInitializer.getZms().validatePolicyAssertionRoles;
        zmsTestInitializer.getZms().validatePolicyAssertionRoles = new DynamicConfigBoolean(false);

        zmsTestInitializer.getZms().validateRoleNotAssociatedToPolicy(policies, relatedRole, domainName, caller);

        zmsTestInitializer.getZms().validatePolicyAssertionRoles = currentValue;

        // make sure some non-existent role is passed as ok

        zmsTestInitializer.getZms().validateRoleNotAssociatedToPolicy(policies, "not_related_role", domainName, caller);

        // policy with no assertions should be supported as ok

        policy = new Policy().setName(ResourceUtils.policyResourceName(domainName, "policy1"));
        policies = Collections.singletonList(policy);
        zmsTestInitializer.getZms().validateRoleNotAssociatedToPolicy(policies, relatedRole, domainName, caller);
    }

    @Test
    public void testValidateRoleAssociatedIsExist(){
        String caller = "testValidateRoleAssociatedIsExist";
        String domainName = "dom1";
        String existRole = "role1";
        String doesNotExistRole = "role2";
        Set<String> roleNames = new HashSet<String>(){
            {
                add("admin");
                add(existRole);
            }
        };

        zmsTestInitializer.getZms().validateRoleAssociatedIsExist(roleNames, ResourceUtils.roleResourceName(domainName, existRole), domainName, caller);
        try {
            zmsTestInitializer.getZms().validateRoleAssociatedIsExist(roleNames, ResourceUtils.roleResourceName(domainName, doesNotExistRole), "policy1", caller);
            fail("should be fail");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("that associated to an assertion"));
        }

        // wild card case

        String wildCard = ResourceUtils.roleResourceName(domainName, "Role*".toLowerCase());

        try {
            zmsTestInitializer.getZms().validateRoleAssociatedIsExist(roleNames, ResourceUtils.roleResourceName(domainName, wildCard), domainName, caller);
            fail("should be fail");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("that associated to an assertion"));
        }

    }

    @Test
    public void testGetOverdueReview() {
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("test-domain1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        long currentTimeMillis = System.currentTimeMillis();
        Timestamp oldTimestamp = Timestamp.fromMillis(currentTimeMillis - 60000);
        Timestamp futureTimestamp = Timestamp.fromMillis(currentTimeMillis + 60000);

        List<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.overduereview1").setReviewReminder(oldTimestamp));
        roleMembers.add(new RoleMember().setMemberName("user.overduereview2").setReviewReminder(oldTimestamp));
        roleMembers.add(new RoleMember().setMemberName("user.futurereview1").setReviewReminder(futureTimestamp));
        roleMembers.add(new RoleMember().setMemberName("user.noreview1"));

        Role role1 = zmsTestInitializer.createRoleObject("test-domain1", "Role1",
                null, roleMembers);

        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "test-domain1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        DomainRoleMembers responseMembers = zmsTestInitializer.getZms().getOverdueReview(zmsTestInitializer.getMockDomRsrcCtx(), "test-domain1");
        assertEquals("test-domain1", responseMembers.getDomainName());
        List<DomainRoleMember> responseRoleMemberList = responseMembers.getMembers();
        assertEquals(responseRoleMemberList.size(), 2);
        assertEquals(responseRoleMemberList.get(0).getMemberName(), "user.overduereview1");
        assertEquals(responseRoleMemberList.get(1).getMemberName(), "user.overduereview2");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"test-domain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetOverdueReviewThrowException() {

        final String domainName = "test-domain1";

        // Tests the getOverdueReview() condition : if (domain == null)...
        try {
            // Should fail because we never created this domain.
            zmsTestInitializer.getZms().getOverdueReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testGetPrincipalRoles() {
        createDomain("domain1");
        createDomain("domain2");
        createDomain("domain3");

        String principal = "user.johndoe";

        insertRecordsForGetPrincipalRolesTest(principal);
        DomainRoleMember domainRoleMember = zmsTestInitializer.getZms().getPrincipalRoles(zmsTestInitializer.getMockDomRsrcCtx(), principal, null);
        verifyGetPrincipalRoles(principal, domainRoleMember, true);
        domainRoleMember = zmsTestInitializer.getZms().getPrincipalRoles(zmsTestInitializer.getMockDomRsrcCtx(), principal, "domain1");
        verifyGetPrincipalRoles(principal, domainRoleMember, false);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"domain1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"domain2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"domain3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPrincipalRolesCurrentPrincipal() {
        createDomain("domain1");
        createDomain("domain2");
        createDomain("domain3");

        String principalName = "user.johndoe";

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=johndoe";
        Principal principal = SimplePrincipal.create("user", "johndoe", unsignedCreds + ";s=signature",
                0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);

        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        insertRecordsForGetPrincipalRolesTest(principalName);
        DomainRoleMember domainRoleMember = zmsTestInitializer.getZms().getPrincipalRoles(rsrcCtx1, null, null); // we'll don't pass a principal. Current user will be used
        verifyGetPrincipalRoles(principalName, domainRoleMember, true);
        domainRoleMember = zmsTestInitializer.getZms().getPrincipalRoles(rsrcCtx1, null, "domain1"); // we'll don't pass a principal. Current user will be used
        verifyGetPrincipalRoles(principalName, domainRoleMember, false);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"domain1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"domain2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"domain3", zmsTestInitializer.getAuditRef());
    }

    private void verifyGetPrincipalRoles(String principal, DomainRoleMember domainRoleMember, boolean isAllDomains) {
        MemberRole memberRole0 = new MemberRole();
        memberRole0.setDomainName("domain1");
        memberRole0.setRoleName("role1");

        MemberRole memberRole1 = new MemberRole();
        memberRole1.setDomainName("domain1");
        memberRole1.setRoleName("role2");

        MemberRole memberRole2 = new MemberRole();
        memberRole2.setDomainName("domain3");
        memberRole2.setRoleName("role1");

        assertEquals(domainRoleMember.getMemberName(), principal);
        assertTrue(ZMSTestUtils.verifyDomainRoleMember(domainRoleMember, memberRole0));
        assertTrue(ZMSTestUtils.verifyDomainRoleMember(domainRoleMember, memberRole1));
        if (isAllDomains) {
            assertEquals(domainRoleMember.getMemberRoles().size(), 3);
            assertTrue(ZMSTestUtils.verifyDomainRoleMember(domainRoleMember, memberRole2));
        } else {
            assertEquals(domainRoleMember.getMemberRoles().size(), 2);
        }
    }

    private void insertRecordsForGetPrincipalRolesTest(String principal) {
        List<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.test1"));
        roleMembers.add(new RoleMember().setMemberName("user.test2"));
        roleMembers.add(new RoleMember().setMemberName(principal));

        // Create role1 in domain1 with members and principal
        Role role = zmsTestInitializer.createRoleObject("domain1", "Role1", null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "domain1", "Role1", zmsTestInitializer.getAuditRef(), false, role);

        // Create role2 in domain1 with members and principal
        role = zmsTestInitializer.createRoleObject("domain1", "role2", null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "domain1", "Role2", zmsTestInitializer.getAuditRef(), false, role);

        roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.test1"));
        roleMembers.add(new RoleMember().setMemberName("user.test2"));

        // Create role1 in domain2 with members but without the principal
        role = zmsTestInitializer.createRoleObject("domain2", "role1", null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "domain2", "Role1", zmsTestInitializer.getAuditRef(), false, role);

        roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName(principal));

        // Create role1 in domain3 only principal
        role = zmsTestInitializer.createRoleObject("domain3", "role1", null, roleMembers);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "domain3", "Role1", zmsTestInitializer.getAuditRef(), false, role);
    }

    private void createDomain(String domainName) {
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test " + domainName, "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);
    }

    @Test
    public void testGetMembership() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrGetRoleDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("MbrGetRoleDom1", "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrGetRoleDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Membership member1 = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrGetRoleDom1", "Role1",
                "user.joe", null);
        assertNotNull(member1);
        assertEquals(member1.getMemberName(), "user.joe");
        assertEquals(member1.getRoleName(), "MbrGetRoleDom1:role.Role1".toLowerCase());
        assertTrue(member1.getIsMember());

        Membership member2 = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrGetRoleDom1", "Role1",
                "user.doe", null);
        assertNotNull(member2);
        assertEquals(member2.getMemberName(), "user.doe");
        assertEquals(member2.getRoleName(), "MbrGetRoleDom1:role.Role1".toLowerCase());
        assertFalse(member2.getIsMember());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"MbrGetRoleDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetMembershipThrowException() {
        String domainName = "MbrGetRoleDom1";
        String roleName = "Role1";
        String memberName1 = "user.john";
        String memberName2 = "user.jane";

        // Tests the getMembership() condition : if (domain == null)...
        try {
            // Should fail because we never created this domain.
            zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, memberName1, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Tests the getMembership() condition: if (collection == null)...
        try {
            // Should fail because we never added a role to this domain.
            zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, memberName1, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        // Tests the getMembership() condition: if (role == null)...
        try {
            String missingRoleName = "Role2";

            Role role1 = zmsTestInitializer.createRoleObject("MbrGetRoleDom1", "Role1", null,
                    memberName1, memberName2);
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

            // Trying to find a non-existent role.
            zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, missingRoleName, memberName1, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembership() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName())
                .thenReturn("posttopleveldomain").thenReturn("posttopleveldomain") // called twice in domain api
                .thenReturn("posttopleveldomain").thenReturn("posttopleveldomain") // called twice in domain api
                .thenReturn("postsubdomain").thenReturn("postsubdomain") // called twice in domain api
                .thenReturn("putrole")
                .thenReturn("putmembership");
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom1",
                "Test Domain1", "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom1", "Role1", null,
                "user.joe", "user.jane");
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.doe");
        zmsImpl.putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1", "Role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        // check audit log msg for putRole
        boolean foundError = false;
        List<String> aLogMsgs = alogger.getLogMsgList();
        System.err.println("testPutMembership: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putmembership)")) {
                continue;
            }
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("{\"member\": \"user.doe\", \"approved\": true, \"system-disabled\": 0}");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        aLogMsgs.clear();
        mbr = zmsTestInitializer.generateMembership("Role1", "coretech.storage");
        zmsImpl.putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1", "Role1", "coretech.storage", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsImpl.getRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1", "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 4);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("user.doe");
        checkList.add("coretech.storage");
        zmsTestInitializer.checkRoleMember(checkList, members);

        foundError = false;
        System.err.println("testPutMembership: now Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putmembership)")) {
                continue;
            }
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("{\"member\": \"coretech.storage\", \"approved\": true, \"system-disabled\": 0}");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // enable user validation for the test

        zmsImpl.userAuthority = new TestUserPrincipalAuthority();
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true);
        zmsImpl.validateUserRoleMembers = dynamicConfigBoolean;

        // valid users no exception

        mbr = zmsTestInitializer.generateMembership("role1", "user.joe");
        zmsImpl.putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1", "role1", "user.joe", zmsTestInitializer.getAuditRef(), false, mbr);

        // invalid user with exception

        mbr = zmsTestInitializer.generateMembership("role1", "user.john");
        try {
            zmsImpl.putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1", "role1", "user.john", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"MbrAddDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipExpiration() {

        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName())
                .thenReturn("posttopleveldomain").thenReturn("posttopleveldomain") // called twice in domain api
                .thenReturn("posttopleveldomain").thenReturn("posttopleveldomain") // called twice in domain api
                .thenReturn("postsubdomain").thenReturn("postsubdomain") // called twice in domain api
                .thenReturn("putrole")
                .thenReturn("putmembership")
                .thenReturn("deleteSubDomain")
                .thenReturn("deleteTopLevelDomain")
                .thenReturn("deleteTopLevelDomain");

        String domainName = "testPutMembershipExpiration";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("coretech - already exists"));
        }

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Timestamp expired = Timestamp.fromMillis(System.currentTimeMillis() - 100);
        Timestamp notExpired = Timestamp.fromMillis(System.currentTimeMillis()
                + TimeUnit.HOURS.toMillis(1));

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.doe", expired);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);
        Membership expiredMember = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                "Role1", "user.doe", null);

        mbr = zmsTestInitializer.generateMembership("Role1", "coretech.storage", notExpired);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", "coretech.storage", zmsTestInitializer.getAuditRef(), false, mbr);
        Membership notExpiredMember = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                "Role1", "coretech.storage", null);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 4);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("user.doe");
        checkList.add("coretech.storage");
        zmsTestInitializer.checkRoleMember(checkList, role.getRoleMembers());

        for (RoleMember roleMember: members) {
            if (roleMember.getMemberName().equalsIgnoreCase("user.doe")) {
                Timestamp actual = roleMember.getExpiration();
                assertNotNull(actual);
                assertEquals(actual, expired);
            }
            if (roleMember.getMemberName().equalsIgnoreCase("coretech.storage")) {
                Timestamp actual = roleMember.getExpiration();
                assertNotNull(actual);
                assertEquals(actual, notExpired);
            }
        }

        assertFalse(expiredMember.getIsMember());
        assertTrue(notExpiredMember.getIsMember());

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipEmptyRoleMembers() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom1EmptyRole",
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = new Role();
        role1.setName(ResourceUtils.roleResourceName("MbrAddDom1EmptyRole", "Role1"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1EmptyRole", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.doe");
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1EmptyRole", "Role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom1EmptyRole", "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);

        assertEquals("user.doe", members.get(0).getMemberName());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),"MbrAddDom1EmptyRole", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipRoleGroupMembers() {

        final String domainName = "role-group-members";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = new Role();
        role1.setName(ResourceUtils.roleResourceName(domainName, "Role1"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        // should fail since we don't have a group

        Membership mbr = zmsTestInitializer.generateMembership("Role1", domainName + ":group.dev-team");
        try {
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", domainName + ":group.dev-team", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "dev-team", "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "dev-team", zmsTestInitializer.getAuditRef(), false, group1);

        // now our put membership should work

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", domainName + ":group.dev-team", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);

        assertEquals(domainName + ":group.dev-team", members.get(0).getMemberName());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipMissingAuditRef() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domain = "testPutMembershipMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", "user.user1");
        dom.setAuditEnabled(true);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Role role = zmsTestInitializer.createRoleObject(
                domain, "Role1", null, "user.joe", "user.jane");
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Role1", zmsTestInitializer.getAuditRef(), false, role);

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.john");
        try {
            zmsImpl.putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Role1", "user.john", null, false, mbr);
            fail("requesterror not thrown by putMembership.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutMembershipNormalizedUser() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom2",
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom2", "Role1", null,
                "coretech.storage", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom2", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.doe");
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom2", "Role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom2", "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 3);

        List<String> checkList = new ArrayList<>();
        checkList.add("coretech.storage");
        checkList.add("user.jane");
        checkList.add("user.doe");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipNormalizedUseruser() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom3",
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom3", "Role1", null,
                "coretech.storage", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom3", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.doe");
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom3", "Role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom3", "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 3);

        List<String> checkList = new ArrayList<>();
        checkList.add("coretech.storage");
        checkList.add("user.jane");
        checkList.add("user.doe");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipNormalizedService() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom4",
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject("weather",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        SubDomain subDom3 = zmsTestInitializer.createSubDomainObject("storage", "weather",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "weather", zmsTestInitializer.getAuditRef(), subDom3);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom4", "Role1", null,
                "coretech.storage", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom4", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Membership mbr = zmsTestInitializer.generateMembership("Role1", "weather.storage");
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom4", "Role1", "weather.storage", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom4", "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 3);

        List<String> checkList = new ArrayList<>();
        checkList.add("coretech.storage");
        checkList.add("user.jane");
        checkList.add("weather.storage");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "weather", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom4", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipRoleNotPresent() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDomNoRole",
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDomNoRole", "Role1", null,
                "coretech.storage", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDomNoRole", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        // membership object with only member

        Membership mbr = new Membership();
        mbr.setMemberName("user.joe");

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDomNoRole", "Role1", "user.joe", zmsTestInitializer.getAuditRef(), false, mbr);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDomNoRole", "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 3);

        List<String> checkList = new ArrayList<>();
        checkList.add("coretech.storage");
        checkList.add("user.jane");
        checkList.add("user.joe");
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDomNoRole", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipInvalid() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom5",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom5", "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom5", "Role1", zmsTestInitializer.getAuditRef(), false, role1);
        try {
            Membership mbr = zmsTestInitializer.generateMembership("Role1", "coretech");
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom5", "Role1", "coretech", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom5", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipRoleMismatch() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom6",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom6", "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom6", "Role1", zmsTestInitializer.getAuditRef(), false, role1);
        try {
            Membership mbr = zmsTestInitializer.generateMembership("Role2", "user.john");
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom6", "Role1", "user.john", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom6", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipMemberMismatch() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("MbrAddDom7",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("MbrAddDom7", "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom7", "Role1", zmsTestInitializer.getAuditRef(), false, role1);
        try {
            Membership mbr = zmsTestInitializer.generateMembership("Role1", "user.john");
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom7", "Role1", "user.johnny", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "MbrAddDom7", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipThrowException() {
        String domainName = "MbrGetRoleDom1";
        String roleName = "Role1";
        String memberName1 = "user.john";
        String memberName2 = "user.jane";
        String wrongDomainName = "MbrGetRoleDom2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Tests the putMembership() condition : if (domain == null)...
        try {
            // Trying to add a wrong domain name.
            Membership mbr = zmsTestInitializer.generateMembership(roleName, memberName1);
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), wrongDomainName, roleName, memberName1, zmsTestInitializer.getAuditRef(), false, mbr);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the putMembership() condition: if (collection == null)...
        try {
            // Should fail because we never added a role resource.
            Membership mbr = zmsTestInitializer.generateMembership(roleName, memberName1);
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, memberName1, zmsTestInitializer.getAuditRef(), false, mbr);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the putMembership() condition : invalid membership object - null
        try {
            // Trying to add a wrong domain name.
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), wrongDomainName, roleName, memberName1, zmsTestInitializer.getAuditRef(), false, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the putMembership() condition : invalid membership object - missing name
        try {
            // Trying to add a wrong domain name.
            Membership mbr = new Membership();
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), wrongDomainName, roleName, memberName1, zmsTestInitializer.getAuditRef(), false, mbr);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the putMembership() condition: if (role == null)...
        try {
            String wrongRoleName = "Role2";

            Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null,
                    memberName1, memberName2);
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

            // Trying to add member to non-existent role.
            Membership mbr = zmsTestInitializer.generateMembership(wrongRoleName, memberName1);
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, wrongRoleName, memberName1, zmsTestInitializer.getAuditRef(), false, mbr);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testManageMembershipWithUpdateMembersAction() {

        final String domainName = "update-member-domain1";

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.getDateAttribute(anyString(), anyString())).thenReturn(null);
        Set<String> attrs = new HashSet<>();
        attrs.add("elevated-clearance");
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // role1 will have user.user1 through group1

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null, "user.user1", "user.user2");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1", "role1",
                "update_members", domainName + ":role.role1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        // user1 has access to add members to a role1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);

        Membership mbr = new Membership().setMemberName("user.user3");
        zmsTestInitializer.getZms().putMembership(rsrcCtx1, domainName, "role1", "user.user3", zmsTestInitializer.getAuditRef(), false, mbr);

        Membership mbrResponse = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.user3", null);
        assertNotNull(mbrResponse);
        assertTrue(mbrResponse.getIsMember());
        assertTrue(mbrResponse.getApproved());

        // now delete the member

        zmsTestInitializer.getZms().deleteMembership(rsrcCtx1, domainName, "role1", "user.user3", zmsTestInitializer.getAuditRef());
        mbrResponse = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.user3", null);
        assertNotNull(mbrResponse);
        assertFalse(mbrResponse.getIsMember());

        // a different user does not have access to a role

        Principal principal4 = principalAuthority.authenticate("v=U1;d=user;n=user4;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx4 = zmsTestInitializer.createResourceContext(principal4);
        try {
            zmsTestInitializer.getZms().putMembership(rsrcCtx4, domainName, "role1", "user.user3", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().deleteMembership(rsrcCtx4, domainName, "role1", "user.user1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        zmsTestInitializer.getZms().userAuthority = savedAuthority;

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteMembership() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        final String domainName = "mbr-del-dom";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null,
                "user.joe", "user.jane");
        zmsImpl.putRole(ctx, domainName, "Role1", auditRef, false, role1);
        zmsImpl.deleteMembership(ctx, domainName, "Role1", "user.joe", auditRef);

        Role role = zmsImpl.getRole(ctx, domainName, "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);

        boolean found = false;
        for (RoleMember member: members) {
            if (member.getMemberName().equalsIgnoreCase("user.joe")) {
                fail("delete user.joe failed");
            }
            if (member.getMemberName().equalsIgnoreCase("user.jane")) {
                found = true;
            }
        }
        if (!found) {
            fail("user.jane not found");
        }

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testDeleteMembershipSelf() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        final String domainName = "mbr-del-dom-self";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null,
                "user.joe", "user.jane");
        zmsImpl.putRole(ctx, domainName, "Role1", auditRef, false, role1);

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=joe;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);

        // now let's try to delete ourselves which should work

        zmsImpl.deleteMembership(rsrcCtx1, domainName, "Role1", "user.joe", auditRef);

        // now try to delete the other user which should be rejected

        try {
            zmsImpl.deleteMembership(rsrcCtx1, domainName, "Role1", "user.jane", auditRef);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        // now verify the results

        Role role = zmsImpl.getRole(ctx, domainName, "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals(members.get(0).getMemberName(), "user.jane");

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testDeleteMembershipMissingAuditRef() {
        final String domainName = "testDeleteMembershipMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domainName, "Test Domain1", "testOrg", "user.user1");
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Role role = zmsTestInitializer.createRoleObject(
                domainName, "Role1", null, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role);

        try {
            zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", "user.joe", null);
            fail("requesterror not thrown by deleteMembership.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteMembershipInvalidDomain() {
        String domainName = "MbrGetRoleDom1";
        String roleName = "Role1";
        String memberName1 = "user.john";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Tests the deleteMembership() condition : if (domain == null)...
        try {
            String wrongDomainName = "MbrGetRoleDom2";

            // Should fail because this domain does not exist.
            zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), wrongDomainName, roleName, memberName1, zmsTestInitializer.getAuditRef());
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteMembershipInvalidRoleCollection() {
        String domainName = "MbrGetRoleDom1";
        String roleName = "Role1";
        String memberName1 = "user.john";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Test the deleteMembership() condition: if (collection == null)...
        try {
            // Should fail b/c a role entity was never added.
            zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, memberName1, zmsTestInitializer.getAuditRef());
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteMembershipInvalidRole() {

        String domainName = "del-mbr-invalid-role";
        String roleName = "role1";
        String memberName1 = "user.john";
        String memberName2 = "user.jane";

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        // Tests the deleteMembership() condition: if (role == null)...

        try {
            Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null,
                    memberName1, memberName2);
            zmsImpl.putRole(ctx, domainName, roleName, auditRef, false, role1);

            // Should fail b/c trying to find a non-existent role.

            final String wrongRoleName = "role2";
            zmsImpl.deleteMembership(ctx, domainName, wrongRoleName, memberName1, auditRef);
            fail("notfounderror not thrown.");

        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testDeleteMembershipAdminRoleSingleMember() {

        final String domainName = "del-mbr-single-role-member";
        final String memberName1 = "user.user1";
        final String adminRoleName = "admin";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", memberName1);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // deleting the single admin should throw an exception

        try {
            zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, adminRoleName, memberName1, zmsTestInitializer.getAuditRef());
            fail("forbidden error not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 403);
        }

        // deleting another non-members should return not found exception

        try {
            zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, adminRoleName, "user.joe", zmsTestInitializer.getAuditRef());
            fail("not found error not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteMembershipNormalizedUser() {

        final String domainName = "mbr-del-norm-user";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null,
                "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);
        zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", "user.joe", zmsTestInitializer.getAuditRef());

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals(members.get(0).getMemberName(), "user.jane");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteMembershipNormalizedService() {

        final String domainName = "mbr-del-norm-svc";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null,
                "user.joe", "coretech.storage");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);
        zmsTestInitializer.getZms().deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", "coretech.storage", zmsTestInitializer.getAuditRef());

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals(members.get(0).getMemberName(), "user.joe");

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyList() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyListDom1", "Policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("PolicyListDom1", "Policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject("PolicyListDom1", "Policy3");
        policy3.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        PolicyList policyList = zmsTestInitializer.getZms().getPolicyList(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", null, null);
        assertNotNull(policyList);

        // policy count +1 due to admin policy
        assertEquals(policyList.getNames().size(), 4);

        assertTrue(policyList.getNames().contains("policy1"));
        assertTrue(policyList.getNames().contains("policy2"));
        assertTrue(policyList.getNames().contains("policy3"));

        policyList = zmsTestInitializer.getZms().getPolicyList(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", 1, null);
        assertNotNull(policyList);
        assertEquals(policyList.getNames().size(), 1);
        assertEquals(policyList.getNames().get(0), "admin");
        assertEquals(policyList.getNext(), "admin");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyVersionList() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        addRoleNeededForTest("PolicyListDom1", "Role1");
        Policy policyVer0 = zmsTestInitializer.createPolicyObject("PolicyListDom1", "PolicyName", null, true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName", zmsTestInitializer.getAuditRef(), false, policyVer0);
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName", new PolicyOptions().setVersion("version1"), zmsTestInitializer.getAuditRef(), false);
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName", new PolicyOptions().setVersion("version2"), zmsTestInitializer.getAuditRef(), false);

        policyVer0 = zmsTestInitializer.createPolicyObject("PolicyListDom1", "PolicyName2", null, true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName2", zmsTestInitializer.getAuditRef(), false, policyVer0);
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName2", new PolicyOptions().setVersion("versionOne"), zmsTestInitializer.getAuditRef(), false);
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName2", new PolicyOptions().setVersion("versionTwo"), zmsTestInitializer.getAuditRef(), false);

        PolicyList policyList = zmsTestInitializer.getZms().getPolicyVersionList(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName");
        assertNotNull(policyList);

        assertEquals(policyList.getNames().size(), 3);

        assertTrue(policyList.getNames().contains("0"));
        assertTrue(policyList.getNames().contains("version1"));
        assertTrue(policyList.getNames().contains("version2"));

        policyList = zmsTestInitializer.getZms().getPolicyVersionList(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "PolicyName2");
        assertNotNull(policyList);

        assertEquals(policyList.getNames().size(), 3);
        assertTrue(policyList.getNames().contains("0"));
        assertTrue(policyList.getNames().contains("versionone"));
        assertTrue(policyList.getNames().contains("versiontwo"));

        // assert getting version list for non-existing domain throws exception
        try {
            zmsTestInitializer.getZms().getPolicyVersionList(zmsTestInitializer.getMockDomRsrcCtx(), "UnknownDomain", "PolicyName2");
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (404): {code: 404, message: \"unknown domain - unknowndomain\"}");
        }

        // assert getting version list for non-existing policy throws exception
        try {
            zmsTestInitializer.getZms().getPolicyVersionList(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", "UnKnown");
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (404): {code: 404, message: \"unknown policy - policylistdom1:policy.unknown\"}");
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyListParams() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "PolicyListParamsDom1", "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyListParamsDom1", "Policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListParamsDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("PolicyListParamsDom1", "Policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListParamsDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        PolicyList policyList = zmsTestInitializer.getZms().getPolicyList(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListParamsDom1", null,
                "Policy1");
        assertNotNull(policyList);

        assertFalse(policyList.getNames().contains("Policy1".toLowerCase()));
        assertTrue(policyList.getNames().contains("Policy2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyListParamsDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyListThrowException() {
        try {
            zmsTestInitializer.getZms().getPolicyList(zmsTestInitializer.getMockDomRsrcCtx(), "WrongDomainName", null, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testGetPolicy() {

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyGetDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyGetDom1", "Policy1");
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1");
        assertNotNull(policy);
        assertEquals(policy.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());

        List<Assertion> assertList = policy.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 1);
        Assertion obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());

        boolean foundError = false;
        System.err.println("testGetPolicy: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"added-assertions\": [{\"role\": \"policygetdom1:role.admin\", \"action\": \"*\", \"effect\": \"ALLOW\", \"resource\": \"policygetdom1:*\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // modify the assertion: result is add of new assertion, delete of old
        //
        obj.setAction("layup");
        obj.setEffect(AssertionEffect.DENY);
        List<Assertion> assertions = new ArrayList<>();
        assertions.add(obj);
        policy1.setAssertions(assertions);
        aLogMsgs.clear();
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        foundError = false;
        System.err.println("testGetPolicy: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"added-assertions\": [{\"role\": \"policygetdom1:role.admin\", \"action\": \"layup\", \"effect\": \"DENY\", \"resource\": \"policygetdom1:*\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // this should throw an exception
        try {
            zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy2");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPolicyVersions() {

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = createPolicyWithVersions(zmsImpl, domainName, policyName);

        // Verify policy and non-active versions are as expected
        Policy policy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
        assertNotNull(policy);
        assertEquals(policy.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());
        assertEquals(policy.getVersion(), "0".toLowerCase());
        assertTrue(policy.getActive());

        Policy policyVer1 = zmsImpl.getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version1");
        assertNotNull(policyVer1);
        assertEquals(policyVer1.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());
        assertEquals(policyVer1.getVersion(), "New-Version1".toLowerCase());
        assertFalse(policyVer1.getActive());

        Policy policyVer2 = zmsImpl.getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version2");
        assertNotNull(policyVer2);
        assertEquals(policyVer2.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());
        assertEquals(policyVer2.getVersion(), "New-Version2".toLowerCase());
        assertFalse(policyVer2.getActive());

        // Verify assertions for active version
        List<Assertion> assertList = policy.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 2);
        Assertion obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());
        obj = assertList.get(1);
        assertEquals(obj.getAction(), "updatetest");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), domainName.toLowerCase() + ":resourcetest");
        assertEquals(obj.getRole(), ResourceUtils.roleResourceName(domainName.toLowerCase(), "admin"));

        // Verify assertion for New-Version1
        assertList = policyVer1.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 1);
        obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());

        // Verify assertion for New-Version2
        assertList = policyVer2.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 2);
        obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());
        obj = assertList.get(1);
        assertEquals(obj.getAction(), "updatetest");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), domainName.toLowerCase() + ":resourcetest");
        assertEquals(obj.getRole(), ResourceUtils.roleResourceName(domainName.toLowerCase(), "admin"));

        boolean foundError = false;
        System.err.println("testGetPolicyVersions: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"added-assertions\": [{\"role\": \"policygetdom1:role.admin\", \"action\": \"*\", \"effect\": \"ALLOW\", \"resource\": \"policygetdom1:*\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // modify the assertion: result is add of new assertion, delete of old
        //
        obj.setAction("layup");
        obj.setEffect(AssertionEffect.DENY);
        List<Assertion> assertions = new ArrayList<>();
        assertions.add(obj);
        policy1.setAssertions(assertions);
        aLogMsgs.clear();
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy1);

        foundError = false;
        System.err.println("testGetPolicyVersions: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"added-assertions\": [{\"role\": \"policygetdom1:role.admin\", \"action\": \"layup\", \"effect\": \"DENY\", \"resource\": \"policygetdom1:resourcetest\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // create new version, verify assertions are copied
        //
        aLogMsgs.clear();
        zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version3"), zmsTestInitializer.getAuditRef(), false);

        foundError = false;
        System.err.println("testGetPolicyVersions: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"copied-assertions\": [{\"role\": \"policygetdom1:role.admin\", \"action\": \"layup\", \"effect\": \"DENY\", \"resource\": \"policygetdom1:resourcetest\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // Verify getting unknown version throws exception
        try {
            zmsImpl.getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "unknownversion");
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains(": Policy not found: 'policygetdom1:policy.policy1' with version: unknownversion\"}"));
        }

        // Verify trying to create new version for admin policy throws an exception
        try {
            zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", new PolicyOptions().setVersion("NewVersion"), zmsTestInitializer.getAuditRef(), false);
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains(": admin policy cannot be modified\"}"));
        }

        // Verify putting policy version in read mode throws an exception
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsImpl.readOnlyMode = dynamicConfigBoolean;
        try {
            zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version4"), zmsTestInitializer.getAuditRef(), false);
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"Server in Maintenance Read-Only mode. Please try your request later\"}");
        }

        zmsImpl.readOnlyMode = dynamicConfigBoolean;
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyVersionSpecifyFrom() {
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        createPolicyWithVersions(zmsTestInitializer.getZms(), domainName, policyName);

        // First we'll set New-Version1 as the active version
        zmsTestInitializer.getZms().setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version1"), zmsTestInitializer.getAuditRef());

        // We'll verify it was set as active
        Policy newActivePolicy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
        assertEquals(newActivePolicy.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());
        assertTrue(newActivePolicy.getActive());
        assertEquals(newActivePolicy.getVersion(), "New-Version1".toLowerCase());
        List<Assertion> assertList = newActivePolicy.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 1);
        Assertion obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());

        // Now we'll create a new version based on the now disabled version "0". This will contain that version's assertions instead of the active version.
        PolicyOptions policyOptions = new PolicyOptions();
        policyOptions.setVersion("to-version");
        policyOptions.setFromVersion("0");
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, policyOptions, zmsTestInitializer.getAuditRef(), false);

        // Get the new created version, verify it is based on non-active version 0
        Policy toVersion = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "to-version");
        assertEquals(toVersion.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());
        assertFalse(toVersion.getActive());
        assertEquals(toVersion.getVersion(), "to-version");
        assertList = toVersion.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 2);
        obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());
        obj = assertList.get(1);
        assertEquals(obj.getAction(), "updatetest");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), domainName.toLowerCase() + ":resourcetest");
        assertEquals(obj.getRole(), ResourceUtils.roleResourceName(domainName.toLowerCase(), "admin"));

        // Remove assertion from the new created version and verify it was deleted
        zmsTestInitializer.getZms().deleteAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "to-version", obj.getId(), zmsTestInitializer.getAuditRef());
        toVersion = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "to-version");
        assertList = toVersion.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 1);
        obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyWithAssociatedRoleDoesNotExist() {
        String domainName = "PutPolicyDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName, "doesn't_exist_role", "", "", AssertionEffect.ALLOW);

        // try to add - should be fill

        try{
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("should be fail");
        } catch (ResourceException ex){
            assertEquals(ex.getCode(), 400);
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testSetUnknownPolicyVersionAsActive() {

        final String domainName = "domain-name-invalid-active";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        // valid policy - unknown version

        try {
            zmsTestInitializer.getZms().setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1",
                    new PolicyOptions().setVersion("unknown-version"), zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
            assertTrue(ex.getMessage().contains("unknown policy version: unknown-version"));
        }

        // unknown policy

        try {
            zmsTestInitializer.getZms().setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2",
                    new PolicyOptions().setVersion("unknown-version"), zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
            assertTrue(ex.getMessage().contains("unknown policy: policy2"));
        }

        // same policy version

        zmsTestInitializer.getZms().setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1",
                new PolicyOptions().setVersion("0"), zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionIncorrectPolicyVersion() {
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        createPolicyWithVersions(zmsTestInitializer.getZms(), domainName, policyName);

        // get policy version New-Version2 and get assertion ids
        Policy policyVersion = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version2");
        assertEquals(policyVersion.getAssertions().size(), 2);
        Long id1 = policyVersion.getAssertions().get(0).getId();
        Long id2 = policyVersion.getAssertions().get(1).getId();

        // verify that trying to delete assertion from the wrong policy version will throw error
        try {
            zmsTestInitializer.getZms().deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, id1, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"putpolicy: unable to delete assertion: " + id1 + " from policy: policy1 version: active version\"}");
        }

        // we're not allowed to modify admin policy
        try {
            zmsTestInitializer.getZms().deleteAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", "New-Version1", id1, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("admin policy cannot be modified"));
        }

        try {
            zmsTestInitializer.getZms().deleteAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version1", id1, zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"putpolicy: unable to delete assertion: " + id1 + " from policy: policy1 version: new-version1\"}");
        }

        // Verify deleting using correct version works
        zmsTestInitializer.getZms().deleteAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version2", id1, zmsTestInitializer.getAuditRef());
        policyVersion = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version2");
        assertEquals(policyVersion.getAssertions().size(), 1);
        assertEquals(policyVersion.getAssertions().get(0).getId(), id2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyVersionCopyAssertionConditions() {
        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("setActivePolicyVersion");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, policyName);
        // Create policy
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy1);

        // Put new version
        String newVersion = "new-version";
        zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion(newVersion), zmsTestInitializer.getAuditRef(), false);

        // Put new assertion in new (disabled) version
        Assertion assertion = new Assertion();
        assertion.setAction("testAction");
        assertion.setEffect(AssertionEffect.DENY);
        assertion.setResource(domainName + ":test-resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "Role1"));

        // we're not allowed to add an assertion that the associated role doesn't exist

        try {
            zmsImpl.putAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, newVersion, zmsTestInitializer.getAuditRef(), assertion);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("does not exist"));
            }
        // add the doesn't exist role - now the addition should be successful
        addRoleNeededForTest(domainName,"Role1");
        zmsImpl.putAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, newVersion, zmsTestInitializer.getAuditRef(), assertion);

        // we're not allowed to create assertions in the admin policy

        try {
            zmsImpl.putAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", newVersion, zmsTestInitializer.getAuditRef(), assertion);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("admin policy cannot be modified"));
        }

        // Put assertion conditions for the new assertion
        AssertionConditionData assertionConditionData = new AssertionConditionData();
        assertionConditionData.setOperator(AssertionConditionOperator.EQUALS);
        assertionConditionData.setValue("testVal1");

        Map<String, AssertionConditionData> conditionsMap1 = new HashMap<>();
        conditionsMap1.put("cond1", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS).setValue("testval1"));
        conditionsMap1.put("cond2", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS).setValue("testval2"));
        AssertionCondition assertionCondition1 = new AssertionCondition();
        assertionCondition1.setConditionsMap(conditionsMap1);
        Map<String, AssertionConditionData> conditionsMap2 = new HashMap<>();
        conditionsMap2.put("cond3", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS).setValue("testval3"));
        conditionsMap2.put("cond4", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS).setValue("testval4"));
        AssertionCondition assertionCondition2 = new AssertionCondition();
        assertionCondition2.setConditionsMap(conditionsMap2);
        List<AssertionCondition> conditionsList = new ArrayList<>();
        conditionsList.add(assertionCondition1);
        conditionsList.add(assertionCondition2);
        AssertionConditions assertionConditions = new AssertionConditions();
        assertionConditions.setConditionsList(conditionsList);
        zmsImpl.putAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, assertion.getId(), zmsTestInitializer.getAuditRef(), assertionConditions);

        // put new policy version based on the version we just created
        zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setFromVersion(newVersion).setVersion("new-version2"), zmsTestInitializer.getAuditRef(), false);

        // get new policy version and verify all assertion and assertion conditions were copied
        // currently assertion conditions are only retrieved in get all policies call
        Policies policies = zmsImpl.getPolicies(zmsTestInitializer.getMockDomRsrcCtx(), domainName, true, true);
        Policy policyVersion = policies.getList().stream()
                .filter(policy ->
                        policy.getName().equals("PolicyGetDom1:policy.Policy1".toLowerCase()) && policy.getVersion().equals("new-version2")
                )
                .findFirst().get();

        assertEquals(policyVersion.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());
        assertFalse(policyVersion.getActive());
        assertEquals(policyVersion.getVersion(), "new-version2");
        List<Assertion> assertList = policyVersion.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 2);
        Assertion obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());
        assertNull(obj.getConditions());
        obj = assertList.get(1);
        assertEquals(obj.getAction(), "testaction");
        assertEquals(obj.getEffect(), AssertionEffect.DENY);
        assertEquals(obj.getResource(), domainName.toLowerCase() + ":test-resource");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Role1".toLowerCase());
        List<AssertionCondition> conditionsListReturned = obj.getConditions().getConditionsList();
        assertEquals(conditionsListReturned.size(), 2);
        assertEquals(conditionsListReturned.get(0).getConditionsMap().get("cond1").getValue(), "testval1");
        assertEquals(conditionsListReturned.get(0).getConditionsMap().get("cond2").getValue(), "testval2");
        assertEquals(conditionsListReturned.get(1).getConditionsMap().get("cond3").getValue(), "testval3");
        assertEquals(conditionsListReturned.get(1).getConditionsMap().get("cond4").getValue(), "testval4");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testEnablePolicyVersion() {

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("setActivePolicyVersion");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        createPolicyWithVersions(zmsImpl, domainName, policyName);

        // enable a different version
        //
        aLogMsgs.clear();
        zmsImpl.setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version1"), zmsTestInitializer.getAuditRef());

        boolean foundError = false;
        System.err.println("testEnablePolicyVersion: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(setActivePolicyVersion)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("set-active-policy\": [{\"name\": \"policygetdom1:policy.policy1\", \"version\": \"0\", \"active\": \"false\", \"modified\": ");
            int index3 = msg.indexOf("},{\"name\": \"policygetdom1:policy.policy1\", \"version\": \"new-version1\", \"active\": \"true\", \"modified\": ");
            assertTrue(index < index2, msg);
            assertTrue(index2 < index3, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // Verify when fetching the policy we get the new active version
        Policy newActivePolicy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
        assertTrue(newActivePolicy.getActive());
        assertEquals(newActivePolicy.getVersion(), "new-version1");
        assertEquals(newActivePolicy.getName(), "policygetdom1:policy.policy1");
        assertEquals(newActivePolicy.getAssertions().size(), 1);
        assertEquals(newActivePolicy.getAssertions().get(0).getResource(), "policygetdom1:*");
        assertEquals(newActivePolicy.getAssertions().get(0).getRole(), "PolicyGetDom1:role.Admin".toLowerCase());

        // Verify fetching other versions show them as non-active
        Policy oldVersion = zmsImpl.getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "0");
        assertFalse(oldVersion.getActive());
        assertEquals(oldVersion.getVersion(), "0");
        assertEquals(oldVersion.getName(), "policygetdom1:policy.policy1");

        oldVersion = zmsImpl.getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "new-version2");
        assertFalse(oldVersion.getActive());
        assertEquals(oldVersion.getVersion(), "new-version2");
        assertEquals(oldVersion.getName(), "policygetdom1:policy.policy1");

        // Verify trying to activate version in admin policy throws an exception
        try {
            zmsImpl.setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", new PolicyOptions().setVersion("newversion"), zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"setActivePolicyVersion: admin policy cannot be modified\"}");
        }

        // Verify setting active version in read mode throws an exception
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsImpl.readOnlyMode = dynamicConfigBoolean;
        try {
            zmsImpl.setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version2"), zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"Server in Maintenance Read-Only mode. Please try your request later\"}");
        }

        zmsImpl.readOnlyMode = dynamicConfigBoolean;
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", zmsTestInitializer.getAuditRef());
    }

    private Policy createPolicyWithVersions(ZMSImpl zmsImpl, String domainName, String policyName) {
        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, policyName);
        // Create policy
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy1);

        // Create new version with the same assertions as the active policy
        zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version1"), zmsTestInitializer.getAuditRef(), false);

        // Put new assertions in active policy. They will not appear in "New-Version1".
        Assertion assertion = new Assertion();
        assertion.setAction("updatetest");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resourcetest");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        zmsImpl.putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), assertion);

        // Put new version. This will include all assertions of the active policy including the new assertion.
        zmsImpl.putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1", new PolicyOptions().setVersion("New-Version2"), zmsTestInitializer.getAuditRef(), false);
        return policy1;
    }

    @Test
    public void testGetPolicyCaseSensitive() {

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyGetDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        addRoleNeededForTest("PolicyGetDom1", "Role1");
        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyGetDom1", "Policy1", "Role1", "ActioN1", "PolicyGetDom1:SomeResourcE", AssertionEffect.ALLOW);
        policy1.setCaseSensitive(true);
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1");
        assertNotNull(policy);
        assertEquals(policy.getName(), "PolicyGetDom1:policy.Policy1".toLowerCase());

        List<Assertion> assertList = policy.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 1);
        Assertion obj = assertList.get(0);
        assertEquals(obj.getAction(), "ActioN1");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:SomeResourcE");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Role1".toLowerCase());

        boolean foundError = false;
        System.err.println("testGetPolicy: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"added-assertions\": [{\"role\": \"policygetdom1:role.role1\", \"action\": \"ActioN1\", \"effect\": \"ALLOW\", \"resource\": \"policygetdom1:SomeResourcE\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // modify the assertion: result is add of new assertion, delete of old
        //
        obj.setAction("layup");
        // We'll set the policy to not be case-sensitive. So even though we didn't override the resource name, it will be lower-cased
        policy1.setCaseSensitive(false);
        obj.setEffect(AssertionEffect.DENY);
        List<Assertion> assertions = new ArrayList<>();
        assertions.add(obj);
        policy1.setAssertions(assertions);
        aLogMsgs.clear();
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        foundError = false;
        System.err.println("testGetPolicy: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putpolicy)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"added-assertions\": [{\"role\": \"policygetdom1:role.role1\", \"action\": \"layup\", \"effect\": \"DENY\", \"resource\": \"policygetdom1:someresource\"}]");
            assertTrue(index < index2, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // this should throw an exception
        try {
            zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", "Policy2");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyThrowException() {
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";
        // Tests the getPolicy() condition : if (domain == null)...
        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy");
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Tests the getPolicy() condition: if (collection == null)...
        try {
            // Should fail b/c a policy was never added.
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        // Tests the getPolicy() condition: if (policy == null)...
        try {
            String wrongPolicyName = "Policy2";

            Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, policyName);
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy1);

            // Should fail b/c trying to find a non-existent policy.
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, wrongPolicyName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyThrowException() {
        String domainName = "DomainName";
        String policyName = "PolicyName";
        String wrongPolicyName = "WrongPolicyName";

        // Tests the putPolicy() condition : if (!policyResourceName(domainName, policyName).equals(policy.getName()))...
        try {
            Policy policy = zmsTestInitializer.createPolicyObject(domainName, wrongPolicyName);

            // policyName should not be the same as policy.getName()
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the putPolicy() condition: if (domain == null)...
        try {
            Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);

            // should fail b/c we never created a top level domain.
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testCreatePolicy() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyAddDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyAddDom1", "Policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policyRes2 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", "Policy1");
        assertNotNull(policyRes2);
        assertEquals(policyRes2.getName(), "PolicyAddDom1:policy.Policy1".toLowerCase());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyCaseSensitive() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyAddDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Create policy with an "allow all" assertion
        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyAddDom1", "Policy1");
        // Make the assertions in the policy case sensitive with regards to action and resource
        policy1.setCaseSensitive(true);

        addRoleNeededForTest("PolicyAddDom1", "provider");

        // Create assertion2
        Assertion assertion2 = new Assertion();
        assertion2.setAction("ReaD");
        assertion2.setEffect(AssertionEffect.ALLOW);
        assertion2.setResource("coretech:RESOURCE");
        assertion2.setRole("PolicyAddDom1:role.provider");

        // Create assertion3 which is identical to assertion2 but with a different case in action and resource
        Assertion assertion3 = new Assertion();
        assertion3.setAction("READ");
        assertion3.setEffect(AssertionEffect.ALLOW);
        assertion3.setResource("coretech:Resource");
        assertion3.setRole("PolicyAddDom1:role.provider");

        // Create assertion4 which is different than assertion 3 and 2
        Assertion assertion4 = new Assertion();
        assertion4.setAction("WritE");
        assertion4.setEffect(AssertionEffect.ALLOW);
        assertion4.setResource("coretech:OtherResource");
        assertion4.setRole("PolicyAddDom1:role.provider");

        policy1.getAssertions().add(assertion2);
        policy1.getAssertions().add(assertion3);
        policy1.getAssertions().add(assertion4);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policyRes2 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", "Policy1");
        assertNotNull(policyRes2);
        assertEquals(policyRes2.getName(), "PolicyAddDom1:policy.Policy1".toLowerCase());
        List<Assertion> assertions = policyRes2.getAssertions();
        assertEquals(assertions.size(), 3); // assertion 2 and 3 are considered identical so only one remained

        assertEquals(assertions.get(1).getAction(), "ReaD");
        assertEquals(assertions.get(1).getResource(), "coretech:RESOURCE");

        assertEquals(assertions.get(2).getAction(), "WritE");
        assertEquals(assertions.get(2).getResource(), "coretech:OtherResource");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyWithLocalName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyAddDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = new Policy();
        policy.setName("policy1");

        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("policyadddom1:*");
        assertion.setRole("policyadddom1:role.admin");

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);

        policy.setAssertions(assertList);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy);

        Policy policyRes2 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", "Policy1");
        assertNotNull(policyRes2);
        assertEquals(policyRes2.getName(), "PolicyAddDom1:policy.Policy1".toLowerCase());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyMissingAuditRef() {
        String domain = "testCreatePolicyMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Policy policy = zmsTestInitializer.createPolicyObject(domain, "Policy1");
        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Policy1", null, false, policy);
            fail("requesterror not thrown by putPolicy.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutPolicyChanges() {
        String domain     = "PutPolicyChanges";
        String policyName = "Jobs";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domain, policyName);
        List<Assertion> origAsserts = policy1.getAssertions();

        String userId = "hank";

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature",
                0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);

        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);
        zmsTestInitializer.getZms().putPolicy(rsrcCtx1, domain, policyName, zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policyRes1A = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, policyName);
        List<Assertion> resAsserts = policyRes1A.getAssertions();

        // check assertions are the same - should only be 1
        assertEquals(origAsserts.size(), resAsserts.size());

        // now replace the old assertion with a new ones
        //
        addRoleNeededForTest(domain, "librarian");
        Assertion assertionA = new Assertion();
        assertionA.setResource(domain + ":books");
        assertionA.setAction("READ");
        assertionA.setRole(domain + ":role.librarian");
        assertionA.setEffect(AssertionEffect.ALLOW);

        addRoleNeededForTest(domain, "astronaut");
        Assertion assertionB = new Assertion();
        assertionB.setResource(domain + ":jupiter");
        assertionB.setAction("TRAVEL");
        assertionB.setRole(domain + ":role.astronaut");
        assertionB.setEffect(AssertionEffect.ALLOW);

        List<Assertion> newAssertions = new ArrayList<>();
        newAssertions.add(assertionA);
        newAssertions.add(assertionB);

        policyRes1A.setAssertions(newAssertions);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, policyName, zmsTestInitializer.getAuditRef(), false, policyRes1A);

        Policy policyRes1B = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, policyName);
        List<Assertion> resAssertsB = policyRes1B.getAssertions();

        // check assertions are the same - should be 2
        assertEquals(newAssertions.size(), resAssertsB.size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
    }

    private void addRoleNeededForTest(String domain, String roleName){
        Role role = zmsTestInitializer.createRoleObject(domain, roleName, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domain, roleName, zmsTestInitializer.getAuditRef(), false, role);
    }

    @Test
    public void testPutAdminPolicyRejection() {

        String domain = "put-admin-rejection";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domain, "admin");
        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, "admin", zmsTestInitializer.getAuditRef(), false, policy);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("admin policy cannot be modified"), ex.getMessage());
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyNoAssertions() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "testCreatePolicyNoAssertions", "Test Domain1", "testOrg",
                zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = new Policy();
        policy1.setName(ResourceUtils.policyResourceName("testCreatePolicyNoAssertions",
                "Policy1"));

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "testCreatePolicyNoAssertions", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testCreatePolicyNoAssertions", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyInvalidAssertionResources() {

        String domainName = "InvalidAssertionResources";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = new Policy();
        policy.setName(ResourceUtils.policyResourceName(domainName, policyName));

        // assertion missing domain name

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "role1"));

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);
        policy.setAssertions(assertList);

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with invalid domain name

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain name:resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "role1"));

        assertList.clear();
        assertList.add(assertion);
        policy.setAssertions(assertList);

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyMismatchName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "PolicyAddMismatchNameDom1", "Test Domain1", "testOrg",
                zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyAddMismatchNameDom1",
                "Policy1");

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddMismatchNameDom1",
                    "PolicyAddMismatchNameDom1.Policy1", zmsTestInitializer.getAuditRef(), false, policy1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddMismatchNameDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyInvalidName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "PolicyAddInvalidNameDom1", "Test Domain1", "testOrg",
                zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = new Policy();
        policy.setName("Policy1");

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddInvalidNameDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddInvalidNameDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreatePolicyInvalidStruct() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "PolicyAddInvalidStructDom1", "Test Domain1", "testOrg",
                zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = new Policy();

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddInvalidStructDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAddInvalidStructDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePolicy() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyDelDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("PolicyDelDom1", "Policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("PolicyDelDom1", "Policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policyRes1 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy1");
        assertNotNull(policyRes1);

        Policy policyRes2 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy2");
        assertNotNull(policyRes2);

        zmsTestInitializer.getZms().deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy1", zmsTestInitializer.getAuditRef());

        // we need to get an exception here
        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy1");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        policyRes2 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy2");
        assertNotNull(policyRes2);

        zmsTestInitializer.getZms().deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy2", zmsTestInitializer.getAuditRef());

        // we need to get an exception here
        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy1");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        // we need to get an exception here
        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", "Policy2");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyDelDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePolicyVersion() {

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        String domainName = "PolicyGetDom1";
        String policyName = "Policy1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putpolicy").thenReturn("putpolicyversion").thenReturn("putassertion").thenReturn("putpolicyversion").thenReturn("deletepolicyversion");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        createPolicyWithVersions(zmsImpl, domainName, policyName);

        // delete non-active policy version
        //
        aLogMsgs.clear();
        zmsImpl.deletePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version1", zmsTestInitializer.getAuditRef());

        boolean foundError = false;
        System.err.println("testDeletePolicyVersion: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(deletepolicyversion)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("{\"name\": \"policygetdom1:policy.policy1\", \"version\": \"new-version1\", \"active\": \"false\", \"modified\": ");
            int index3 = msg.indexOf(", \"deleted-assertions\": [{\"role\": \"policygetdom1:role.admin\", \"action\": \"*\", \"effect\": \"ALLOW\", \"resource\": \"policygetdom1:*\"}]");
            assertTrue(index < index2, msg);
            assertTrue(index2 < index3, msg);
            index2 = msg.indexOf("ERROR");
            assertEquals(index2, -1, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // Verify when fetching the policy we still get the active version
        Policy newActivePolicy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
        assertTrue(newActivePolicy.getActive());
        assertEquals(newActivePolicy.getVersion(), "0");
        assertEquals(newActivePolicy.getName(), "policygetdom1:policy.policy1");

        // Verify assertions for active version
        List<Assertion> assertList = newActivePolicy.getAssertions();
        assertNotNull(assertList);
        assertEquals(assertList.size(), 2);
        Assertion obj = assertList.get(0);
        assertEquals(obj.getAction(), "*");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), "policygetdom1:*");
        assertEquals(obj.getRole(), "PolicyGetDom1:role.Admin".toLowerCase());
        obj = assertList.get(1);
        assertEquals(obj.getAction(), "updatetest");
        assertEquals(obj.getEffect(), AssertionEffect.ALLOW);
        assertEquals(obj.getResource(), domainName.toLowerCase() + ":resourcetest");
        assertEquals(obj.getRole(), ResourceUtils.roleResourceName(domainName.toLowerCase(), "admin"));

        // Verify exception is thrown when trying to set the deleted version active
        try {
            zmsImpl.setActivePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, new PolicyOptions().setVersion("New-Version1"), zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (404): {code: 404, message: \"unknown policy version: new-version1\"}");
        }

        // Verify exception is thrown when trying to delete non-existing policy version
        try {
            zmsImpl.deletePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (404): {code: 404, message: \"deletepolicyversion: unable to read policy: policy1, version: new-version1\"}");
        }

        // Verify exception is thrown when trying to delete active policy version
        try {
            zmsImpl.deletePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "0", zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"deletepolicyversion: unable to delete active policy version. Policy: policy1, version: 0\"}");
        }

        // Verify when fetching the policy we still get the active version
        newActivePolicy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
        assertTrue(newActivePolicy.getActive());
        assertEquals(newActivePolicy.getVersion(), "0");
        assertEquals(newActivePolicy.getName(), "policygetdom1:policy.policy1");

        // Verify deleting policy version in read mode throws an exception
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsImpl.readOnlyMode = dynamicConfigBoolean;
        try {
            zmsImpl.deletePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, "New-Version2", zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"Server in Maintenance Read-Only mode. Please try your request later\"}");
        }
        zmsImpl.readOnlyMode = dynamicConfigBoolean;

        // Verify trying to delete admin policy version throws an exception
        try {
            zmsImpl.deletePolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", "0", zmsTestInitializer.getAuditRef());
            fail();
        } catch (Exception ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"deletepolicyversion: admin policy version cannot be deleted\"}");
        }

        // Delete entire policy, verify all versions are gone
        zmsImpl.deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef());
        List<String> versions = Arrays.asList("0", "New-Version1", "New-Version2");
        for (String version : versions) {
            try {
                zmsImpl.getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, version);
                fail();
            } catch (Exception ex) {
                assertTrue(ex.getMessage().contains("Policy not found: 'policygetdom1:policy.policy1' with version: " + version.toLowerCase() + "\"}"));
            }
        }
        try {
            zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName);
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains(": Policy not found: 'policygetdom1:policy.policy1'\"}"));
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyGetDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePolicyThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domainName = "WrongDomainName";
        String policyName = "WrongPolicyName";
        try {
            zmsImpl.deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef());
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testDeleteAdminPolicy() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("PolicyAdminDelDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        try {
            zmsTestInitializer.getZms().deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAdminDelDom1", "admin", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "PolicyAdminDelDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePolicyMissingAuditRef() {
        // create a new policy without an auditref
        String domain = "testDeletePolicyMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, null, null, zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        try {
            zmsTestInitializer.getZms().deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Policy1", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testCreateServiceIdentity() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceAddDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceAddDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        ServiceIdentity serviceRes2 = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddDom1",
                "Service1");
        assertNotNull(serviceRes2);
        assertEquals(serviceRes2.getName(), "ServiceAddDom1.Service1".toLowerCase());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateServiceIdentityNotSimpleName() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceAddDom1NotSimpleName",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceAddDom1NotSimpleName",
                "Service1.Test", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        try {
            zmsImpl.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddDom1NotSimpleName", "Service1.Test", zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddDom1NotSimpleName", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateServiceIdentityMissingAuditRef() {
        String domain = "testCreateServiceIdentityMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(
                domain,
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", null, false, service);
            fail("requesterror not thrown by putServiceIdentity.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testCreateServiceIdentityMismatchName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceAddMismatchNameDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceAddMismatchNameDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddMismatchNameDom1",
                    "ServiceAddMismatchNameDom1.Service1", zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddMismatchNameDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateServiceIdentityInvalidName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceAddInvalidNameDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = new ServiceIdentity();
        service.setName("Service1");

        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddInvalidNameDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddInvalidNameDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateServiceIdentityInvalidCert() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceAddInvalidCertDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName("ServiceAddInvalidCertDom1", "Service1"));
        List<PublicKeyEntry> pubKeys = new ArrayList<>();
        pubKeys.add(new PublicKeyEntry().setId("0").setKey("LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTk"));
        service.setPublicKeys(pubKeys);

        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddInvalidCertDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddInvalidCertDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateServiceIdentityInvalidStruct() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceAddInvalidStructDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = new ServiceIdentity();

        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddInvalidStructDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceAddInvalidStructDom1", zmsTestInitializer.getAuditRef());
    }


    @Test
    public void testPutServiceIdentityWithoutPubKey() {
        String domainName = "ServicePutDom1";
        String serviceName = "Service1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName(domainName, serviceName));

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, service);

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
        assertNotNull(serviceRes);
        assertEquals(serviceRes.getName(), "ServicePutDom1.Service1".toLowerCase());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),  domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutServiceIdentityInvalidServiceName() {
        String domainName = "ServicePutDom1";
        String serviceName = "cloud";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName(domainName, serviceName));

        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid/Reserved service name"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),  domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutServiceIdentityInvalidEndPoint() {
        String domainName = "ServicePutDom1";
        String serviceName = "Service1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName(domainName, serviceName));
        service.setProviderEndpoint("https://sometestcompany.com");

        try {
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, service);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid endpoint"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),  domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutServiceIdentityThrowException() {
        String domainName = "DomainName";
        String serviceName = "ServiceName";
        String wrongServiceName = "WrongServiceName";

        // Tests the putServiceIdentity() condition: if (!serviceResourceName(domainName, serviceName).equals(detail.getName()))...
        try {
            ServiceIdentity detail = zmsTestInitializer.createServiceObject(domainName,
                    wrongServiceName, "http://localhost", "/usr/bin/java", "root",
                    "users", "host1");

            // serviceName should not rendered to be the same as domainName:service.wrongServiceName
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, detail);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // Tests the putServiceIdentity() condition: if (domain == null)...
        try {
            ServiceIdentity detail = zmsTestInitializer.createServiceObject(domainName,
                    serviceName, "http://localhost", "/usr/bin/java", "root",
                    "users", "host1");

            // should fail b/c we never created a top level domain.
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, detail);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testGetServiceIdentity() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceGetDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceGetDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceGetDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceGetDom1",
                "Service1");
        assertNotNull(serviceRes);
        assertEquals(serviceRes.getName(), "ServiceGetDom1.Service1".toLowerCase());
        assertEquals(serviceRes.getExecutable(), "/usr/bin/java");
        assertEquals(serviceRes.getGroup(), "users");
        assertEquals(serviceRes.getUser(), "root");

        // provider endpoint is a system meta attribute so we shouldn't saved it
        assertNull(serviceRes.getProviderEndpoint());

        List<String> hosts = serviceRes.getHosts();
        assertNotNull(hosts);
        assertEquals(hosts.size(), 1);
        assertEquals(hosts.get(0), "host1");

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceGetDom1", "Service2");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        // this should throw a request error exception
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceGetDom1", "Service2.Service3");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceGetDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutServiceIdentitySystemMeta() {

        final String domainName = "service-system-meta";
        final String serviceName = "service1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(domainName,
                serviceName, "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, service);

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
        assertNotNull(serviceRes);
        assertEquals(serviceRes.getName(), domainName + "." + serviceName);
        assertEquals(serviceRes.getExecutable(), "/usr/bin/java");
        assertEquals(serviceRes.getGroup(), "users");
        assertEquals(serviceRes.getUser(), "root");

        // provider endpoint is a system meta attribute so we shouldn't saved it
        assertNull(serviceRes.getProviderEndpoint());

        // now let's set the meta attribute

        ServiceIdentitySystemMeta meta = new ServiceIdentitySystemMeta();
        zmsTestInitializer.getZms().putServiceIdentitySystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, "providerendpoint", zmsTestInitializer.getAuditRef(), meta);

        // we expect no changes

        serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
        assertEquals(serviceRes.getName(), domainName + "." + serviceName);
        assertEquals(serviceRes.getExecutable(), "/usr/bin/java");
        assertEquals(serviceRes.getGroup(), "users");
        assertEquals(serviceRes.getUser(), "root");
        assertNull(serviceRes.getProviderEndpoint());

        // now let's change the endpoint

        meta.setProviderEndpoint("https://localhost");
        zmsTestInitializer.getZms().putServiceIdentitySystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, "providerendpoint", zmsTestInitializer.getAuditRef(), meta);

        serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
        assertEquals(serviceRes.getName(), domainName + "." + serviceName);
        assertEquals(serviceRes.getExecutable(), "/usr/bin/java");
        assertEquals(serviceRes.getGroup(), "users");
        assertEquals(serviceRes.getUser(), "root");
        assertEquals(serviceRes.getProviderEndpoint(), "https://localhost");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetServiceIdentityThrowException() {
        String domainName = "ServiceGetDom1";
        String serviceName = "Service1";

        // Tests the getServiceIdentity() condition : if (domain == null)...
        try {
            // Should fail because we never created this domain.
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Tests the getServiceIdentity() condition : if (collection == null)...
        try {
            // Should fail because we never added a service identity to this domain.
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        // Tests the getServiceIdentity() condition : if (service == null)...
        try {
            String wrongServiceName = "Service2";

            ServiceIdentity service = zmsTestInitializer.createServiceObject(domainName,
                    serviceName, "http://localhost", "/usr/bin/java", "root",
                    "users", "host1");
            zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef(), false, service);

            // Should fail because trying to find a non-existent service identity.
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, wrongServiceName);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteServiceIdentity() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("ServiceDelDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject("ServiceDelDom1",
                "Service2", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service2", zmsTestInitializer.getAuditRef(), false, service2);

        ServiceIdentity serviceRes1 = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1",
                "Service1");
        assertNotNull(serviceRes1);

        ServiceIdentity serviceRes2 = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1",
                "Service2");
        assertNotNull(serviceRes2);

        zmsTestInitializer.getZms().deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef());

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        serviceRes2 = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service2");
        assertNotNull(serviceRes2);

        zmsTestInitializer.getZms().deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service2", zmsTestInitializer.getAuditRef());

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service2");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        // this should throw an invalid exception
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", "Service2.Service3");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteServiceIdentityDependencyExist() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, zmsTestInitializer.getAuditRef(), dom2);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("ServiceDelDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsImpl.putServiceIdentity(ctx, "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity serviceRes1 = zmsImpl.getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelDom1",
                "Service1");
        assertNotNull(serviceRes1);

        // add a domain dependency on the service and verify it prevents service deletion

        RsrcCtxWrapper providerCtx = registerDependency(ctx, "ServiceDelDom1".toLowerCase(), zmsImpl, "ServiceDelDom1".toLowerCase(), "Service1".toLowerCase());
        try {
            zmsImpl.deleteServiceIdentity(providerCtx, "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Remove service 'servicedeldom1.service1' dependency from the following domain(s):servicedeldom1\"}");
        }

        // Register another dependency, verify it appears in the delete error list

        providerCtx = registerDependency(ctx, "ServiceDelDom2".toLowerCase(), zmsImpl, "ServiceDelDom1".toLowerCase(), "Service1".toLowerCase());
        try {
            zmsImpl.deleteServiceIdentity(providerCtx, "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Remove service 'servicedeldom1.service1' dependency from the following domain(s):servicedeldom1, servicedeldom2\"}");
        }

        // Remove one of the dependencies, verify the error message is updated

        deRegisterDependency("ServiceDelDom1".toLowerCase(), zmsImpl, "ServiceDelDom1".toLowerCase(), "Service1".toLowerCase());
        try {
            zmsImpl.deleteServiceIdentity(providerCtx, "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (403): {code: 403, message: \"Remove service 'servicedeldom1.service1' dependency from the following domain(s):servicedeldom2\"}");
        }
        deRegisterDependency("ServiceDelDom2".toLowerCase(), zmsImpl, "ServiceDelDom1".toLowerCase(), "Service1".toLowerCase());
        zmsImpl.deleteServiceIdentity(ctx, "ServiceDelDom1", "Service1", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(ctx, "ServiceDelDom1", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(ctx, "ServiceDelDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteServiceIdentityMissingAuditRef() {
        String domain = "testDeleteServiceIdentityMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(
                domain,
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", zmsTestInitializer.getAuditRef(), false, service);
        ServiceIdentity serviceRes =
                zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1");
        assertNotNull(serviceRes);
        try {
            zmsTestInitializer.getZms().deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", null);
            fail("requesterror not thrown by deleteServiceIdentity.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteServiceIdentityThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domainName = "WrongDomainName";
        String serviceName = "WrongServiceName";
        try {
            zmsImpl.deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName, zmsTestInitializer.getAuditRef());
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testGetServiceIdentityList() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("ServiceListDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject("ServiceListDom1",
                "Service2", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListDom1", "Service2", zmsTestInitializer.getAuditRef(), false, service2);

        ServiceIdentityList serviceList = zmsTestInitializer.getZms().getServiceIdentityList(
                zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListDom1", null, null);
        assertNotNull(serviceList);
        assertEquals(serviceList.getNames().size(), 2);

        assertTrue(serviceList.getNames().contains("Service1".toLowerCase()));
        assertTrue(serviceList.getNames().contains("Service2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetServiceIdentityListParams() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(
                "ServiceListParamsDom1", "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("ServiceListParamsDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListParamsDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject("ServiceListParamsDom1",
                "Service2", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListParamsDom1", "Service2", zmsTestInitializer.getAuditRef(), false, service2);

        ServiceIdentityList serviceList = zmsTestInitializer.getZms().getServiceIdentityList(
                zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListParamsDom1", 1, null);
        assertNotNull(serviceList);
        assertEquals(serviceList.getNames().size(), 1);

        serviceList = zmsTestInitializer.getZms().getServiceIdentityList(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListParamsDom1", null,
                "Service1");
        assertNotNull(serviceList);
        assertEquals(serviceList.getNames().size(), 1);

        assertFalse(serviceList.getNames().contains("Service1".toLowerCase()));
        assertTrue(serviceList.getNames().contains("Service2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceListParamsDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetServiceIdentityListThrowException() {
        String domainName = "WrongDomainName";
        try {
            zmsTestInitializer.getZms().getServiceIdentityList(zmsTestInitializer.getMockDomRsrcCtx(), domainName, null, null);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testGetEntity() {

        final String domainName = "get-entity-dom1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Entity entity1 = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", zmsTestInitializer.getAuditRef(), entity1);

        Entity entity2 = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1");
        assertNotNull(entity2);

        assertEquals(entity2.getName(), "get-entity-dom1:entity.entity1");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetEntityThrowException() {
        try {
            zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), "wrongDomainName", "wrongEntityName");
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testCreateEntity() {

        final String domainName = "create-entity-dom1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Entity entity1 = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", zmsTestInitializer.getAuditRef(), entity1);

        Entity entity2 = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1");
        assertNotNull(entity2);
        assertEquals(entity2.getName(), "create-entity-dom1:entity.entity1");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListEntity() {

        final String domainName = "list-entity-dom1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        EntityList entityList = zmsTestInitializer.getZms().getEntityList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(entityList);
        assertEquals(0, entityList.getNames().size());

        Entity entity1 = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", zmsTestInitializer.getAuditRef(), entity1);

        entityList = zmsTestInitializer.getZms().getEntityList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(entityList);
        assertEquals(1, entityList.getNames().size());
        assertTrue(entityList.getNames().contains("entity1"));

        Entity entity2 = zmsTestInitializer.createEntityObject(domainName, "Entity2");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity2", zmsTestInitializer.getAuditRef(), entity2);

        entityList = zmsTestInitializer.getZms().getEntityList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(entityList);
        assertEquals(2, entityList.getNames().size());
        assertTrue(entityList.getNames().contains("entity1"));
        assertTrue(entityList.getNames().contains("entity2"));

        zmsTestInitializer.getZms().deleteEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "entity1", zmsTestInitializer.getAuditRef());

        entityList = zmsTestInitializer.getZms().getEntityList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(entityList);
        assertEquals(1, entityList.getNames().size());
        assertTrue(entityList.getNames().contains("entity2"));

        zmsTestInitializer.getZms().deleteEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "entity2", zmsTestInitializer.getAuditRef());

        entityList = zmsTestInitializer.getZms().getEntityList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(entityList);
        assertEquals(0, entityList.getNames().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateEntityMissingAuditRef() {
        final String domainName = "testCreateEntityMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Entity entity = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        try {
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", null, entity);
            fail("requesterror not thrown by putEntity.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteEntity() {

        final String domainName = "del-entity-dom1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Entity entity1 = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", zmsTestInitializer.getAuditRef(), entity1);

        Entity entity2 = zmsTestInitializer.createEntityObject(domainName, "Entity2");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity2", zmsTestInitializer.getAuditRef(), entity2);

        Entity entityRes = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1");
        assertNotNull(entityRes);

        entityRes = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity2");
        assertNotNull(entityRes);

        zmsTestInitializer.getZms().deleteEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", zmsTestInitializer.getAuditRef());

        try {
            zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        entityRes = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity2");
        assertNotNull(entityRes);

        zmsTestInitializer.getZms().deleteEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity2", zmsTestInitializer.getAuditRef());

        try {
            zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        try {
            zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity2");
            fail();
        } catch (Exception ex) {
            assertTrue(true);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteEntityMissingAuditRef() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        final String domainName = "testDeleteEntityMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Entity entity = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        zmsImpl.putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", zmsTestInitializer.getAuditRef(), entity);

        try {
            zmsImpl.deleteEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Entity1", null);
            fail("requesterror not thrown by deleteEntity.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testGetUserToken() {

        // Use real Principal Authority to verify signatures
        PrincipalAuthority principalAuthority = new com.yahoo.athenz.auth.impl.PrincipalAuthority();
        principalAuthority.setKeyStore(zmsTestInitializer.getZms());

        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();

        String userId = "george";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password",
                0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");
        zmsTestInitializer.loadServerPublicKeys(zmsTestInitializer.getZms());

        UserToken token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, null, null);
        assertNotNull(token);
        assertTrue(token.getToken().startsWith("v=U1;d=user;n=" + userId + ";"));
        assertTrue(token.getToken().contains(";h=localhost"));
        assertTrue(token.getToken().contains(";i=10.11.12.13"));
        assertTrue(token.getToken().contains(";k=0"));
        // Verify signature
        Principal principalToVerify = principalAuthority.authenticate(token.getToken(), "10.11.12.13", "GET", null);
        assertNotNull(principalToVerify);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKeyK1())), "1");

        token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, null, false);
        assertNotNull(token);
        assertTrue(token.getToken().contains("k=1"));
        // Verify signature
        principalToVerify = principalAuthority.authenticate(token.getToken(), "10.11.12.13", "GET", null);
        assertNotNull(principalToVerify);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKeyK2())), "2");

        token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, null, null);
        assertNotNull(token);
        assertTrue(token.getToken().contains("k=2"));
        // Verify signature
        principalToVerify = principalAuthority.authenticate(token.getToken(), "10.11.12.13", "GET", null);
        assertNotNull(principalToVerify);
    }

    @Test
    public void testGetUserTokenAuthorizedService() {

        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();

        String userId = "george";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password",
                0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");

        UserToken token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, "coretech.storage", null);
        assertNotNull(token);
        assertTrue(token.getToken().contains(";b=coretech.storage;"));

        token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, "coretech.storage,sports.hockey", false);
        assertNotNull(token);
        assertTrue(token.getToken().contains(";b=coretech.storage,sports.hockey;"));
    }

    @Test
    public void testGetUserTokenInvalidAuthorizedService() {

        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();

        String userId = "george";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password",
                0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, "coretech.storage,sports", null);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 401);
            assertTrue(ex.getMessage().contains("getUserToken: Service sports is not authorized in ZMS"));
        }

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, "baseball", false);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 401);
            assertTrue(ex.getMessage().contains("getUserToken: Service baseball is not authorized in ZMS"));
        }

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, "hat trick", false);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 401);
            assertTrue(ex.getMessage().contains("getUserToken: Service hat trick is not authorized in ZMS"));
        }
    }

    @Test
    public void testGetUserTokenExpiredIssueTime() {

        // Use real Principal Authority to verify signatures
        PrincipalAuthority principalAuthority = new com.yahoo.athenz.auth.impl.PrincipalAuthority();
        principalAuthority.setKeyStore(zmsTestInitializer.getZms());

        // we're going to set the issue time 2 hours before the current time

        long issueTime = (System.currentTimeMillis() / 1000) - 7200;

        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();

        String userId = "george";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password",
                0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");
        zmsTestInitializer.loadServerPublicKeys(zmsTestInitializer.getZms());

        UserToken token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, userId, null, null);
        assertNotNull(token);
        // Verify signature
        Principal principalToVerify = principalAuthority.authenticate(token.getToken(), "10.11.12.13", "GET", null);
        assertNotNull(principalToVerify);

        // verify that the issue time for the user token is not our issue time

        PrincipalToken pToken = new PrincipalToken(token.getToken());
        assertNotEquals(pToken.getTimestamp(), issueTime);

        // verify that our expiry is close to 1 hour default value

        assertTrue(pToken.getExpiryTime() - (System.currentTimeMillis() / 1000) > 3500);
    }

    @Test
    public void testGetUserTokenMismatchName() {
        int code = 401;

        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();

        String userId = "user1";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password",
                0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, "user2", null, null);
            fail("unauthorizederror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), code);
        }

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, "_self", null, false);
            fail("unauthorizederror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), code);
        }

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, "self", null, false);
            fail("unauthorizederror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), code);
        }
    }

    @Test
    public void testGetUserTokenDefaultSelfName() {

        // Use real Principal Authority to verify signatures
        PrincipalAuthority principalAuthority = new com.yahoo.athenz.auth.impl.PrincipalAuthority();
        principalAuthority.setKeyStore(zmsTestInitializer.getZms());

        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();

        String userId = "user10";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password",
                0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");
        zmsTestInitializer.loadServerPublicKeys(zmsTestInitializer.getZms());

        UserToken token = zmsTestInitializer.getZms().getUserToken(rsrcCtx1, "_self_", null, false);
        assertNotNull(token);
        assertTrue(token.getToken().startsWith("v=U1;d=user;n=" + userId + ";"));
        assertTrue(token.getToken().contains(";h=localhost"));
        assertTrue(token.getToken().contains(";i=10.11.12.13"));
        assertTrue(token.getToken().contains(";k=0"));
        // Verify signature
        Principal principalToVerify = principalAuthority.authenticate(token.getToken(), "10.11.12.13", "GET", null);
        assertNotNull(principalToVerify);
    }

    @Test
    public void testGetUserTokenBadAuthority() {
        int code = 401;

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature",
                0, principalAuthority);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, "user1", null, null);
            fail("unauthorizederror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), code);
        }
    }

    @Test
    public void testGetUserTokenNullAuthority() {
        int code = 401;

        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature");
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);

        try {
            zmsTestInitializer.getZms().getUserToken(rsrcCtx1, "user1", null, null);
            fail("unauthorizederror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), code);
        }
    }

    @Test
    public void testGetTenantResourceGroupRoles() {

        String domain = "testGetTenantResourceGroupRoles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        String tenantDomain = "tenantTestDeleteTenantRoles";
        TopLevelDomain tenantDom = zmsTestInitializer.createTopLevelDomainObject(
                tenantDomain, "Tenant Domain", "testOrg", zmsTestInitializer.getAdminUser());
        tenantDom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tenantDom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String serviceName  = "storage";
        String resourceGroup = "Group1";

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);
        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain, resourceGroup,
                zmsTestInitializer.getAuditRef(), tenantRoles);

        TenantResourceGroupRoles tRoles = zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName,
                tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(domain.toLowerCase(), tRoles.getDomain());
        assertEquals(serviceName.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        // Verify domain dependency wasn't created as the provider isn't listed in the "sys.auth:role.service_providers role

        try {
            zmsTestInitializer.getZms().getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), domain + "." + serviceName);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"testgettenantresourcegrouproles.storage is not a registered service provider\"}");
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    public void makeServiceProviders(ZMSImpl zmsImpl, RsrcCtxWrapper ctx, List<String> providerNames) {
        // Create Service Provider

        final String sysAdminDomainName = "sys.auth";
        final String serviceProvidersRoleName = "service_providers";
        List<RoleMember> roleMembers = providerNames.stream().map(provider -> {
            RoleMember authorizedServiceRoleMember = new RoleMember();
            authorizedServiceRoleMember.setMemberName(provider.toLowerCase());
            return authorizedServiceRoleMember;
        }).collect(Collectors.toList());
        Role role = new Role();
        role.setName(serviceProvidersRoleName);
        role.setRoleMembers(roleMembers);

        zmsImpl.putRole(ctx, sysAdminDomainName, serviceProvidersRoleName, zmsTestInitializer.getAuditRef(), false, role);

        // Wait for cache to be ServiceProviderManager cache to refresh

        ZMSTestUtils.sleep((1000 * fetchDomainDependencyFrequency) + 50);
    }

    @Test
    public void testGetTenantResourceGroupRolesDomainDependency() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        String domain = "testGetTenantResourceGroupRolesDomainDependency";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        String tenantDomain = "tenantTestGetTenantResourceGroupRolesDomainDependency";
        TopLevelDomain tenantDom = zmsTestInitializer.createTopLevelDomainObject(
                tenantDomain, "Tenant Domain", "testOrg", zmsTestInitializer.getAdminUser());
        tenantDom.setAuditEnabled(true);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tenantDom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String serviceName  = "storage";
        String resourceGroup = "Group1";

        ServiceIdentity serviceProviderIdentity = zmsTestInitializer.createServiceObject(domain,
                serviceName, "http://localhost/service-provider", "/usr/bin/java", "root",
                "users", "host1");

        zmsImpl.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, zmsTestInitializer.getAuditRef(), false, serviceProviderIdentity);

        makeServiceProviders(zmsImpl, zmsTestInitializer.getMockDomRsrcCtx(), Collections.singletonList(domain + "." + serviceName));
        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);
        RsrcCtxWrapper serviceProviderCtx = zmsTestInitializer.contextWithMockPrincipal("putTenantResourceGroupRoles", domain, serviceName);
        zmsImpl.putTenantResourceGroupRoles(serviceProviderCtx, domain, serviceName, tenantDomain, resourceGroup,
                zmsTestInitializer.getAuditRef(), tenantRoles);

        TenantResourceGroupRoles tRoles = zmsImpl.getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName,
                tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(domain.toLowerCase(), tRoles.getDomain());
        assertEquals(serviceName.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        // Verify dependency

        DomainList dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), domain + "." + serviceName);
        assertEquals(dependentDomainList.getNames().size(), 1);
        assertEquals(dependentDomainList.getNames().get(0), tenantDomain.toLowerCase());

        // Now add another resource group

        String resourceGroup2 = "Group2";
        tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup2);
        zmsImpl.putTenantResourceGroupRoles(serviceProviderCtx, domain, serviceName, tenantDomain, resourceGroup2,
                zmsTestInitializer.getAuditRef(), tenantRoles);

        tRoles = zmsImpl.getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName,
                tenantDomain, resourceGroup2);
        assertNotNull(tRoles);
        assertEquals(domain.toLowerCase(), tRoles.getDomain());
        assertEquals(serviceName.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup2.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        DependentServiceResourceGroupList dependentServiceResourceGroupList = zmsTestInitializer.getZms().getDependentServiceResourceGroupList(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain);
        assertEquals(dependentServiceResourceGroupList.getServiceAndResourceGroups().size(), 1);
        assertEquals(dependentServiceResourceGroupList.getServiceAndResourceGroups().get(0).getService(), "testgettenantresourcegrouprolesdomaindependency.storage");
        assertEquals(dependentServiceResourceGroupList.getServiceAndResourceGroups().get(0).getDomain(), "tenanttestgettenantresourcegrouprolesdomaindependency");
        List<String> resourceGroups = dependentServiceResourceGroupList.getServiceAndResourceGroups().get(0).getResourceGroups();
        assertEquals(resourceGroups.size(), 6);
        assertTrue(resourceGroups.contains("storage.tenant.tenanttestgettenantresourcegrouprolesdomaindependency.res_group.group1.admin"));
        assertTrue(resourceGroups.contains("storage.tenant.tenanttestgettenantresourcegrouprolesdomaindependency.res_group.group1.reader"));
        assertTrue(resourceGroups.contains("storage.tenant.tenanttestgettenantresourcegrouprolesdomaindependency.res_group.group1.writer"));
        assertTrue(resourceGroups.contains("storage.tenant.tenanttestgettenantresourcegrouprolesdomaindependency.res_group.group2.admin"));
        assertTrue(resourceGroups.contains("storage.tenant.tenanttestgettenantresourcegrouprolesdomaindependency.res_group.group2.reader"));
        assertTrue(resourceGroups.contains("storage.tenant.tenanttestgettenantresourcegrouprolesdomaindependency.res_group.group2.writer"));

        // Now remove the first resource group and verify dependency remains until the second resource group and admin role is removed

        zmsImpl.deleteTenantResourceGroupRoles(serviceProviderCtx, domain, serviceName, tenantDomain, resourceGroup, zmsTestInitializer.getAuditRef());
        dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), domain + "." + serviceName);
        assertEquals(dependentDomainList.getNames().size(), 1);
        assertEquals(dependentDomainList.getNames().get(0), tenantDomain.toLowerCase());

        // Now delete the second resource group and verify dependency was removed

        zmsImpl.deleteTenantResourceGroupRoles(serviceProviderCtx, domain, serviceName, tenantDomain, resourceGroup2, zmsTestInitializer.getAuditRef());
        dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), domain + "." + serviceName);
        assertEquals(dependentDomainList.getNames().size(), 0);

        // Finally, remove all resource groups related to the tenant domain (which will remove the admin role)

        ServiceIdentity serviceProvider = zmsTestInitializer.createServiceObject(domain,
                serviceName, "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsImpl.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, zmsTestInitializer.getAuditRef(), false, serviceProvider);

        zmsImpl.deleteTenant(serviceProviderCtx, domain, serviceName, tenantDomain, zmsTestInitializer.getAuditRef());
        dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), domain + "." + serviceName);
        assertEquals(dependentDomainList.getNames().size(), 0);

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetTenantResourceGroupRolesInvalidDomain() {

        try {
            zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "invalid-domain", "api",
                    "tenant", "table1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testDeleteTenantResourceGroupRoles() {

        String domain = "testDeleteTenantResourceGroupRoles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        String tenantDomain = "tenantTestDeleteTenantRoles";
        TopLevelDomain tenantDom = zmsTestInitializer.createTopLevelDomainObject(
                tenantDomain, "Tenant Domain", "testOrg", zmsTestInitializer.getAdminUser());
        tenantDom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tenantDom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String serviceName  = "storage";
        String resourceGroup = "Group1";

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);
        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain, resourceGroup,
                zmsTestInitializer.getAuditRef(), tenantRoles);

        TenantResourceGroupRoles tRoles = zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName,
                tenantDomain, resourceGroup);
        assertNotNull(tRoles);

        // Delete the tenant domain. Then make sure we can still delete resource groups in provider

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain, resourceGroup, zmsTestInitializer.getAuditRef());

        tRoles = zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(domain.toLowerCase(), tRoles.getDomain());
        assertEquals(serviceName.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(0, tRoles.getRoles().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidatedAdminUsersThrowException() {
        try {
            zmsTestInitializer.getZms().validatedAdminUsers(null);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }
    }

    @Test
    public void testPutDefaultAdminsInvalidDomain() {

        DefaultAdmins admins = new DefaultAdmins();

        try {
            zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }
    }

    @Test
    public void testPutDefaultAdmins() {

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Test domain for sports", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
        } catch (ResourceException ignored) {
        }
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        List<String> adminList = new ArrayList<>();
        DefaultAdmins admins = new DefaultAdmins();

        // negative test, pass an empty list
        admins.setAdmins(adminList);
        zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.admin");
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals(members.get(0).getMemberName(), zmsTestInitializer.getAdminUser());

        // positive test
        adminList.add("user.sports_admin");
        adminList.add("sports.fantasy");
        adminList.add("user.joeschmoe");
        adminList.add("user.johndoe");

        admins.setAdmins(adminList);
        zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.admin");
        members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 5);

        // add user.testadminuser to the list for verification since it should be
        // there when the domain was added
        adminList.add(zmsTestInitializer.getAdminUser());
        for (String admin : adminList) {
            boolean found = false;
            for (RoleMember memberFromRole : members) {
                if (memberFromRole.getMemberName().equalsIgnoreCase(admin)) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDefaultAdminsMissingAuditRef() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domain = "testPutDefaultAdminsMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<String> adminList = new ArrayList<>();
        adminList.add("user.sports_admin");
        adminList.add("sports.fantasy");
        DefaultAdmins admins = new DefaultAdmins();
        admins.setAdmins(adminList);
        try {
            zmsImpl.putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), domain, null, admins);
            fail("requesterror not thrown by putDefaultAdmins.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutDefaultAdminsNoAdminRole() {

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Test domain for sports", "testOrg", zmsTestInitializer.getAdminUser());

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
        } catch (ResourceException ignored) {
        }
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        // since we can't delete the admin role anymore
        // we're going to access the store object directly to
        // accomplish that for our unit test

        zmsTestInitializer.getZms().dbService.executeDeleteRole(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), "admin",
                zmsTestInitializer.getAuditRef(), "unittest");

        List<String> adminList = new ArrayList<>();
        DefaultAdmins admins = new DefaultAdmins();
        adminList.add("user.sports_admin");
        adminList.add("sports.fantasy");
        adminList.add("user.joeschmoe");
        adminList.add("user.johndoe");
        adminList.add(zmsTestInitializer.getAdminUser());

        admins.setAdmins(adminList);
        zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.admin");
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 5);

        // add user.testadminuser to the list for verification since it should be
        // there when the domain was added
        adminList.add(zmsTestInitializer.getAdminUser());
        for (String admin : adminList) {
            boolean found = false;
            for (RoleMember memberFromRole : members) {
                if (memberFromRole.getMemberName().equalsIgnoreCase(admin)) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDefaultAdmins_NoAdminPolicy() {

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Test domain for sports", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
        } catch (ResourceException ignored) {
        }
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        // since we can't delete the admin policy anymore
        // we're going to access the store object directly to
        // accomplish that for our unit test

        zmsTestInitializer.getZms().dbService.executeDeletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), "admin",
                zmsTestInitializer.getAuditRef(), "unittest");

        List<String> adminList = new ArrayList<>();
        DefaultAdmins admins = new DefaultAdmins();
        adminList.add("user.sports_admin");
        adminList.add("sports.fantasy");
        adminList.add("user.joeschmoe");
        adminList.add("user.johndoe");

        admins.setAdmins(adminList);
        zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);

        // Validate that admin policy has been added back
        Policy policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin");
        assertNotNull(policy);
        assertEquals(policy.getName(), "sports:policy.admin");
        List<Assertion> assertions = policy.getAssertions();
        boolean foundAssertion = false;
        for (Assertion assertion : assertions) {
            if ("sports:*".equals(assertion.getResource())
                    && "*".equals(assertion.getAction())
                    && "sports:role.admin".equals(assertion.getRole())) {
                foundAssertion = true;
                break;
            }
        }
        assertTrue(foundAssertion);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.admin");
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 5);

        for (String admin : adminList) {
            boolean found = false;
            for (RoleMember memberFromRole : members) {
                if (memberFromRole.getMemberName().equalsIgnoreCase(admin)) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDefaultAdmins_AdminPolicyWithDeny() {

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Test domain for sports", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
        } catch (ResourceException ignored) {
        }
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        // Add policy which will DENY admin role
        Policy policy = new Policy();
        policy.setName(ResourceUtils.policyResourceName("sports", "denyAdmin"));
        Assertion assertion = new Assertion();
        assertion.setResource("sports:*");
        assertion.setAction("*");
        assertion.setRole("sports:role.admin");
        assertion.setEffect(AssertionEffect.DENY);
        List<Assertion> assertions = new ArrayList<>();
        assertions.add(assertion);
        policy.setAssertions(assertions);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "denyAdmin", zmsTestInitializer.getAuditRef(), false, policy);

        List<String> adminList = new ArrayList<>();
        DefaultAdmins admins = new DefaultAdmins();
        adminList.add("user.sports_admin");
        adminList.add("sports.fantasy");
        adminList.add("user.joeschmoe");
        adminList.add("user.johndoe");

        admins.setAdmins(adminList);
        zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);

        // denyAdmin policy should be deleted by putDefaultAdmins validation
        try {
            policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "denyAdmin");
            assertNotNull(policy); // should not be found
        } catch (ResourceException ex) {
            // policy should not be found
            if (ex.getCode() != 404) {
                throw ex;
            }
        }

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.admin");
        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 5);

        for (String admin : adminList) {
            boolean found = false;
            for (RoleMember memberFromRole : members) {
                if (memberFromRole.getMemberName().equalsIgnoreCase(admin)) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDefaultAdmins_DenyIndirectRole() {

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Test domain for sports", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
        } catch (ResourceException ignored) {
        }
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        // Add role indirectRole
        Role role = new Role();
        role.setName("sports:role.indirectRole");
        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.johnadams"));
        members.add(new RoleMember().setMemberName("user.sports_admin"));
        members.add(new RoleMember().setMemberName("sports.fantasy"));
        members.add(new RoleMember().setMemberName("user.joeschmoe"));
        members.add(new RoleMember().setMemberName("user.johndoe"));
        role.setRoleMembers(members);
        role.setTrust(null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "indirectRole", zmsTestInitializer.getAuditRef(), false, role);

        // Add policy which will DENY indirectRole role
        Policy policy = new Policy();
        policy.setName(ResourceUtils.policyResourceName("sports", "denyIndirectRole"));
        Assertion assertion = new Assertion();
        assertion.setResource("sports:*");
        assertion.setAction("*");
        assertion.setRole("sports:role.indirectRole");
        assertion.setEffect(AssertionEffect.DENY);
        List<Assertion> assertions = new ArrayList<>();
        assertions.add(assertion);
        policy.setAssertions(assertions);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "denyIndirectRole", zmsTestInitializer.getAuditRef(), false, policy);

        List<String> adminList = new ArrayList<>();
        DefaultAdmins admins = new DefaultAdmins();
        adminList.add("user.sports_admin");
        adminList.add("sports.fantasy");
        adminList.add("user.joeschmoe");
        adminList.add("user.johndoe");

        admins.setAdmins(adminList);
        zmsTestInitializer.getZms().putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef(), admins);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "indirectRole", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.indirectRole".toLowerCase());
        members = role.getRoleMembers();
        assertEquals(members.size(), 1);

        for (String admin : adminList) {
            boolean found = false;
            for (RoleMember memberFromRole : members) {
                if (memberFromRole.getMemberName().equalsIgnoreCase(admin)) {
                    found = true;
                    break;
                }
            }
            assertFalse(found);
        }

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getName(), "sports:role.admin");
        members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 5);

        for (String admin : adminList) {
            boolean found = false;
            for (RoleMember memberFromRole : members) {
                if (memberFromRole.getMemberName().equalsIgnoreCase(admin)) {
                    found = true;
                    break;
                }
            }
            assertTrue(found);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), sportsDomain.getName(), zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetSignedDomains() {

        zmsTestInitializer.loadServerPublicKeys(zmsTestInitializer.getZms());

        // create multiple top level domains
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SignedDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject("signeddom1", "group1", "user.user1", "user.user2");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "group1", zmsTestInitializer.getAuditRef(), false, group1);

        // set the meta attributes for domain

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain1", null, true, false, "12345", 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", zmsTestInitializer.getAuditRef(), meta);
        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain1", null, true, false, "12345", 0);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "account", zmsTestInitializer.getAuditRef(), meta);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("SignedDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain2", null, false, false, "12346", null);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom2", zmsTestInitializer.getAuditRef(), meta);
        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain2", null, false, false, "12346", null);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom2", "account", zmsTestInitializer.getAuditRef(), meta);

        Role role = zmsTestInitializer.createRoleObject("signeddom1", "role1", null, "user.john", "user.jane");
        Policy pol = zmsTestInitializer.createPolicyObject("signeddom1", "pol1", "role1", "action1", "signeddom1:resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "role1", zmsTestInitializer.getAuditRef(), false, role);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "pol1", zmsTestInitializer.getAuditRef(), false, pol);

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, null, null);
        List<String> domNames = domList.getNames();
        int numDoms = domNames.size();

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        Response response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, null, null, null, false, null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        List<SignedDomain> list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        boolean dom1Found = false;
        boolean dom2Found = false;
        for (SignedDomain sDomain : list) {
            String signature = sDomain.getSignature();
            String keyId = sDomain.getKeyId();
            String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
            DomainData domainData = sDomain.getDomain();
            if (domainData.getName().equals("signeddom1")) {
                assertEquals("12345", domainData.getAccount());
                dom1Found = true;
            } else if (domainData.getName().equals("signeddom2")) {
                assertEquals("12346", domainData.getAccount());
                dom2Found = true;
            }
            assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));
        }
        assertTrue(dom1Found);
        assertTrue(dom2Found);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKeyK1())), "1");

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, null, "all", null, false, null);
        sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        for(SignedDomain sDomain : list) {
            String signature = sDomain.getSignature();
            String keyId = sDomain.getKeyId();
            String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
            assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));

            // we now need to verify the policy struct signature as well

            SignedPolicies signedPolicies = sDomain.getDomain().getPolicies();
            signature = signedPolicies.getSignature();
            assertTrue(Crypto.verify(SignUtils.asCanonicalString(signedPolicies.getContents()), Crypto.loadPublicKey(publicKey), signature));
        }

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKeyK2())), "2");

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, null, null, Boolean.TRUE, false, null);
        sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        for(SignedDomain sDomain : list) {
            String signature = sDomain.getSignature();
            String keyId = sDomain.getKeyId();
            String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
            assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));
        }

        // test metaonly=true
        //
        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, "tRuE", null, Boolean.FALSE, false, null);
        sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        for (SignedDomain sDomain : list) {
            String signature = sDomain.getSignature();
            assertTrue(signature == null || signature.isEmpty());
            String keyId = sDomain.getKeyId();
            assertTrue(keyId == null || keyId.isEmpty());
            DomainData ddata = sDomain.getDomain();
            assertNotNull(ddata);
            assertFalse(ddata.getName().isEmpty());
            assertNotNull(ddata.getModified());
            assertNull(ddata.getPolicies());
            assertNull(ddata.getRoles());
            assertNull(ddata.getServices());
        }

        // test metaonly=garbage
        //
        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, "garbage", null, null, false, null);
        sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        for (SignedDomain sDomain : list) {
            String signature = sDomain.getSignature();
            String keyId = sDomain.getKeyId();
            String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
            assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));
            DomainData ddata = sDomain.getDomain();
            assertNotNull(ddata.getPolicies());
            assertTrue(ddata.getRoles() != null && ddata.getRoles().size() > 0);
            assertNotNull(ddata.getServices());
        }

        // test metaonly=false
        //
        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, "fAlSe", null, null, false,null);
        sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        for (SignedDomain sDomain : list) {
            String signature = sDomain.getSignature();
            String keyId = sDomain.getKeyId();
            String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
            assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));
            DomainData ddata = sDomain.getDomain();
            assertNotNull(ddata.getPolicies());
            assertTrue(ddata.getRoles() != null && ddata.getRoles().size() > 0);
            assertNotNull(ddata.getServices());
        }

        // test bad tag format
        //
        String eTag  = "I am not good";
        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, null, null, Boolean.TRUE, false, eTag);
        sdoms = (SignedDomains) response.getEntity();
        String eTag2 = response.getHeaderString("ETag");
        assertNotNull(eTag2);
        assertNotEquals(eTag, eTag2);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);

        ZMSUtils.threadSleep(1000);

        Policy policy1 = zmsTestInitializer.createPolicyObject("SignedDom1", "Policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, null, null, true, false, eTag2);
        sdoms = (SignedDomains) response.getEntity();
        eTag = response.getHeaderString("ETag");
        assertNotNull(eTag);
        assertNotEquals(eTag, eTag2);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(1, list.size());

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, null, null, Boolean.TRUE, false, eTag);
        assertEquals(304, response.getStatus());
        eTag2 = response.getHeaderString("ETag");

        assertNotNull(eTag2);
        assertEquals(eTag, eTag2);

        //test with conditions
        Policy policyResp = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "pol1");
        AssertionConditions acs = new AssertionConditions().setConditionsList(new ArrayList<>());
        acs.getConditionsList().add(createAssertionConditionObject(1, "instances", "host1,host2,host3"));
        zmsTestInitializer.getZms().putAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "pol1", policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), acs);

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, "false", null, true, true,null);
        sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), numDoms);
        AssertionCondition conditionResp = createAssertionConditionObject(1, "instances", "host1,host2,host3");

        AssertionConditions conditionsResp;
        for (SignedDomain sDomain : list) {
            if ("signeddom1".equals(sDomain.getDomain().getName())) {
                DomainPolicies dompols = sDomain.getDomain().getPolicies().getContents();
                assertNotNull(dompols);
                for (Policy polResp : dompols.getPolicies()) {
                    if (("signeddom1:policy.pol1").equals(polResp.getName())) {
                        conditionsResp = polResp.getAssertions().get(0).getConditions();
                        assertNotNull(conditionsResp);
                        assertThat(conditionsResp.getConditionsList(), CoreMatchers.hasItems(conditionResp));
                    }
                }

            }
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom2", zmsTestInitializer.getAuditRef());
    }

    private AssertionCondition createAssertionConditionObject(int conditionId, String key, String value) {
        Map<String, AssertionConditionData> map = new HashMap<>();
        AssertionConditionData cd = new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS).setValue(value);
        map.put(key, cd);
        return new AssertionCondition().setId(conditionId).setConditionsMap(map);
    }

    @Test
    public void testGetSignedDomainsFiltered() {

        zmsTestInitializer.loadServerPublicKeys(zmsTestInitializer.getZms());

        // create multiple top level domains
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("signeddom1filtered",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("signeddom2filtered",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");

        Response response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1filtered", null, null, null, false,  null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        List<SignedDomain> list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(1, list.size());

        SignedDomain sDomain = list.get(0);
        String signature = sDomain.getSignature();
        String keyId = sDomain.getKeyId();
        String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
        assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));
        assertEquals("signeddom1filtered", sDomain.getDomain().getName());

        // use domain=signeddom1filtered and metaonly=true
        //

        response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1filtered", "true", null, Boolean.TRUE, false, null);
        sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(1, list.size());

        sDomain = list.get(0);
        signature = sDomain.getSignature();
        assertTrue(signature == null || signature.isEmpty());
        keyId = sDomain.getKeyId();
        assertTrue(keyId == null || keyId.isEmpty());
        DomainData ddata = sDomain.getDomain();
        assertEquals("signeddom1filtered", ddata.getName());
        assertNotNull(ddata.getModified());
        assertNull(ddata.getPolicies());
        assertNull(ddata.getRoles());
        assertNull(ddata.getServices());

        // no changes, we should still get the same data back
        // we're going to pass the domain name with caps and
        // make sure we still get back our domain

        response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom1Filtered", null, null, Boolean.TRUE, false, null);
        sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(1, list.size());

        sDomain = list.get(0);
        signature = sDomain.getSignature();
        keyId = sDomain.getKeyId();
        publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", keyId);
        assertTrue(Crypto.verify(SignUtils.asCanonicalString(sDomain.getDomain()), Crypto.loadPublicKey(publicKey), signature));
        assertEquals("signeddom1filtered", sDomain.getDomain().getName());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1filtered", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom2filtered", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetSignedDomainsNotSystemPrincipal() {

        // create multiple top level domains
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SignedDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Response response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, Boolean.TRUE, false, null);
        assertEquals(response.getStatus(), ResourceException.BAD_REQUEST);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccess() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AccessDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("AccessDom1", "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("AccessDom1", "Role2", null, "user.user2",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Policy policy1 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy1", "Role1",
                "UPDATE", "AccessDom1:resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy2", "Role2",
                "CREATE", "AccessDom1:resource2", AssertionEffect.DENY);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy3", "Role2",
                "*", "AccessDom1:resource3", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy4", "Role2",
                "DELETE", "accessdom1:*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy4", zmsTestInitializer.getAuditRef(), false, policy4);

        Policy policy5 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy5", "Role1",
                "READ", "accessdom1:*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy5", zmsTestInitializer.getAuditRef(), false, policy5);

        Policy policy6 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy6", "Role1",
                "READ", "AccessDom1:resource6", AssertionEffect.DENY);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy6", zmsTestInitializer.getAuditRef(), false, policy6);

        // user1 and user3 have access to UPDATE/resource1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx2 = zmsTestInitializer.createResourceContext(principal2);
        Principal principal3 = principalAuthority.authenticate("v=U1;d=user;n=user3;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx3 = zmsTestInitializer.createResourceContext(principal3);

        Access access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // same set as before with no trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "AccessDom1:resource1",
                null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATE", "AccessDom1:resource1",
                null, null);
        assertTrue(access.getGranted());

        // all three have no access to CREATE action on resource1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // all three have no access to invalid domain name on resource 1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        // same as before with no trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        // all three should have deny access to resource 2

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // user2 and user3 have access to CREATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to UPDATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to DELETE/resource 4 (*)

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "DELETE", "AccessDom1:resource4",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "DELETE", "AccessDom1:resource4",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "DELETE", "AccessDom1:resource4",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user1 should be able to read resource 5(*) but not resource 6
        // (explicit DENY)

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "READ", "AccessDom1:resource5",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "READ", "AccessDom1:resource6",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // we should get an exception since access is not allowed to be called
        // with user cookie - this api is only for functions that require a
        // service or user tokens

        try {
            zmsTestInitializer.getZms().access("READ", "AccessDom1:resource5", principal1, "AccessDom1");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessCaseSensitive() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AccessDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("AccessDom1", "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("AccessDom1", "Role2", null, "user.user2",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Policy policy1 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy1", "Role1",
                "UpdatE", "AccessDom1:ResourcE1", AssertionEffect.ALLOW);
        policy1.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy2", "Role2",
                "CreatE", "AccessDom1:ResourcE2", AssertionEffect.DENY);
        policy2.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy3", "Role2",
                "*", "AccessDom1:ResourcE3", AssertionEffect.ALLOW);
        policy3.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy4", "Role2",
                "DeletE", "AccessdoM1:*", AssertionEffect.ALLOW);
        policy4.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy4", zmsTestInitializer.getAuditRef(), false, policy4);

        Policy policy5 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy5", "Role1",
                "ReaD", "AccessdoM1:*", AssertionEffect.ALLOW);
        policy5.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy5", zmsTestInitializer.getAuditRef(), false, policy5);

        Policy policy6 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy6", "Role1",
                "ReaD", "AccessDom1:ResourcE6", AssertionEffect.DENY);
        policy6.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy6", zmsTestInitializer.getAuditRef(), false, policy6);

        // user1 and user3 have access to UPDATE/resource1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx2 = zmsTestInitializer.createResourceContext(principal2);
        Principal principal3 = principalAuthority.authenticate("v=U1;d=user;n=user3;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx3 = zmsTestInitializer.createResourceContext(principal3);

        Access access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "uPDATe", "AcceSSDom1:rESOURCe1",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UpDaTe", "AccEssDom1:reSouRce1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "uPdate", "AccEssDom1:resOurce1",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // same set as before with no trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDaTE", "ACcessDom1:reSource1",
                null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDAtE", "AccEssDom1:resOUrce1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "uPDATE", "ACcessDom1:resourcE1",
                null, null);
        assertTrue(access.getGranted());

        // all three have no access to CREATE action on resource1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // all three have no access to invalid domain name on resource 1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        // same as before with no trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        // all three should have deny access to resource 2

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // user2 and user3 have access to CREATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CReATE", "AccessDOm1:resouRce3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATe", "accessDom1:rEsource3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to UPDATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UpDATE", "AcCessDom1:reSource3",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDaTE", "AccEssDom1:resourCe3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATe", "AccEssDom1:resouRce3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to DELETE/resource 4 (*)

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "DeLETE", "AccEssDOm1:resouRce4",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "DELETe", "AccEssDom1:resouRce4",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "DELEtE", "AccesSDom1:resouRce4",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user1 should be able to read resource 5(*) but not resource 6
        // (explicit DENY)

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "reaD", "ACCessDom1:reSource5",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "READ", "AccessDom1:resource6",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // we should get an exception since access is not allowed to be called
        // with user cookie - this api is only for functions that require a
        // service or user tokens

        try {
            zmsTestInitializer.getZms().access("READ", "AccessDom1:resource5", principal1, "AccessDom1");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessWithGroups() {

        final String domainName1 = "access-domain1";
        final String domainName2 = "access-domain2";
        final String domainName3 = "access-domain3";
        final String groupName1 = "group1";
        final String groupName2 = "group2";
        final String groupName3 = "group3";
        final String groupName4 = "group4";
        final String roleName1 = "role1";
        final String roleName2 = "role2";
        final String roleName3 = "role3";
        final String roleName4 = "role4";
        final String policyName1 = "policy1";
        final String policyName2 = "policy2";
        final String policyName3 = "policy3";
        final String policyName4 = "policy4";

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.getDateAttribute(anyString(), anyString())).thenReturn(null);
        Set<String> attrs = new HashSet<>();
        attrs.add("elevated-clearance");
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject(domainName3, "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        Group group1 = zmsTestInitializer.createGroupObject(domainName1, groupName1, "user.user1", "user.user2");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject(domainName2, groupName2, "user.user2", "user.user3");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        // set elevated clearance so both users become expired

        Group group3 = zmsTestInitializer.createGroupObject(domainName3, groupName3, "user.user1", "user.user2");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, groupName3, zmsTestInitializer.getAuditRef(), false, group3);
        GroupMeta gm = new GroupMeta().setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, groupName3, zmsTestInitializer.getAuditRef(), gm);

        // group 4 with no members

        Group group4 = new Group().setName(groupName4);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, groupName4, zmsTestInitializer.getAuditRef(), false, group4);

        // role1 will have user.user1 through group1

        Role role1 = zmsTestInitializer.createRoleObject(domainName1, roleName1, null, "user.user2", "user.user3");
        role1.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName2, groupName2)));
        role1.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName1, groupName1)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName1, zmsTestInitializer.getAuditRef(), false, role1);

        // role2 has user1 as expired but ok from group1 as well

        Role role2 = zmsTestInitializer.createRoleObject(domainName1, roleName2, null, "user.user2", "user.user3");
        role2.getRoleMembers().add(new RoleMember().setMemberName("user.user1")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() - 1000)));
        role2.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName2, groupName2)));
        role2.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName1, groupName1)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName2, zmsTestInitializer.getAuditRef(), false, role2);

        // role3 has user1 as expired but also group1 expired as well

        Role role3 = zmsTestInitializer.createRoleObject(domainName1, roleName3, null, "user.user2", "user.user3");
        role3.getRoleMembers().add(new RoleMember().setMemberName("user.user1")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() - 1000)));
        role3.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName1, groupName1))
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() - 1000)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName3, zmsTestInitializer.getAuditRef(), false, role3);

        // role4 does not have user1 at all

        Role role4 = zmsTestInitializer.createRoleObject(domainName1, roleName4, null, "user.user2", "user.user3");
        role4.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName2, groupName2)));
        role4.getRoleMembers().add(new RoleMember().setMemberName(ResourceUtils.groupResourceName(domainName2, groupName4)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName4, zmsTestInitializer.getAuditRef(), false, role4);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName1, policyName1, roleName1,
                "update", domainName1 + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, policyName1, zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName1, policyName2, roleName2,
                "update", domainName1 + ":resource2", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, policyName2, zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject(domainName1, policyName3, roleName3,
                "update", domainName1 + ":resource3", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, policyName3, zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject(domainName1, policyName4, roleName4,
                "update", domainName1 + ":resource4", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, policyName4, zmsTestInitializer.getAuditRef(), false, policy4);

        // user1 and user3 have access to UPDATE/resource1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);

        Access access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "update", domainName1 + ":resource1", null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "update", domainName1 + ":resource2", null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "update", domainName1 + ":resource3", null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "update", domainName1 + ":resource4", null, null);
        assertFalse(access.getGranted());

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessWildcard() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AccessDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("AccessDom1", "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("AccessDom1", "Role2", null, "user.user2",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Policy policy1 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy1", "Role1",
                "UpdatE", "AccessDom1:ResourcE1", AssertionEffect.ALLOW);
        policy1.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy2", "Role2",
                "CreatE", "AccessDom1:ResourcE2", AssertionEffect.DENY);
        policy2.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy3", "Role2",
                "*", "AccessDom1:ResourcE3", AssertionEffect.ALLOW);
        policy3.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy4", "Role2",
                "DeletE", "AccessdoM1:*", AssertionEffect.ALLOW);
        policy4.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy4", zmsTestInitializer.getAuditRef(), false, policy4);

        Policy policy5 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy5", "Role1",
                "ReaD", "AccessdoM1:*", AssertionEffect.ALLOW);
        policy5.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy5", zmsTestInitializer.getAuditRef(), false, policy5);

        Policy policy6 = zmsTestInitializer.createPolicyObject("AccessDom1", "Policy6", "Role1",
                "ReaD", "AccessDom1:ResourcE6", AssertionEffect.DENY);
        policy6.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", "Policy6", zmsTestInitializer.getAuditRef(), false, policy6);

        // user1 and user3 have access to UPDATE/resource1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx2 = zmsTestInitializer.createResourceContext(principal2);
        Principal principal3 = principalAuthority.authenticate("v=U1;d=user;n=user3;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx3 = zmsTestInitializer.createResourceContext(principal3);

        Access access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "uPDATe", "AcceSSDom1:rESOURCe1",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UpDaTe", "AccEssDom1:reSouRce1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "uPdate", "AccEssDom1:resOurce1",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // same set as before with no trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDaTE", "ACcessDom1:reSource1",
                null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDAtE", "AccEssDom1:resOUrce1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "uPDATE", "ACcessDom1:resourcE1",
                null, null);
        assertTrue(access.getGranted());

        // all three have no access to CREATE action on resource1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // all three have no access to invalid domain name on resource 1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                "AccessDom2", null);
        assertFalse(access.getGranted());

        // same as before with no trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource1",
                null, null);
        assertFalse(access.getGranted());

        // all three should have deny access to resource 2

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "AccessDom1:resource2",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // user2 and user3 have access to CREATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "AccessDom1:resource3",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CReATE", "AccessDOm1:resouRce3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATe", "accessDom1:rEsource3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to UPDATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UpDATE", "AcCessDom1:reSource3",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDaTE", "AccEssDom1:resourCe3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATe", "AccEssDom1:resouRce3",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to DELETE/resource 4 (*)

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "DeLETE", "AccEssDOm1:resouRce4",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "DELETe", "AccEssDom1:resouRce4",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "DELEtE", "AccesSDom1:resouRce4",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        // user1 should be able to read resource 5(*) but not resource 6
        // (explicit DENY)

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "reaD", "ACCessDom1:reSource5",
                "AccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "READ", "AccessDom1:resource6",
                "AccessDom1", null);
        assertFalse(access.getGranted());

        // we should get an exception since access is not allowed to be called
        // with user cookie - this api is only for functions that require a
        // service or user tokens

        try {
            zmsTestInitializer.getZms().access("READ", "AccessDom1:resource5", principal1, "AccessDom1");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessCrossUser() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("CrossAllowDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("CrossAllowDom1", "Role1", null,
                "user.user1", "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject("CrossAllowDom1", "Role2", null,
                "user.user2", "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject("CrossAllowDom1", "Role3", null,
                "user.user1", null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Role3", zmsTestInitializer.getAuditRef(), false, role3);

        Policy policy1 = zmsTestInitializer.createPolicyObject("CrossAllowDom1", "Policy1",
                "Role1", "UPDATE", "CrossAllowDom1:resource1",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject("CrossAllowDom1", "Policy2",
                "Role2", "CREATE", "CrossAllowDom1:resource2",
                AssertionEffect.DENY);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject("CrossAllowDom1", "Policy3",
                "Role2", "*", "CrossAllowDom1:resource3", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject("CrossAllowDom1", "Policy4",
                "Role2", "DELETE", "CrossAllowDom1:*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", "Policy4", zmsTestInitializer.getAuditRef(), false, policy4);

        // verify we have allow access for access resource

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx2 = zmsTestInitializer.createResourceContext(principal2);
        Principal principal3 = principalAuthority.authenticate("v=U1;d=user;n=user3;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx3 = zmsTestInitializer.createResourceContext(principal3);

        // user1 and user3 have access to UPDATE/resource1

        Access access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user1");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user1");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user2");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user2");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user3");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user3");
        assertTrue(access.getGranted());

        // all three have no access to CREATE action on resource1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user1");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user1");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user2");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user2");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user3");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user3");
        assertFalse(access.getGranted());

        // all three have no access to invalid domain name on resource 1

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom2", "user1");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom2", "user.user1");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "CrossAllowDom1:resource1",
                "CrossAllowDom2", null);
        assertFalse(access.getGranted());

        // user2 and user3 have access to CREATE(*)/resource 3

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", "user1");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", "user.user1");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", "user2");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", "user.user2");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", "user3");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx1, "CREATE", "CrossAllowDom1:resource3",
                "CrossAllowDom1", "user.user3");
        assertTrue(access.getGranted());

        // user2 and user3 are allowed to check each other's access

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user1");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx2, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user1");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user1");
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtx3, "UPDATE", "CrossAllowDom1:resource1",
                "CrossAllowDom1", "user.user1");
        assertTrue(access.getGranted());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "CrossAllowDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessHomeDomainEnabled() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN, "true");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();

        Principal pJane = principalAuthority.authenticate("v=U1;d=user;n=jane;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxJane = zmsTestInitializer.createResourceContext(pJane);

        Access access = zmsTest.getAccess(rsrcCtxJane, "READ", "user.jane:Resource1", null, null);
        assertTrue(access.getGranted());

        access = zmsTest.getAccess(rsrcCtxJane, "WRITE", "user.jane:Resource1", null, null);
        assertTrue(access.getGranted());

        access = zmsTest.getAccess(rsrcCtxJane, "UPDATE", "user.jane:Resource1", null, null);
        assertTrue(access.getGranted());

        // user id does not match domain - all should be failure

        Principal pJohn = principalAuthority.authenticate("v=U1;d=user;n=john;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxJohn = zmsTestInitializer.createResourceContext(pJohn);

        try {
            zmsTest.getAccess(rsrcCtxJohn, "READ", "user.jane:Resource1", null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTest.getAccess(rsrcCtxJohn, "WRITE", "user.jane:Resource1", null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTest.getAccess(rsrcCtxJohn, "UPDATE", "user.jane:Resource1", null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN);
    }

    @Test
    public void testGetAccessHomeDomainDisabled() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN, "false");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();

        Principal pJane = principalAuthority.authenticate("v=U1;d=user;n=jane;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxJane = zmsTestInitializer.createResourceContext(pJane);

        try {
            zmsTest.getAccess(rsrcCtxJane, "READ", "user.jane:Resource1", null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTest.getAccess(rsrcCtxJane, "WRITE", "user.jane:Resource1", null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTest.getAccess(rsrcCtxJane, "UPDATE", "user.jane:Resource1", null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN);
    }

    @Test
    public void testGetAccessFailures() {

        final String domainName = "access-domain-fails";

        Authority authority = Mockito.mock(Authority.class);
        when(authority.allowAuthorization()).thenReturn(false);
        Principal principal1 = Mockito.mock(Principal.class);
        when(principal1.getAuthority()).thenReturn(authority);

        // authority not authorized

        assertFalse(zmsTestInitializer.getZms().access("update", domainName + ":resource1", principal1, null));

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);

        // domain name missing in resource

        try {
            zmsTestInitializer.getZms().access("update", "resource1", principal2, null);
            fail();
        } catch (com.yahoo.athenz.common.server.rest.ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        RsrcCtxWrapper ctx = Mockito.mock(RsrcCtxWrapper.class);
        try {
            zmsTestInitializer.getZms().getAccessCheck(principal2, "update", "resource1", null, null, ctx);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // domain is disabled

        Domain dom1 = new Domain().setName(domainName).setEnabled(false);

        List<String> adminUsers = new ArrayList<>();
        adminUsers.add(zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), dom1, adminUsers, null, zmsTestInitializer.getAuditRef());

        try {
            zmsTestInitializer.getZms().access("update", domainName + ":resource1", principal2, null);
            fail();
        } catch (com.yahoo.athenz.common.server.rest.ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().getAccessCheck(principal2, "update", domainName + ":resource1", null, null, ctx);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testRetrieveAccessDomainValid() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("AccessDomain",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal pJane = principalAuthority.authenticate("v=U1;d=user;n=jane;s=signature",
                "10.11.12.13", "GET", null);

        AthenzDomain athenzDomain = zmsTestInitializer.getZms().retrieveAccessDomain("accessdomain", pJane);
        assertNotNull(athenzDomain);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AccessDomain", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testRetrieveAccessDomainVirtualValid() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN, "true");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature",
                0, principalAuthority);

        AthenzDomain athenzDomain = zmsTest.retrieveAccessDomain("user.user1", principal);
        assertNotNull(athenzDomain);
        assertEquals(athenzDomain.getName(), "user.user1");

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN);
    }

    @Test
    public void testRetrieveAccessDomainVirtualDomainDisabled() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN, "false");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature",
                0, principalAuthority);

        AthenzDomain athenzDomain = zmsTest.retrieveAccessDomain("user.user1", principal);
        assertNull(athenzDomain);

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN);
    }

    @Test
    public void testRetrieveAccessDomainPrincialNullDomain() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN, "true");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("user1", "v=U1;d=user;n=user1;s=signature",
                principalAuthority);

        AthenzDomain athenzDomain = zmsTest.retrieveAccessDomain("user.user1", principal);
        assertNull(athenzDomain);

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN);

    }

    @Test
    public void testRetrieveAccessDomainMismatch() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN, "true");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("user", "user2", "v=U1;d=user;n=user2;s=signature",
                0, principalAuthority);

        AthenzDomain athenzDomain = zmsTest.retrieveAccessDomain("user.user1", principal);
        assertNull(athenzDomain);

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN);
    }

    @Test
    public void testGetAccessCrossDomain() {

        zmsTestInitializer.setupTenantDomainProviderService("CrossDomainAccessDom1", "coretech", "storage",
                "http://localhost:8090/provider");

        Tenancy tenant = zmsTestInitializer.createTenantObject("CrossDomainAccessDom1", "coretech.storage");
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", "coretech.storage", zmsTestInitializer.getAuditRef(), tenant);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction((String) f.value()));
        }
        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain("coretech")
                .setService("storage").setTenant("CrossDomainAccessDom1")
                .setRoles(roleActions).setResourceGroup("group1");

        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", "CrossDomainAccessDom1",
                "group1", zmsTestInitializer.getAuditRef(), tenantRoles);

        // reset roles in the CrossDomainAccessDom1 domain with unique values

        Role role = zmsTestInitializer.createRoleObject("CrossDomainAccessDom1", "reader", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", "reader", zmsTestInitializer.getAuditRef(), false, role);

        role = zmsTestInitializer.createRoleObject("CrossDomainAccessDom1", "writer", null, "user.john",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", "writer", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject("CrossDomainAccessDom1", "tenancy.coretech.storage.writer",
                "writer", "ASSUME_ROLE",
                "coretech:role.storage.tenant.CrossDomainAccessDom1.res_group.group1.writer",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", "tenancy.coretech.storage.writer",
                zmsTestInitializer.getAuditRef(), false, policy);

        policy = zmsTestInitializer.createPolicyObject("CrossDomainAccessDom1", "tenancy.coretech.storage.reader",
                "reader", "ASSUME_ROLE",
                "coretech:role.storage.tenant.CrossDomainAccessDom1.res_group.group1.reader",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", "tenancy.coretech.storage.reader",
                zmsTestInitializer.getAuditRef(), false, policy);

        // verify the ASSUME_ROLE check - with trust domain specified it should work and
        // without trust domain it will not work since the resource is pointing to the
        // provider's domain and not to the tenant's domain

        Access access = zmsTestInitializer.getZms().getAccess(zmsTestInitializer.getMockDomRsrcCtx(), "ASSUME_ROLE",
                "coretech:role.storage.tenant.CrossDomainAccessDom1.res_group.group1.reader",
                null, "user.jane");
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(zmsTestInitializer.getMockDomRsrcCtx(), "ASSUME_ROLE",
                "coretech:role.storage.tenant.CrossDomainAccessDom1.res_group.group1.reader",
                "CrossDomainAccessDom1", "user.jane");
        assertTrue(access.getGranted());

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();

        Principal pJane = principalAuthority.authenticate("v=U1;d=user;n=jane;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxJane = zmsTestInitializer.createResourceContext(pJane);
        Principal pJohn = principalAuthority.authenticate("v=U1;d=user;n=john;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxJohn = zmsTestInitializer.createResourceContext(pJohn);
        Principal pJoe = principalAuthority.authenticate("v=U1;d=user;n=joe;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxJoe = zmsTestInitializer.createResourceContext(pJoe);

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJoe, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJane, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJohn, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJoe, "WRITE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJane, "WRITE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJohn, "WRITE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertTrue(access.getGranted());

        // unknown action should always fail

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJoe, "UPDATE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJane, "UPDATE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJohn, "UPDATE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom1", null);
        assertFalse(access.getGranted());

        // same set as above without trust domain field

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJoe, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJane, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJohn, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJoe, "WRITE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                null, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJane, "WRITE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                null, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJohn, "WRITE",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                null, null);
        assertTrue(access.getGranted());

        // failure with different domain name

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJoe, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJane, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom2", null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxJohn, "READ",
                "coretech:service.storage.tenant.CrossDomainAccessDom1.res_group.group1.resource1",
                "CrossDomainAccessDom2", null);
        assertFalse(access.getGranted());

        zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", "coretech.storage", zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "CrossDomainAccessDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessCrossDomainWildCardResources() {

        // create the netops domain

        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject("netops",
                "Test Netops", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Role role = zmsTestInitializer.createRoleObject("netops", "users", null, null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "netops", "users", zmsTestInitializer.getAuditRef(), false, role);

        role = zmsTestInitializer.createRoleObject("netops", "superusers", null, "user.siteops_user_1",
                "user.siteops_user_2");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "netops", "superusers", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject("netops", "users",
                "users", "NODE_USER", "netops:node.",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "netops", "users", zmsTestInitializer.getAuditRef(), false, policy);

        policy = zmsTestInitializer.createPolicyObject("netops", "superusers",
                "superusers", "NODE_SUDO", "netops:node.",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "netops", "superusers", zmsTestInitializer.getAuditRef(), false, policy);

        policy = zmsTestInitializer.createPolicyObject("netops", "netops_superusers",
                "netops:role.superusers", false, "ASSUME_ROLE", "*:role.netops_superusers",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "netops", "netops_superusers", zmsTestInitializer.getAuditRef(), false, policy);

        // create the weather domain

        dom = zmsTestInitializer.createTopLevelDomainObject("weather",
                "Test weather", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        role = zmsTestInitializer.createRoleObject("weather", "users", null, null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "users", zmsTestInitializer.getAuditRef(), false, role);

        role = zmsTestInitializer.createRoleObject("weather", "superusers", null, "user.weather_admin_user",
                null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "superusers", zmsTestInitializer.getAuditRef(), false, role);

        role = zmsTestInitializer.createRoleObject("weather", "netops_superusers", "netops");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "netops_superusers", zmsTestInitializer.getAuditRef(), false, role);

        policy = zmsTestInitializer.createPolicyObject("weather", "users",
                "users", "NODE_USER", "weather:node.",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "users", zmsTestInitializer.getAuditRef(), false, policy);

        policy = zmsTestInitializer.createPolicyObject("weather", "superusers",
                "superusers", "NODE_SUDO", "weather:node.*",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "superusers", zmsTestInitializer.getAuditRef(), false, policy);

        policy = zmsTestInitializer.createPolicyObject("weather", "netops_superusers",
                "netops_superusers", "NODE_SUDO", "weather:node.*",
                AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "weather", "netops_superusers", zmsTestInitializer.getAuditRef(), false, policy);

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();

        Principal pWeather = principalAuthority.authenticate("v=U1;d=user;n=weather_admin_user;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxWeather = zmsTestInitializer.createResourceContext(pWeather);

        Access access = zmsTestInitializer.getZms().getAccess(rsrcCtxWeather, "NODE_SUDO", "weather:node.x", null, null);
        assertTrue(access.getGranted());

        Principal pSiteOps = principalAuthority.authenticate("v=U1;d=user;n=siteops_user_1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxSiteOps = zmsTestInitializer.createResourceContext(pSiteOps);

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxSiteOps, "NODE_SUDO", "weather:node.x", null, null);
        assertTrue(access.getGranted());

        Principal pRandom = principalAuthority.authenticate("v=U1;d=user;n=random_user;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtxRandom = zmsTestInitializer.createResourceContext(pRandom);

        access = zmsTestInitializer.getZms().getAccess(rsrcCtxRandom, "NODE_SUDO", "weather:node.x", null, null);
        assertFalse(access.getGranted());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "weather", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "netops", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessExt() {

        final String testDomainName = "AccessDomExt1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(testDomainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(testDomainName, "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(testDomainName, "Role2", null, "user.user2",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Policy policy1 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy1", "Role1",
                "UPDATE", testDomainName + ":resource1/resource2", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy2", "Role2",
                "CREATE", testDomainName + ":resource2(resource3)", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy3", "Role2",
                "*", testDomainName + ":resource3/*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy4", "Role1",
                "READ", testDomainName + ":resource4[*]/data1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy4", zmsTestInitializer.getAuditRef(), false, policy4);

        Policy policy5 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy5", "Role2",
                "access", testDomainName + ":https://*.athenz.com/*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy5", zmsTestInitializer.getAuditRef(), false, policy5);

        // user1 and user3 have access to UPDATE/resource1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx2 = zmsTestInitializer.createResourceContext(principal2);
        Principal principal3 = principalAuthority.authenticate("v=U1;d=user;n=user3;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx3 = zmsTestInitializer.createResourceContext(principal3);

        // user1 and user3 have update access to resource1/resource2

        Access access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "UPDATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "UPDATE", testDomainName + ":resource1/resource3",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "UPDATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "UPDATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertTrue(access.getGranted());

        // all three have no access to CREATE action on resource1/resource2

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "CREATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "CREATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "CREATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertFalse(access.getGranted());

        // user2 and user3 have create access to resource2(resource3)

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "CREATE", testDomainName + ":resource2(resource3)",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "CREATE", testDomainName + ":resource2(resource3)",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "CREATE", testDomainName + ":resource2(resource3)",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to CREATE(*)/resource3/*

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "CREATE", testDomainName + ":resource3",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "CREATE", testDomainName + ":resource3/test1",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "CREATE", testDomainName + ":resource3/anothertest",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to UPDATE(*)/resource3/*

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "UPDATE", testDomainName + ":resource3",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "UPDATE", testDomainName + ":resource3/(another value)",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "UPDATE", testDomainName + ":resource3/a",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user1 and user3 have access to READ/resource6[*]/data1

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "read", testDomainName + ":resource4[test1]/data1",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "read", testDomainName + ":resource4[test1]/data1",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "read", testDomainName + ":resource4[test another]/data1",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to access/https://*.athenz.com/*

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "access", testDomainName + ":https://web.athenz.com/data",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "access", testDomainName + ":https://web.athenz.com/data",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "access", testDomainName + ":https://web.athenz.org/data",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "access", testDomainName + ":https://web-store.athenz.com/data/path",
                testDomainName, null);
        assertTrue(access.getGranted());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAccessExtCaseSensitive() {

        final String testDomainName = "AccessDomExt1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(testDomainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(testDomainName, "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(testDomainName, "Role2", null, "user.user2",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Policy policy1 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy1", "Role1",
                "UpdatE", testDomainName + ":ResourcE1/ResourcE2", AssertionEffect.ALLOW);
        policy1.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy2", "Role2",
                "CreatE", testDomainName + ":ResourcE2(ResourcE3)", AssertionEffect.ALLOW);
        policy2.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policy3 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy3", "Role2",
                "*", testDomainName + ":ResourcE3/*", AssertionEffect.ALLOW);
        policy3.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy3", zmsTestInitializer.getAuditRef(), false, policy3);

        Policy policy4 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy4", "Role1",
                "ReaD", testDomainName + ":ResourcE4[*]/DatA1", AssertionEffect.ALLOW);
        policy4.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy4", zmsTestInitializer.getAuditRef(), false, policy4);

        Policy policy5 = zmsTestInitializer.createPolicyObject(testDomainName, "Policy5", "Role2",
                "AccesS", testDomainName + ":https://*.ATHENZ.com/*", AssertionEffect.ALLOW);
        policy5.setCaseSensitive(true);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, "Policy5", zmsTestInitializer.getAuditRef(), false, policy5);

        // user1 and user3 have access to UPDATE/resource1

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        Principal principal2 = principalAuthority.authenticate("v=U1;d=user;n=user2;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx2 = zmsTestInitializer.createResourceContext(principal2);
        Principal principal3 = principalAuthority.authenticate("v=U1;d=user;n=user3;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx3 = zmsTestInitializer.createResourceContext(principal3);

        // user1 and user3 have update access to resource1/resource2

        Access access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "uPDATe", testDomainName + ":resouRce1/reSource2",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "UPDATE", testDomainName + ":resource1/resource3",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "UPDATE", testDomainName + ":resource1/resource2",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "UPdATE", testDomainName + ":resoUrce1/resourCe2",
                testDomainName, null);
        assertTrue(access.getGranted());

        // all three have no access to CREATE action on resource1/resource2

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "CReATE", testDomainName + ":resOurce1/resourcE2",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "CREAtE", testDomainName + ":resOurce1/resource2",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "cREATE", testDomainName + ":resource1/resoUrce2",
                testDomainName, null);
        assertFalse(access.getGranted());

        // user2 and user3 have create access to resource2(resource3)

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "CreatE", testDomainName + ":resource2(resource3)",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "CreATE", testDomainName + ":resOUrce2(resOUrce3)",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "CrEATE", testDomainName + ":resourCe2(reSource3)",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to CREATE(*)/resource3/*

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "CreatE", testDomainName + ":resource3",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "CReATE", testDomainName + ":RESource3/TesT1",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "CReATE", testDomainName + ":resourCE3/AnotherTest",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to UPDATE(*)/resource3/*

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "UPDaTE", testDomainName + ":ResourcE3",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "UPDATE", testDomainName + ":RESOURCE3/(anotheR Value)",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "UPDaTE", testDomainName + ":resOurce3/a",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user1 and user3 have access to READ/resource6[*]/data1

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "REad", testDomainName + ":ResourCE4[TeSt1]/dAtA1",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "reaD", testDomainName + ":Resource4[test1]/dAta1",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "reaD", testDomainName + ":resouRce4[tesT another]/daTa1",
                testDomainName, null);
        assertTrue(access.getGranted());

        // user2 and user3 have access to access/https://*.athenz.com/*

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx1, "ACCess", testDomainName + ":https://Web.athenz.COM/datA",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "acCess", testDomainName + ":https://web.ATHENZ.com/data",
                testDomainName, null);
        assertTrue(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx2, "acCess", testDomainName + ":https://web.ATHENZ.org/data",
                testDomainName, null);
        assertFalse(access.getGranted());

        access = zmsTestInitializer.getZms().getAccessExt(rsrcCtx3, "acCess", testDomainName + ":https://web-store.ATHENZ.com/data/path",
                testDomainName, null);
        assertTrue(access.getGranted());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), testDomainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidateEntity() {

        int code = 400;
        final String domainName = "domain";
        final String entityName ="entity-one";
        final String nonmatchName ="entity-two";

        Entity entity = new Entity();

        // tests the condition: if (!en.equals(entity.getName()))...
        try {
            entity.setName(nonmatchName);

            zmsTestInitializer.getZms().validateEntity(domainName, entityName, entity);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), code);
        }

        // tests the condition: if (entity.getValue() == null)...
        try {
            entity.setName(ResourceUtils.entityResourceName(domainName, entityName));

            zmsTestInitializer.getZms().validateEntity(domainName, entityName, entity);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), code);
        }
    }

    @Test
    public void testValidateDomainTemplate() {
        DomainTemplate domainTemplate = new DomainTemplate();
        List<String> names = new ArrayList<>();
        names.add("vipng");
        domainTemplate.setTemplateNames(names);

        List<TemplateParam> params = new ArrayList<>();
        params.add(new TemplateParam().setName("param_name_valid").setValue("param_value_valid"));
        domainTemplate.setParams(params);

        // our validation should be successful

        zmsTestInitializer.getZms().validate(domainTemplate, "DomainTemplate", "testValidateDomainTemplate");

        // now let's add an invalid entry

        params.add(new TemplateParam().setName("param_name_invalid.test").setValue("param_value_valid"));
        try {
            zmsTestInitializer.getZms().validate(domainTemplate, "DomainTemplate", "testValidateDomainTemplate");
            fail();
        } catch (ResourceException ignored) {
        }

        // remove the second element and add another with invalid value

        params.remove(1);
        params.add(new TemplateParam().setName("param_name_valid").setValue("param_value_invalid(again)"));
        try {
            zmsTestInitializer.getZms().validate(domainTemplate, "DomainTemplate", "testValidateDomainTemplate");
            fail();
        } catch (ResourceException ignored) {
        }
    }

    @Test
    public void testValidateRole() {
        Role role = new Role();
        role.setName("athenz:role.role1");
        List<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        role.setRoleMembers(roleMembers);

        // first validation should be successful

        zmsTestInitializer.getZms().validate(role, "Role", "testValidateRole");

        // now let's add invalid entry

        roleMembers.add(new RoleMember().setMemberName("user joe"));
        try {
            zmsTestInitializer.getZms().validate(role, "Role", "testValidateRole");
            fail();
        } catch (ResourceException ignored) {
        }

        role = new Role().setName("coretech:role.dev-team");
        roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.user1"));
        roleMembers.add(null);
        role.setRoleMembers(roleMembers);

        try {
            zmsTestInitializer.getZms().validate(role, "Role", "testValidate");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid Role"), ex.getMessage());
        }
    }

    @Test
    public void testPutEntity() {

        final String name = "entity-one";
        final String domainName = "put-entity";
        Entity entity = zmsTestInitializer.createEntityObject(domainName, name);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // add a new entity as expected

        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name, zmsTestInitializer.getAuditRef(), entity);
        Entity response = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name);
        assertNotNull(response);

        // now add entity without a name match

        try {
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "different-name", zmsTestInitializer.getAuditRef(), entity);
            fail();
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }

        // now add entity with a different domain

        try {
            entity = zmsTestInitializer.createEntityObject("unknown-domain", name);
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), "unknown-domain", name, zmsTestInitializer.getAuditRef(), entity);
            fail();
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutEntityAuthzDetails() throws JsonProcessingException {

        final String name = "zts.authorization_details_setup";
        final String domainName = "put-entity-authz-details";

        Entity entity = new Entity();
        entity.setName(ResourceUtils.entityResourceName(domainName, name));

        final String jsonData = "{\"type\":\"message_access\",\"roles\":[{\"name\":\"msg-readers\"," +
                "\"optional\":true},{\"name\":\"msg-writers\",\"optional\":false},{\"name\":" +
                "\"msg-editors\"}],\"fields\":[{\"name\":\"location\",\"optional\":true}," +
                "{\"name\":\"identifier\",\"optional\":false},{\"name\":\"resource\"}]}";
        entity.setValue(new Struct().with("data", jsonData));

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // add a new authz entity as expected

        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name, zmsTestInitializer.getAuditRef(), entity);
        Entity response = zmsTestInitializer.getZms().getEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name);
        assertNotNull(response);

        ObjectMapper jsonMapper = new ObjectMapper();
        jsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);

        AuthzDetailsEntity authzEntity = AuthzHelper.convertEntityToAuthzDetailsEntity(response);
        assertNotNull(authzEntity);

        List<AuthzDetailsField> roles = authzEntity.getRoles();
        assertNotNull(roles);
        assertEquals(roles.size(), 3);

        List<AuthzDetailsField> fields = authzEntity.getFields();
        assertNotNull(fields);
        assertEquals(fields.size(), 3);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutEntityAuthzDetailsInvalid() throws JsonProcessingException {

        final String name = "zts.authorization_details_setup";
        final String domainName = "put-entity-authz-details-invalid";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Entity entity = new Entity();
        entity.setName(ResourceUtils.entityResourceName(domainName, name));

        // first let's use attributes not present in the schema

        String jsonData = "{\"type\":\"message_access\",\"data\":\"resource\"}";
        entity.setValue(new Struct().with("data", jsonData));

        try {
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name, zmsTestInitializer.getAuditRef(), entity);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid authorization details entity object provided"));
        }

        // now let's try without required type attribute

        jsonData = "{\"roles\":[{\"name\":\"msg-readers\"," +
                "\"optional\":true},{\"name\":\"msg-writers\",\"optional\":false},{\"name\":" +
                "\"msg-editors\"}],\"fields\":[{\"name\":\"location\",\"optional\":true}," +
                "{\"name\":\"identifier\",\"optional\":false},{\"name\":\"resource\"}]}";
        entity.setValue(new Struct().with("data", jsonData));

        try {
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name, zmsTestInitializer.getAuditRef(), entity);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Authorization details entity object missing type"));
        }

        // now let's try without required role attribute

        jsonData = "{\"type\":\"message_access\",\"fields\":[{\"name\":\"location\",\"optional\":true}," +
                "{\"name\":\"identifier\",\"optional\":false},{\"name\":\"resource\"}]}";
        entity.setValue(new Struct().with("data", jsonData));

        try {
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name, zmsTestInitializer.getAuditRef(), entity);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Authorization details entity object missing roles"));
        }

        // now let's try without required fields

        jsonData = "{\"type\":\"message_access\",\"roles\":[{\"name\":\"msg-readers\"," +
                "\"optional\":true},{\"name\":\"msg-writers\",\"optional\":false},{\"name\":" +
                "\"msg-editors\"}]}";
        entity.setValue(new Struct().with("data", jsonData));

        try {
            zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, name, zmsTestInitializer.getAuditRef(), entity);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Authorization details entity object missing fields"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPublicKeyZMS() {

        zmsTestInitializer.loadServerPublicKeys(zmsTestInitializer.getZms());

        String publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", "0");
        assertNotNull(publicKey);
        assertEquals(zmsTestInitializer.getPubKey(), Crypto.ybase64(publicKey.getBytes(StandardCharsets.UTF_8)));

        publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", "1");
        assertNotNull(publicKey);
        assertEquals(zmsTestInitializer.getPubKeyK1(), Crypto.ybase64(publicKey.getBytes(StandardCharsets.UTF_8)));

        publicKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "zms", "2");
        assertNotNull(publicKey);
        assertEquals(zmsTestInitializer.getPubKeyK2(), Crypto.ybase64(publicKey.getBytes(StandardCharsets.UTF_8)));
    }

    @Test
    public void testGetPublicKeyInvalidService() {

        String pubKey = zmsTestInitializer.getZms().getPublicKey("sys.auth", "sys.auth", "0");
        assertNull(pubKey);
    }

    @Test
    public void testGetPublicKeyService() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("GetPublicKeyDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("GetPublicKeyDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "GetPublicKeyDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        String publicKey = zmsTestInitializer.getZms().getPublicKey("GetPublicKeyDom1", "Service1", "0");
        assertNull(publicKey);

        assertNull(zmsTestInitializer.getZms().getPublicKey("GetPublicKeyDom1", null, "0"));
        assertNull(zmsTestInitializer.getZms().getPublicKey("GetPublicKeyDom1", "Service1", null));

        publicKey = zmsTestInitializer.getZms().getPublicKey("GetPublicKeyDom1", "Service1", "1");
        assertNotNull(publicKey);
        assertEquals(publicKey, Crypto.ybase64DecodeString(zmsTestInitializer.getPubKeyK1()));

        publicKey = zmsTestInitializer.getZms().getPublicKey("GetPublicKeyDom1", "Service1", "2");
        assertNotNull(publicKey);
        assertEquals(publicKey, Crypto.ybase64DecodeString(zmsTestInitializer.getPubKeyK2()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "GetPublicKeyDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancy() {

        zmsTestInitializer.setupTenantDomainProviderService("AddTenancyDom1", "coretech", "storage",
                "http://localhost:8090/provider");

        Tenancy tenant = zmsTestInitializer.createTenantObject("AddTenancyDom1", "coretech.storage");
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef(), tenant);

        // now set up the tenant for the sub domain provider

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain("coretech").setService("storage")
                .setTenant("AddTenancyDom1").setRoles(roleActions)
                .setResourceGroup("set1");
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech",
                "storage", "set1", zmsTestInitializer.getAuditRef(), providerRoles);

        assertPutTenancyTest();

        // Verify domain dependency wasn't created as the provider isn't listed in the "sys.auth:role.service_providers role

        try {
            zmsTestInitializer.getZms().getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), "coretech.storage");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"coretech.storage is not a registered service provider\"}");
        }

        zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancyNoAuthorizedServiceDomainDependency() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        zmsTestInitializer.setupTenantDomainProviderService(zmsImpl, "AddTenancyDom1", "coretech", "storage",
                "http://localhost:8090/provider");

        makeServiceProviders(zmsImpl, zmsTestInitializer.getMockDomRsrcCtx(), Collections.singletonList("coretech.storage"));

        Tenancy tenant = zmsTestInitializer.createTenantObject("AddTenancyDom1", "coretech.storage");
        zmsImpl.putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef(), tenant);

        // now set up the tenant for the sub domain provider

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain("coretech").setService("storage")
                .setTenant("AddTenancyDom1").setRoles(roleActions)
                .setResourceGroup("set1");
        zmsImpl.putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech",
                "storage", "set1", zmsTestInitializer.getAuditRef(), providerRoles);

        assertPutTenancyTest();

        // Verify domain dependency wasn't created as no service token was passed

        DomainList dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), "coretech.storage");
        assertEquals(dependentDomainList.getNames().size(), 0);

        zmsImpl.deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef());

        zmsImpl.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "service_providers", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
    }

    private void assertPutTenancyTest() {
        // make sure our roles have been created

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.admin", false, false, false);
        assertNotNull(role);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.res_group.set1.admin", false, false, false);
        assertNotNull(role);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.res_group.set1.reader", false, false, false);
        assertNotNull(role);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.res_group.set1.writer", false, false, false);
        assertNotNull(role);

        // verify the policies have the correct roles

        Policy policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.admin");
        assertNotNull(policy);

        List<Assertion> assertList = policy.getAssertions();
        assertEquals(3, assertList.size());

        boolean domainAdminRoleCheck = false;
        boolean tenantAdminRoleCheck = false;
        boolean tenantUpdateCheck = false;
        for (Assertion obj : assertList) {
            assertEquals(AssertionEffect.ALLOW, obj.getEffect());
            switch (obj.getRole()) {
                case "addtenancydom1:role.admin":
                    assertEquals(obj.getAction(), "assume_role");
                    domainAdminRoleCheck = true;
                    break;
                case "addtenancydom1:role.tenancy.coretech.storage.admin":
                    if (obj.getAction().equals("assume_role")) {
                        tenantAdminRoleCheck = true;
                    } else if (obj.getAction().equals("update")) {
                        tenantUpdateCheck = true;
                    }
                    break;
            }
        }
        assertTrue(domainAdminRoleCheck);
        assertTrue(tenantAdminRoleCheck);
        assertTrue(tenantUpdateCheck);

        policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.res_group.set1.reader");
        assertNotNull(policy);

        assertList = policy.getAssertions();
        assertEquals(assertList.size(), 1);
        assertEquals(assertList.get(0).getRole(), "addtenancydom1:role.coretech.storage.res_group.set1.reader");

        policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.res_group.set1.writer");
        assertNotNull(policy);

        assertList = policy.getAssertions();
        assertEquals(assertList.size(), 1);
        assertEquals(assertList.get(0).getRole(), "addtenancydom1:role.coretech.storage.res_group.set1.writer");
    }

    @Test
    public void testPutTenancyWithoutAdmin() {

        zmsTestInitializer.setupTenantDomainProviderService("AddTenancyDom1", "coretech", "storage",
                "http://localhost:8090/provider");

        Tenancy tenant = zmsTestInitializer.createTenantObject("AddTenancyDom1", "coretech.storage", false);
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef(), tenant);

        // now set up the tenant for the sub domain provider

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain("coretech").setService("storage")
                .setTenant("AddTenancyDom1").setRoles(roleActions)
                .setResourceGroup("set1")
                .setCreateAdminRole(false);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech",
                "storage", "set1", zmsTestInitializer.getAuditRef(), providerRoles);

        // make sure tenancy admin role is not created
        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.admin", false, false, false);
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        // make sure our roles have been created
        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.res_group.set1.admin", false, false, false);
        assertNotNull(role);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.res_group.set1.reader", false, false, false);
        assertNotNull(role);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.res_group.set1.writer", false, false, false);
        assertNotNull(role);

        // make sure tenancy admin policy is not created
        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.admin");
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        Policy policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.res_group.set1.reader");
        assertNotNull(policy);

        List<Assertion> assertList = policy.getAssertions();
        assertEquals(assertList.size(), 1);
        assertEquals(assertList.get(0).getRole(), "addtenancydom1:role.coretech.storage.res_group.set1.reader");

        policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.res_group.set1.writer");
        assertNotNull(policy);

        assertList = policy.getAssertions();
        assertEquals(assertList.size(), 1);
        assertEquals(assertList.get(0).getRole(), "addtenancydom1:role.coretech.storage.res_group.set1.writer");

        zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancyWithAuthorizedService() {

        String tenantDomain = "puttenancyauthorizedservice";
        String providerService  = "storage";
        String providerDomain = "coretech";
        String provider = providerDomain + "." + providerService;

        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService, null);

        // tenant is setup so let's setup up policy to authorize access to tenants
        // without this role/policy we won't be authorized to add tenant roles
        // to the provider domain even with authorized service details

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null,
                providerDomain + "." + providerService, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        // we are going to create a principal object with authorized service
        // set to coretech.storage

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String userId = "user1";
        String unsignedCreds = "v=U1;d=user;u=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setAuthorizedService(provider);
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal, "puttenancy");

        // after this call we should have admin roles set for both provider and tenant

        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, provider);
        zmsTestInitializer.getZms().putTenancy(ctx, tenantDomain, provider, zmsTestInitializer.getAuditRef(), tenant);

        String tenantRoleInProviderDomain = assertPolicyForTenancyTests(zmsTestInitializer.getZms(), tenantDomain, providerService, provider);

        // Verify domain dependency wasn't created as the provider isn't listed in the "sys.auth:role.service_providers role

        try {
            zmsTestInitializer.getZms().getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), provider);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"coretech.storage is not a registered service provider\"}");
        }

        // now let's call delete tenancy support with the same authorized service token

        zmsTestInitializer.getZms().deleteTenancy(ctx, tenantDomain,  provider, zmsTestInitializer.getAuditRef());

        // verify that all roles and policies have been deleted

        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "tenancy." + provider + ".admin");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, tenantRoleInProviderDomain, false, false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // clean up our domains

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancyWithAuthorizedServiceDomainDependency() {

        String tenantDomain = "puttenancyauthorizedservice";
        String providerService  = "storage";
        String providerDomain = "coretech";
        String provider = providerDomain + "." + providerService;

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsTestInitializer.setupTenantDomainProviderService(zmsImpl, tenantDomain, providerDomain, providerService, null);
        makeServiceProviders(zmsImpl, zmsTestInitializer.getMockDomRsrcCtx(), Collections.singletonList("coretech.storage"));

        // tenant is setup so let's setup up policy to authorize access to tenants
        // without this role/policy we won't be authorized to add tenant roles
        // to the provider domain even with authorized service details

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null,
                providerDomain + "." + providerService, null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        // we are going to create a principal object with authorized service
        // set to coretech.storage

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String userId = "user1";
        String unsignedCreds = "v=U1;d=user;u=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setAuthorizedService(provider);
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal, "puttenancy");

        // after this call we should have admin roles set for both provider and tenant

        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, provider);
        zmsImpl.putTenancy(ctx, tenantDomain, provider, zmsTestInitializer.getAuditRef(), tenant);

        String tenantRoleInProviderDomain = assertPolicyForTenancyTests(zmsImpl, tenantDomain, providerService, provider);

        // Verify domain dependency was created

        DomainList dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), provider);
        assertEquals(dependentDomainList.getNames().size(), 1);
        assertEquals(dependentDomainList.getNames().get(0), "puttenancyauthorizedservice");

        // now let's call delete tenancy support with the same authorized service token

        zmsImpl.deleteTenancy(ctx, tenantDomain,  provider, zmsTestInitializer.getAuditRef());

        // Verify domain dependency was removed
        dependentDomainList = zmsImpl.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), provider);
        assertEquals(dependentDomainList.getNames().size(), 0);

        // verify that all roles and policies have been deleted

        try {
            zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "tenancy." + provider + ".admin");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        try {
            zmsImpl.getRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, tenantRoleInProviderDomain, false, false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // clean up our domains

        zmsImpl.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "service_providers", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    private String assertPolicyForTenancyTests(ZMSImpl zms, String tenantDomain, String providerService, String provider) {
        // make sure our policy has been created

        Policy policy = zms.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "tenancy." + provider + ".admin");
        assertNotNull(policy);

        String tenantRoleInProviderDomain = providerService + ".tenant." + tenantDomain + ".admin";

        List<Assertion> assertList = policy.getAssertions();
        assertEquals(3, assertList.size());
        boolean domainAdminRoleCheck = false;
        boolean tenantAdminRoleCheck = false;
        boolean tenantUpdateCheck = false;
        for (Assertion obj : assertList) {
            assertEquals(AssertionEffect.ALLOW, obj.getEffect());
            if (obj.getRole().equals(tenantDomain + ":role.admin")) {
                assertEquals("assume_role", obj.getAction());
                assertEquals("coretech:role.storage.tenant.puttenancyauthorizedservice.admin", obj.getResource());
                domainAdminRoleCheck = true;
            } else if (obj.getRole().equals(tenantDomain + ":role.tenancy." + provider + ".admin")) {
                if (obj.getAction().equals("assume_role")) {
                    assertEquals("coretech:role.storage.tenant.puttenancyauthorizedservice.admin", obj.getResource());
                    tenantAdminRoleCheck = true;
                } else if (obj.getAction().equals("update")) {
                    assertEquals(tenantDomain + ":tenancy." + provider, obj.getResource());
                    tenantUpdateCheck = true;
                }
            }
        }
        assertTrue(domainAdminRoleCheck);
        assertTrue(tenantAdminRoleCheck);
        assertTrue(tenantUpdateCheck);
        return tenantRoleInProviderDomain;
    }

    @Test
    public void testPutTenancyWithAuthorizedServiceMismatch() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String tenantDomain = "puttenancyauthorizedservicemismatch";
        String providerService  = "storage";
        String providerDomain = "coretech-test";
        String provider = providerDomain + "." + providerService;

        zmsTestInitializer.setupTenantDomainProviderService(zmsImpl, tenantDomain, providerDomain, providerService, null);

        // tenant is setup so let's setup up policy to authorize access to tenants
        // without this role/policy we won't be authorized to add tenant roles
        // to the provider domain even with authorized service details

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null,
                providerDomain + "." + providerService, null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        // we are going to create a principal object with authorized service
        // set to coretech.storage

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String userId = "user1";
        String unsignedCreds = "v=U1;d=user;u=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setAuthorizedService("coretech.storage"); // make provider mismatch
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal, "puttenancy");

        // this should fail since the authorized service name does not
        // match to the provider

        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, provider);
        try {
            zmsImpl.putTenancy(ctx, tenantDomain, provider, zmsTestInitializer.getAuditRef(), tenant);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // clean up our domains

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancyWithoutTenantRoles() {

        zmsTestInitializer.setupTenantDomainProviderService("AddTenancyDom1", "coretech", "storage",
                "http://localhost:8090/provider");

        Tenancy tenant = zmsTestInitializer.createTenantObject("AddTenancyDom1", "coretech.storage");
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef(), tenant);

        // make sure our roles have not been created

        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.admin", false, false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.reader", false, false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage.writer", false, false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        // verify the admin policy has been successfully created

        Policy policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.admin");
        assertNotNull(policy);

        // we should not have other policies for actions

        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.reader");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "tenancy.coretech.storage.writer");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", "coretech.storage", zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "AddTenancyDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancyInvalidService() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("providerdomaintenancy",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Tenancy tenant = new Tenancy().setDomain("sports").setService("providerdomaintenancy.api");
        try {
            zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "sports", "providerdomaintenancy.api", zmsTestInitializer.getAuditRef(), tenant);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaintenancy", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenancyMissingAuditRef() {
        String tenantDomain    = "testPutTenancyMissingAuditRef";
        String providerDomain  = "providerTestPutTenancyMissingAuditRef";
        String providerService = "storage";

        // create tenant and provider domains

        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService,
                "http://localhost:8090/provider");

        // modify the tenant domain to require auditing

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain", null, true, true, null, 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, providerDomain + "." + providerService);
        try {
            zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain + "." + providerService, null, tenant);
            fail("requesterror not thrown by putTenancy.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutTenancyMismatchObject() {
        String tenantDomain    = "testPutTenancyMismatchObject";
        String providerDomain  = "providerTestPutTenancyMismatchObject";
        String providerService = "storage";

        // create tenant and provider domains

        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService,
                "http://localhost:8090/provider");

        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain + "test", providerDomain + "." + providerService);
        try {
            zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain + "." + providerService, zmsTestInitializer.getAuditRef(), tenant);
            fail("request error not thrown by putTenancy.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteTenancy() {
        String tenantDomain    = "testDeleteTenancy";
        String providerDomain  = "providerTestDeleteTenancy";
        String providerService = "storage";
        String provService = providerDomain + "." + providerService;

        // create tenant and provider domains
        //
        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService,
                "http://localhost:8090/provider");

        // modify the tenant domain to require auditing
        //
        DomainMeta meta =
                zmsTestInitializer.createDomainMetaObject("Tenant Domain", null, true, true, null, 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef(), meta);

        String testRoleName = providerDomain + ".testrole";
        Role role = zmsTestInitializer.createRoleObject(tenantDomain, testRoleName, null, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, testRoleName, zmsTestInitializer.getAuditRef(), false, role);

        // setup tenancy
        //
        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, provService);
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, provService, zmsTestInitializer.getAuditRef(), tenant);

        try {
            zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain,  provService, zmsTestInitializer.getAuditRef());

            // verify we didn't delete a role by mistake

            assertNotNull(zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, testRoleName, false, false, false));

            // verify that all roles and policies have been deleted

            try {
                zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, provService + ".admin", false, false, false);
                fail();
            } catch (ResourceException ex) {
                assertEquals(ex.getCode(), 404);
            }

            try {
                zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, provService + ".reader", false, false, false);
                fail();
            } catch (ResourceException ex) {
                assertEquals(ex.getCode(), 404);
            }
            try {
                zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, provService + ".writer", false, false, false);
                fail();
            } catch (ResourceException ex) {
                assertEquals(ex.getCode(), 404);
            }

            try {
                zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "tenancy." + provService + ".admin");
                fail();
            } catch (ResourceException ex) {
                assertEquals(ex.getCode(), 404);
            }

            try {
                zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "tenancy." + provService + ".reader");
                fail();
            } catch (ResourceException ex) {
                assertEquals(ex.getCode(), 404);
            }

            try {
                zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "tenancy." + provService + ".writer");
                fail();
            } catch (ResourceException ex) {
                assertEquals(ex.getCode(), 404);
            }

        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteTenancyMissingService() {
        String tenantDomain    = "testDeleteTenancy";
        String providerDomain  = "providerTestDeleteTenancy";
        String providerService = "storage";
        String provService = providerDomain + "." + providerService;

        // create tenant and provider domains
        //
        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService,
                "http://localhost:8090/provider");

        // modify the tenant domain to require auditing
        //
        DomainMeta meta =
                zmsTestInitializer.createDomainMetaObject("Tenant Domain", null, true, true, null, 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef(), meta);

        // setup tenancy
        //
        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, provService);
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, provService, zmsTestInitializer.getAuditRef(), tenant);

        // delete the provider service

        zmsTestInitializer.getZms().deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, providerService, zmsTestInitializer.getAuditRef());

        try {
            zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, provService, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
            assertTrue(ex.getMessage().contains("Unable to retrieve service"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteTenancyMissingAuditRef() {
        String tenantDomain    = "testDeleteTenancyMissingAuditRef";
        String providerDomain  = "providerTestDeleteTenancyMissingAuditRef";
        String providerService = "storage";

        // create tenant and provider domains
        //
        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService,
                "http://localhost:8090/provider");

        // modify the tenant domain to require auditing
        //
        DomainMeta meta =
                zmsTestInitializer.createDomainMetaObject("Tenant Domain", null, true, true, null, 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, "enabled", zmsTestInitializer.getAuditRef(), meta);

        // setup tenancy
        //
        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomain, providerDomain + "." + providerService);
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain + "." + providerService, zmsTestInitializer.getAuditRef(), tenant);

        try {
            zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain,  providerDomain + "." + providerService, null);
            fail("requesterror not thrown by deleteTenancy.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutTenantRolesWithResourceGroup() {

        String domain = "testPutTenantRoles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        String tenantDomain = "tenantTestPutTenantRoles";
        TopLevelDomain tenantDom = zmsTestInitializer.createTopLevelDomainObject(
                tenantDomain, "Tenant Domain", "testOrg", zmsTestInitializer.getAdminUser());
        tenantDom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tenantDom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String serviceName  = "storage";
        String resourceGroup = "Group1";

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);
        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain, resourceGroup,
                zmsTestInitializer.getAuditRef(), tenantRoles);

        TenantResourceGroupRoles tRoles = zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName,
                tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(domain.toLowerCase(), tRoles.getDomain());
        assertEquals(serviceName.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenantRolesWithResourceGroupInvalidTenant() {

        String domain = "testPutTenantRoles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        String tenantDomain = "tenantTestPutTenantRoles";

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String serviceName  = "storage";
        String resourceGroup = "Group1";

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);
        try {
            zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain, resourceGroup,
                    zmsTestInitializer.getAuditRef(), tenantRoles);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (404): {code: 404, message: \"someApiMethod: Unknown tenant domain: tenanttestputtenantroles\"}");
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenantRolesWithResourceGroupEmptyRoleActions() {

        String domain = "testputtenantrolesnoroles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        String serviceName  = "storage";
        String tenantDomain = "tenantTestPutTenantRoles";
        String resourceGroup = "Group1";

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);

        try {
            zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain,
                    resourceGroup, zmsTestInitializer.getAuditRef(), tenantRoles);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainDataCheck() {

        String caller = "testGetDomainDataCheck";
        String tenantDomainName = "testGetDomainDataCheck";
        TopLevelDomain tenDom = zmsTestInitializer.createTopLevelDomainObject(tenantDomainName,
                "Test Provider Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tenDom);
        // create roles
        Role role1 = zmsTestInitializer.createRoleObject(tenantDomainName, "Role1", null, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(tenantDomainName, "Role2", null, "user.phil", "user.gil");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        // create policies
        Policy policy1 = zmsTestInitializer.createPolicyObject(tenantDomainName, "Policy1", "Role1",
                "UPDATE", tenantDomainName + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);
        Policy policy2 = zmsTestInitializer.createPolicyObject(tenantDomainName, "Policy2", "Role2",
                "READ", tenantDomainName + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy2", zmsTestInitializer.getAuditRef(), false, policy2);
        //
        // test valid setup domain
        DomainDataCheck ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(3, ddc.getPolicyCount());
        assertEquals(3, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // set valid wildcard role
        Assertion assertion = new Assertion();
        assertion.setAction("MANAGE");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(tenantDomainName + ":wildlife");
        assertion.setRole(tenantDomainName + ":role.Role1");

        Policy policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy2");
        List<Assertion> assertList = policy.getAssertions();
        assertList.add(assertion);
        policy.setAssertions(assertList);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy2", zmsTestInitializer.getAuditRef(), false, policy);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(3, ddc.getPolicyCount());
        assertEquals(4, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // test dangling policy with wildcard role
        assertion = new Assertion();
        assertion.setAction("MANAGE");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(tenantDomainName + ":wildlife");
        assertion.setRole(tenantDomainName + ":role.wild");

        policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy2");
        assertList = policy.getAssertions();
        assertList.add(assertion);
        policy.setAssertions(assertList);

        // since we can't put policy that its assertion has a non-existent role
        // we're going to access the store object directly to
        // accomplish that for our unit test
        AthenzObject.POLICY.convertToLowerCase(policy);
        zmsTestInitializer.getZms().dbService.executePutPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName.toLowerCase(), "Policy2".toLowerCase(), policy, zmsTestInitializer.getAuditRef(), caller, false);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(3, ddc.getPolicyCount());
        assertEquals(5, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertEquals(1, ddc.getDanglingPolicies().size());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // add a dangling role
        Role role3 = zmsTestInitializer.createRoleObject(tenantDomainName, "Role3", null, "user.user1", "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Role3", zmsTestInitializer.getAuditRef(), false, role3);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(3, ddc.getPolicyCount());
        assertEquals(5, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(1, ddc.getDanglingPolicies().size());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // test more dangling policies
        // create policy with assertion using unknown role
        assertion = new Assertion();
        assertion.setAction("snorkel");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(tenantDomainName + ":molokoni");
        assertion.setRole(tenantDomainName + ":role.snorkeler");

        policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy2");
        assertList = policy.getAssertions();
        assertList.add(assertion);
        policy.setAssertions(assertList);

        // since we can't put policy that its assertion has a non-existent role
        // we're going to access the store object directly to
        // accomplish that for our unit test
        AthenzObject.POLICY.convertToLowerCase(policy);
        zmsTestInitializer.getZms().dbService.executePutPolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName.toLowerCase(), "Policy2".toLowerCase(), policy, zmsTestInitializer.getAuditRef(), caller, false);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(3, ddc.getPolicyCount());
        assertEquals(6, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // create provider domain
        String provDomainTop = "testGetDomainDataCheckProvider";
        TopLevelDomain provDom = zmsTestInitializer.createTopLevelDomainObject(provDomainTop,
                "Test Provider Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), provDom);

        String provDomainSub = provDomainTop + ".sub";
        SubDomain subDom = zmsTestInitializer.createSubDomainObject("sub", provDomainTop, null, null, zmsTestInitializer.getAdminUser());
        subDom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop, zmsTestInitializer.getAuditRef(), subDom);

        // test incomplete tenancy setup
        // put tenancy for provider
        String provEndPoint = "http://localhost:8090/provider";
        String provSvc = "storage";
        ServiceIdentity service = zmsTestInitializer.createServiceObject(
                provDomainSub, provSvc, provEndPoint,
                "/usr/bin/java", "root", "users", "localhost");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub, provSvc, zmsTestInitializer.getAuditRef(), false, service);

        Tenancy tenant = zmsTestInitializer.createTenantObject(tenantDomainName, provDomainSub + "." + provSvc);
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, provDomainSub + "." + provSvc, zmsTestInitializer.getAuditRef(), tenant);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(4, ddc.getPolicyCount());
        assertEquals(9, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertTrue(ddc.getDanglingRoles().contains("role3"));
        boolean danglingPolicy1Found = false;
        boolean danglingPolicy2Found = false;
        for (DanglingPolicy danglingPolicy : ddc.getDanglingPolicies()) {
            if (danglingPolicy.getPolicyName().equals("policy2") && danglingPolicy.getRoleName().equals("wild")) {
                danglingPolicy1Found = true;
            } else if (danglingPolicy.getPolicyName().equals("policy2") && danglingPolicy.getRoleName().equals("snorkeler")) {
                danglingPolicy2Found = true;
            }
        }
        assertTrue(danglingPolicy1Found);
        assertTrue(danglingPolicy2Found);
        assertEquals(1, ddc.getProvidersWithoutTrust().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // test that now all is hunky dory between the tenant and provider
        // provider gets the trust role(s)
        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction((String) f.value()));
        }

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(provDomainSub)
                .setService(provSvc).setTenant(tenantDomainName)
                .setRoles(roleActions).setResourceGroup("set1");

        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub, provSvc, tenantDomainName,
                "set1", zmsTestInitializer.getAuditRef(), tenantRoles);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(4, ddc.getPolicyCount());
        assertEquals(9, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub);
        assertNotNull(ddc);
        assertEquals(5, ddc.getPolicyCount());
        assertEquals(5, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNotNull(ddc.getTenantsWithoutAssumeRole());

        // test provider should report tenant is missing
        // remove the assume_role policies from the tenant
        zmsTestInitializer.getZms().deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, provDomainSub + "." + provSvc, zmsTestInitializer.getAuditRef());

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub);
        assertNotNull(ddc);
        assertEquals(5, ddc.getPolicyCount());
        assertEquals(5, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertEquals(1, ddc.getTenantsWithoutAssumeRole().size());

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(3, ddc.getPolicyCount());
        assertEquals(6, ddc.getAssertionCount());
        assertEquals(2, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // test service name with resource group
        // setup up the top level domain+service with resource group
        String provSvcTop = "shelter";
        service = zmsTestInitializer.createServiceObject(
                provDomainTop, provSvcTop, provEndPoint,
                "/usr/bin/java", "root", "users", "localhost");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop, provSvcTop, zmsTestInitializer.getAuditRef(), false, service);

        TenantResourceGroupRoles tenantGroupRoles = new TenantResourceGroupRoles()
                .setDomain(provDomainTop)
                .setService(provSvcTop).setTenant(tenantDomainName)
                .setRoles(roleActions).setResourceGroup("ravers");
        // put the trust roles with resource group into top level provider domain
        // - tenant is not yet supporting the top level domain
        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop, provSvcTop, tenantDomainName, "ravers",
                zmsTestInitializer.getAuditRef(), tenantGroupRoles);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop);
        assertNotNull(ddc);
        assertEquals(5, ddc.getPolicyCount());
        assertEquals(5, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertEquals(1, ddc.getTenantsWithoutAssumeRole().size());

        // now set up the tenant for the sub domain provider
        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(provDomainSub).setService(provSvc)
                .setTenant(tenantDomainName).setRoles(roleActions)
                .setResourceGroup("ravers");
        // this sets up the assume roles in the tenant for the sub domain
        // if it is an authorized service, then it will setup the provider roles too
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, provDomainSub, provSvc,
                "ravers", zmsTestInitializer.getAuditRef(), providerRoles);

        // tenant sees that the subdomain provider isn't provisioned yet
        // for the resource group: testgetdomaindatacheckprovider.sub.storage.ravers
        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc, ddc.toString());
        assertEquals(7, ddc.getPolicyCount());
        assertEquals(12, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertEquals(1, ddc.getProvidersWithoutTrust().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // setup tenancy in the tenant domain for the provider subdomain
        zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, provDomainSub + "." + provSvc, zmsTestInitializer.getAuditRef(), tenant);

        // the subdomain provider believes it is in sync with tenant
        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub);
        assertNotNull(ddc);
        assertEquals(5, ddc.getPolicyCount());
        assertEquals(5, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNotNull(ddc.getTenantsWithoutAssumeRole());

        // but the tenant sees the sub provider is not setup
        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(7, ddc.getPolicyCount());
        assertEquals(12, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertEquals(1, ddc.getProvidersWithoutTrust().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // now set up the sub domain provider for the tenant with resource groups
        // so tenant and the sub domain provider are in sync again
        // add resource groups to provider
        tenantGroupRoles = new TenantResourceGroupRoles()
                .setDomain(provDomainSub)
                .setService(provSvc).setTenant(tenantDomainName)
                .setRoles(roleActions).setResourceGroup("ravers");
        // put the trust roles into sub domain provider
        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub, provSvc, tenantDomainName, "ravers",
                zmsTestInitializer.getAuditRef(), tenantGroupRoles);

        // now tenant sees the sub domain has provisioned it
        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(7, ddc.getPolicyCount());
        assertEquals(12, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // now set up the tenant for the top level domain provider
        // so tenant and the top level domain provider are in sync again
        providerRoles = new ProviderResourceGroupRoles()
                .setDomain(provDomainTop).setService(provSvcTop)
                .setTenant(tenantDomainName).setRoles(roleActions)
                .setResourceGroup("ravers");
        // this sets up the assume roles in the tenant for the top level domain
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, provDomainTop, provSvcTop,
                "ravers", zmsTestInitializer.getAuditRef(), providerRoles);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(11, ddc.getPolicyCount());
        assertEquals(18, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // delete the resource group tenancy support from sub domain
        // this means the tenant domain should show both the sub domain and
        // the top domain is without trust roles
        zmsTestInitializer.getZms().deleteTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), provDomainSub, provSvc,
                tenantDomainName, "ravers", zmsTestInitializer.getAuditRef());

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(11, ddc.getPolicyCount());
        assertEquals(18, ddc.getAssertionCount());
        assertEquals(1, ddc.getDanglingRoles().size());
        assertEquals(2, ddc.getDanglingPolicies().size());
        assertEquals(1, ddc.getProvidersWithoutTrust().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // delete the dangling policies and dangling role
        zmsTestInitializer.getZms().deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Policy2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Role3", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, "Role2", zmsTestInitializer.getAuditRef());

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(10, ddc.getPolicyCount());
        assertEquals(14, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertEquals(1, ddc.getProvidersWithoutTrust().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // add the tenancy support for top domain
        // - now tenant will see that it is all setup
        tenantRoles = new TenantResourceGroupRoles().setDomain(provDomainTop)
                .setService(provSvcTop).setTenant(tenantDomainName)
                .setRoles(roleActions).setResourceGroup("set1");

        zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop, provSvcTop,
                tenantDomainName, "set1", zmsTestInitializer.getAuditRef(), tenantRoles);

        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(10, ddc.getPolicyCount());
        assertEquals(14, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertEquals(1, ddc.getProvidersWithoutTrust().size());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        // delete the provider resource group roles for the sub domain provider
        // then everything in sync for this tenant
        zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, provDomainSub, provSvc,
                "ravers", zmsTestInitializer.getAuditRef());
        ddc = zmsTestInitializer.getZms().getDomainDataCheck(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName);
        assertNotNull(ddc);
        assertEquals(7, ddc.getPolicyCount());
        assertEquals(11, ddc.getAssertionCount());
        assertNull(ddc.getDanglingRoles());
        assertNull(ddc.getDanglingPolicies());
        assertNull(ddc.getProvidersWithoutTrust());
        assertNull(ddc.getTenantsWithoutAssumeRole());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop, "sub", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), provDomainTop, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetServicePrincipal() {

        PrivateKey privateKey = Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey()));
        SimpleServiceIdentityProvider provider = new SimpleServiceIdentityProvider("coretech",
                "storage", privateKey, "0");

        Principal testPrincipal = provider.getIdentity("coretech", "storage");
        assertNotNull(testPrincipal);
        ResourceContext rsrcCtxTest = zmsTestInitializer.createResourceContext(testPrincipal);
        ServicePrincipal principal = zmsTestInitializer.getZms().getServicePrincipal(rsrcCtxTest);
        assertNotNull(principal);
        assertEquals("storage", principal.getService());
        assertEquals("coretech", principal.getDomain());
    }

    @Test
    public void testGetServicePrincipalAuthorityNoAuthz() {

        PrivateKey privateKey = Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey()));
        Authority authority = new UserAuthority();
        SimpleServiceIdentityProvider provider = new SimpleServiceIdentityProvider(authority,
                "user", "test1", privateKey, "0", 3600);

        Principal testPrincipal = provider.getIdentity("user", "test1");
        assertNotNull(testPrincipal);
        ResourceContext rsrcCtxTest = zmsTestInitializer.createResourceContext(testPrincipal);
        ServicePrincipal principal = zmsTestInitializer.getZms().getServicePrincipal(rsrcCtxTest);
        assertNotNull(principal);
        assertEquals("test1", principal.getService());
        assertEquals("user", principal.getDomain());
    }

    @Test
    public void testEmitMonmetricError() {
        int errorCode = 403;
        String caller = "forbiddenError";
        boolean isEmitMonmetricError;

        // negative tests
        isEmitMonmetricError = ZMSUtils.emitMonmetricError(errorCode, null);
        assertFalse(isEmitMonmetricError);

        isEmitMonmetricError = ZMSUtils.emitMonmetricError(errorCode, "");
        assertFalse(isEmitMonmetricError);

        isEmitMonmetricError = ZMSUtils.emitMonmetricError(0, caller);
        assertFalse(isEmitMonmetricError);

        isEmitMonmetricError = ZMSUtils.emitMonmetricError(-100, caller);
        assertFalse(isEmitMonmetricError);

        // positive tests
        isEmitMonmetricError = ZMSUtils.emitMonmetricError(errorCode, caller);
        assertTrue(isEmitMonmetricError);

        isEmitMonmetricError = ZMSUtils.emitMonmetricError(errorCode, " " + caller + " ");
        assertTrue(isEmitMonmetricError);
    }

    @Test
    public void testValidateRoleBasedAccessCheckTrustDomain() {
        assertFalse(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(Collections.emptyList(), "trustdomain",
                "domain1", "domain1"));
    }

    @Test
    public void testValidateRoleBasedAccessCheckMismatchNames() {

        List<String> roles = new ArrayList<>();
        roles.add("readers");
        assertFalse(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(roles, null, "domain1", "domain2"));

        roles = new ArrayList<>();
        roles.add("domain1:role.readers");
        roles.add("domain2:role.readers");
        assertFalse(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(roles, null, "domain1", "domain1"));
    }

    @Test
    public void testValidateRoleBasedAccessCheckValid() {
        assertTrue(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(Collections.emptyList(), null, "domain1", "domain1"));

        List<String> roles = new ArrayList<>();
        roles.add("readers");
        assertTrue(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(roles, null, "domain1", "domain1"));

        roles = new ArrayList<>();
        roles.add("domain1:role.readers");
        roles.add("domain1:role.writers");
        assertTrue(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(roles, null, "domain1", "domain1"));
        assertTrue(zmsTestInitializer.getZms().validateRoleBasedAccessCheck(roles, null, "domain1", "domain2"));
    }

    @Test
    public void testIsVirtualDomain() {

        assertTrue(zmsTestInitializer.getZms().isVirtualDomain("user.user1"));
        assertTrue(zmsTestInitializer.getZms().isVirtualDomain("user.user2"));
        assertTrue(zmsTestInitializer.getZms().isVirtualDomain("user.user1.sub1"));
        assertTrue(zmsTestInitializer.getZms().isVirtualDomain("user.user1.sub2.sub3"));

        assertFalse(zmsTestInitializer.getZms().isVirtualDomain("user"));
        assertFalse(zmsTestInitializer.getZms().isVirtualDomain("usertest"));
        assertFalse(zmsTestInitializer.getZms().isVirtualDomain("coretech.api"));
    }

    @Test
    public void testHasExceededVirtualSubDomainLimitUnderLimitOneLevel() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "2");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        SubDomain dom = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        assertFalse(zmsTest.hasExceededVirtualSubDomainLimit("user.user1"));

        dom = zmsTestInitializer.createSubDomainObject("sub1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        assertFalse(zmsTest.hasExceededVirtualSubDomainLimit("user.user1"));

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testHasExceededVirtualSubDomainLimitOverLimitOneLevel() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "2");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        SubDomain dom = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub2", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        assertTrue(zmsTest.hasExceededVirtualSubDomainLimit("user.user1"));

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testHasExceededVirtualSubDomainLimitUnderLimitMultipleLevel() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "3");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        SubDomain dom = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        assertFalse(zmsTest.hasExceededVirtualSubDomainLimit("user.user1"));

        dom = zmsTestInitializer.createSubDomainObject("sub1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub2", "user.user1.sub1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        assertFalse(zmsTest.hasExceededVirtualSubDomainLimit("user.user1.sub1"));

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1", "sub2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testHasExceededVirtualSubDomainLimitOverLimitMultipleLevel() {

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "2");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        SubDomain dom = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        Domain resDom = zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        dom = zmsTestInitializer.createSubDomainObject("sub2", "user.user1.sub1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        resDom = zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1", zmsTestInitializer.getAuditRef(), dom);
        assertNotNull(resDom);

        assertTrue(zmsTest.hasExceededVirtualSubDomainLimit("user.user1.sub1"));
        assertTrue(zmsTest.hasExceededVirtualSubDomainLimit("user.user1"));

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.sub1", "sub2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "sub1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
    }

    @Test
    public void testGetNormalizedMemberNoSplit() {

        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user.user"), "user.user");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user.user2"), "user.user2");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user.user1"), "user.user1");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("coretech.storage"), "coretech.storage");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user1"), "user1");
    }

    @Test
    public void testGetNormalizedMemberInvalidFormat() {

        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user:user:user1"), "user:user:user1");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user:"), "user:");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("coretech:storage:api"), "coretech:storage:api");
    }

    @Test
    public void testGetNormalizedMemberUsersWithSplit() {

        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user.user"), "user.user");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user.user2"), "user.user2");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("user.user1"), "user.user1");
    }

    @Test
    public void testGetNormalizedMemberServiceWithSplit() {

        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("coretech.storage"), "coretech.storage");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("weather.storage.api"), "weather.storage.api");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("weather.entity.api"), "weather.entity.api");
        assertEquals(zmsTestInitializer.getZms().normalizeDomainAliasUser("weather.storage.service.*"), "weather.storage.service.*");
    }

    @Test
    public void testGetNormalizedMemberAliasDomain() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.userDomainAlias = null;
        zmsImpl.userDomainAliasPrefix = null;

        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1"), "user-alias.user1");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1.svc"), "user-alias.user1.svc");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user1"), "user.user1");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user1.svc"), "user.user1.svc");

        zmsImpl.userDomainAlias = "user-alias";
        zmsImpl.userDomainAliasPrefix = "user-alias.";
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1"), "user.user1");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1.svc"), "user-alias.user1.svc");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user1"), "user.user1");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user1.svc"), "user.user1.svc");

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testNormalizeRoleMembersCombined() {

        ArrayList<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user.jane"));
        roleMembers.add(new RoleMember().setMemberName("coretech.storage"));
        roleMembers.add(new RoleMember().setMemberName("coretech.storage"));
        roleMembers.add(new RoleMember().setMemberName("weather.storage"));
        roleMembers.add(new RoleMember().setMemberName("weather.api.access"));

        ArrayList<String> membersList = new ArrayList<>();
        membersList.add("coretech.storage");
        membersList.add("user.john");

        Role role = zmsTestInitializer.createRoleObject("TestRole", "Role1", null, roleMembers);
        role.setMembers(membersList);

        zmsTestInitializer.getZms().normalizeRoleMembers(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 6);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("user.john");
        checkList.add("weather.api.access");
        checkList.add("coretech.storage");
        checkList.add("weather.storage");
        zmsTestInitializer.checkRoleMember(checkList, members);
    }

    @Test
    public void testNormalizeRoleMembersInvalid() {

        ArrayList<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe"));
        roleMembers.add(new RoleMember().setMemberName("user2"));

        Role role = zmsTestInitializer.createRoleObject("TestRole", "Role1", null, roleMembers);
        zmsTestInitializer.getZms().normalizeRoleMembers(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user2");
        zmsTestInitializer.checkRoleMember(checkList, members);
    }

    @Test
    public void testHasExceededListLimitNullLimit() {
        assertFalse(zmsTestInitializer.getZms().hasExceededListLimit(null, 10));
    }

    @Test
    public void testHasExceededListLimitNotValidLimit() {
        assertFalse(zmsTestInitializer.getZms().hasExceededListLimit(0, 10));
        assertFalse(zmsTestInitializer.getZms().hasExceededListLimit(-1, 10));
    }

    @Test
    public void testHasExceededListLimitYes() {
        assertTrue(zmsTestInitializer.getZms().hasExceededListLimit(10, 11));
    }

    @Test
    public void testHasExceededListLimitNo() {
        assertFalse(zmsTestInitializer.getZms().hasExceededListLimit(10, 9));
        assertFalse(zmsTestInitializer.getZms().hasExceededListLimit(10, 10));
    }

    @Test
    public void testVerifyServicePublicKeysNoKeys() {

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName("ServiceAddInvalidCertDom1", "Service1"));

        // New Service need not have any public keys
        assertTrue(zmsTestInitializer.getZms().verifyServicePublicKeys(service));
    }

    @Test
    public void testVerifyServicePublicKeysInvalidPublicKeys() {

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName("ServiceDom1", "Service1"));

        List<PublicKeyEntry> publicKeyList = new ArrayList<>();
        PublicKeyEntry publicKeyEntry1 = new PublicKeyEntry();
        publicKeyEntry1.setKey("LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTk");
        publicKeyEntry1.setId("1");
        publicKeyList.add(publicKeyEntry1);
        service.setPublicKeys(publicKeyList);

        assertFalse(zmsTestInitializer.getZms().verifyServicePublicKeys(service));
    }

    @Test
    public void testVerifyServicePublicKeyInvalidPublicKey() {
        assertFalse(zmsTestInitializer.getZms().verifyServicePublicKey("LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1B"));
        assertFalse(zmsTestInitializer.getZms().verifyServicePublicKey("LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTk"));
        assertFalse(zmsTestInitializer.getZms().verifyServicePublicKey(zmsTestInitializer.getPrivKeyK1()));
        assertFalse(zmsTestInitializer.getZms().verifyServicePublicKey(zmsTestInitializer.getPrivKeyK2()));
    }

    @Test
    public void testVerifyServicePublicKeyValidPublicKey() {
        assertTrue(zmsTestInitializer.getZms().verifyServicePublicKey(zmsTestInitializer.getPubKeyK1()));
        assertTrue(zmsTestInitializer.getZms().verifyServicePublicKey(zmsTestInitializer.getPubKeyK2()));
    }

    @Test
    public void testVerifyServicePublicKeysValidKeysOnly() {
        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceAddDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        assertTrue(zmsTestInitializer.getZms().verifyServicePublicKeys(service));
    }

    @Test
    public void testIsValidUserTokenRequestNoAuthority() {
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature");
        assertFalse(zmsTestInitializer.getZms().isValidUserTokenRequest(principal, "user1"));
    }

    @Test
    public void testIsValidUserTokenRequestNotuserAuthority() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature",
                0, principalAuthority);

        assertFalse(zmsTestInitializer.getZms().isValidUserTokenRequest(principal, "user1"));
    }

    @Test
    public void testIsValidUserTokenRequestNullPrincipal() {
        assertFalse(zmsTestInitializer.getZms().isValidUserTokenRequest(null, "user1"));
    }

    @Test
    public void testMatchPrincipalInRoleStdMemberMatch() {

        Role role = zmsTestInitializer.createRoleObject("weather",  "Role", null, "user.user2", null);
        assertTrue(zmsTestInitializer.getZms().matchPrincipalInRole(role, null, "user.user2", null));
    }

    @Test
    public void testMatchPrincipalInRoleStdMemberNoMatch() {

        Role role = zmsTestInitializer.createRoleObject("weather",  "Role", null, "user.user2", null);
        assertFalse(zmsTestInitializer.getZms().matchPrincipalInRole(role, null, "user.user23", null));
    }

    @Test
    public void testMatchPrincipalInRoleNoDelegatedTrust() {
        Role role = zmsTestInitializer.createRoleObject("weather",  "Role", null);
        assertFalse(zmsTestInitializer.getZms().matchPrincipalInRole(role, null, null, null));
        assertFalse(zmsTestInitializer.getZms().matchPrincipalInRole(role, null, null, "weather"));
    }

    @Test
    public void testMatchPrincipalInRoleDelegatedTrustNoMatch() {
        Role role = zmsTestInitializer.createRoleObject("weather",  "Role", "coretech_not_present");
        assertFalse(zmsTestInitializer.getZms().matchPrincipalInRole(role, "Role", "user.user1", "coretech_not_present"));
    }

    @Test
    public void testMatchPrincipalInRoleDelegatedTrustMatch() {

        String domainName = "coretechtrust";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user2");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "trust", "coretechtrust:role.role1",
                false, "ASSUME_ROLE", "weather:role.role1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().dbService.executePutPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "trust",
                policy, zmsTestInitializer.getAuditRef(), "unitTest", false);

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user1", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user2", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role = zmsTestInitializer.createRoleObject("weather",  "role1", domainName);
        assertTrue(zmsTestInitializer.getZms().matchPrincipalInRole(role, "weather:role.role1", "user.user1", "coretechtrust"));
        assertFalse(zmsTestInitializer.getZms().matchPrincipalInRole(role, "weather:role.role1", "user.user1", "coretechtrust2"));
        assertFalse(zmsTestInitializer.getZms().matchPrincipalInRole(role, "weather:role.role1", "user.user3", "coretechtrust"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestNoCollection() {

        String domainName = "listrequest";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        zmsTestInitializer.getZms().dbService.executeDeletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", zmsTestInitializer.getAuditRef(), "unittest");

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listPolicies(domainName));
        assertNull(zmsTestInitializer.getZms().processListRequest(null, null, names));
        assertEquals(names.size(), 0);
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestCollectionEmpty() {

        String domainName = "listrequest";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().dbService.executeDeleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", zmsTestInitializer.getAuditRef(), "unittest");

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        assertNull(zmsTestInitializer.getZms().processListRequest(null, null, names));
        assertEquals(names.size(), 0);
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestSkipNoMatch() {

        String domainName = "listrequestskipnomatch";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        assertNull(zmsTestInitializer.getZms().processListRequest(null, "role4", names));

        // our response is going to get the admin role

        assertEquals(4, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("role1"));
        assertTrue(names.contains("role2"));
        assertTrue(names.contains("role3"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestSkipMatch() {

        String domainName = "listrequestskipmatch";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        assertNull(zmsTestInitializer.getZms().processListRequest(null, "role2", names));
        assertEquals(names.size(), 1);
        assertTrue(names.contains("role3"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestLimitExceeded() {

        String domainName = "listrequestlimitexceeded";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        String next = zmsTestInitializer.getZms().processListRequest(2, null, names);
        assertEquals("role1", next);
        assertEquals(2, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("role1"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestLimitNotExceeded() {

        String domainName = "listrequestlimitnotexceeded";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        zmsTestInitializer.getZms().processListRequest(5, null, names);

        // make sure to account for the admin role

        assertEquals(4, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("role1"));
        assertTrue(names.contains("role2"));
        assertTrue(names.contains("role3"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestLimitAndSkip() {

        String domainName = "listrequestlimitandskip";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role4 = zmsTestInitializer.createRoleObject(domainName,  "role4", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role4",
                role4, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role5 = zmsTestInitializer.createRoleObject(domainName,  "role5", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role5",
                role5, zmsTestInitializer.getAuditRef(), "unittest", false);

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        String next = zmsTestInitializer.getZms().processListRequest(2, "role2", names);
        assertEquals(next, "role4");
        assertEquals(names.size(), 2);
        assertTrue(names.contains("role3"));
        assertTrue(names.contains("role4"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testProcessListRequestLimitAndSkipLessThanLimitLeft() {

        String domainName = "listrequestlimitskiplessthanlimitleft";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.user");
        zmsTestInitializer.getZms().dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(), ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org",
                true, null, 0, null, 0), adminUsers, null, zmsTestInitializer.getAuditRef());

        Role role1 = zmsTestInitializer.createRoleObject(domainName,  "role1", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1",
                role1, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role2 = zmsTestInitializer.createRoleObject(domainName,  "role2", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2",
                role2, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role3 = zmsTestInitializer.createRoleObject(domainName,  "role3", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3",
                role3, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role4 = zmsTestInitializer.createRoleObject(domainName,  "role4", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role4",
                role4, zmsTestInitializer.getAuditRef(), "unittest", false);

        Role role5 = zmsTestInitializer.createRoleObject(domainName,  "role5", null, "user.user", null);
        zmsTestInitializer.getZms().dbService.executePutRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role5",
                role5, zmsTestInitializer.getAuditRef(), "unittest", false);

        List<String> names = new ArrayList<>(zmsTestInitializer.getZms().dbService.listRoles(domainName));
        assertNull(zmsTestInitializer.getZms().processListRequest(2, "role4", names));
        assertEquals(names.size(), 1);
        assertTrue(names.contains("role5"));
        zmsTestInitializer.getZms().dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), "unittest");
    }

    @Test
    public void testAccessInvalidResourceDomain() {
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature");
        try {
            zmsTestInitializer.getZms().access("read", "domain:invalid:entity", principal, null);
            fail();
        } catch (com.yahoo.athenz.common.server.rest.ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testHasAccessInvalidRoleTokenAccess() {

        final String domainName = "coretech";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<String> authRoles = new ArrayList<>();
        authRoles.add("role1");
        Principal principal = SimplePrincipal.create(domainName, "v=U1;d=user;n=user1;s=signature", authRoles, null);
        assertNotNull(principal);
        AthenzDomain domain = zmsTestInitializer.getZms().retrieveAccessDomain(domainName, principal);
        assertEquals(zmsTestInitializer.getZms().hasAccess(domain, "read", domainName + ":entity", principal, "trustdomain"),
                AccessStatus.DENIED_INVALID_ROLE_TOKEN);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testAccessNotFoundDomain() {
        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature");
        try {
            zmsTestInitializer.getZms().access("read", "domain_not_found:entity", principal, null);
            fail();
        } catch (com.yahoo.athenz.common.server.rest.ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testHasAccessValidMember() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("HasAccessDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("HasAccessDom1", "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "HasAccessDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("HasAccessDom1", "Policy1", "Role1",
                "UPDATE", "HasAccessDom1:resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "HasAccessDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        // user1 and user3 have access to UPDATE/resource1

        Principal principal1 = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature");
        AthenzDomain domain = zmsTestInitializer.getZms().retrieveAccessDomain("hasaccessdom1", principal1);

        assertEquals(zmsTestInitializer.getZms().hasAccess(domain, "update", "hasaccessdom1:resource1",
                principal1, null), AccessStatus.ALLOWED);

        Principal principal3 = SimplePrincipal.create("user", "user3", "v=U1;d=user;n=user3;s=signature");
        assertEquals(zmsTestInitializer.getZms().hasAccess(domain, "update", "hasaccessdom1:resource1",
                principal3, null), AccessStatus.ALLOWED);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "HasAccessDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testHasAccessInValidMember() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("HasAccessDom2",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("HasAccessDom2", "Role1", null, "user.user1",
                "user.user3");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "HasAccessDom2", "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Policy policy1 = zmsTestInitializer.createPolicyObject("HasAccessDom2", "Policy1", "Role1",
                "UPDATE", "HasAccessDom2:resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "HasAccessDom2", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        // user2 does not have access to UPDATE/resource1

        Principal principal2 = SimplePrincipal.create("user", "user2", "v=U1;d=user;n=user2;s=signature");

        // this is internal zms function so the values passed have already been converted to lower
        // case so we need to handle the test case accordingly.

        AthenzDomain domain = zmsTestInitializer.getZms().retrieveAccessDomain("hasaccessdom2", principal2);
        assertEquals(AccessStatus.DENIED, zmsTestInitializer.getZms().hasAccess(domain, "update",
                "hasaccessdom2:resource1", principal2, null));
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "HasAccessDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testEvaluateAccessNoAssertions() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = new Role().setName("coretech:role.role1");
        domain.getRoles().add(role);
        Policy policy = new Policy().setName("coretech:policy.policy1");
        domain.getPolicies().add(policy);
        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, null, null, null, null, null, zmsTestInitializer.getMockDomRestRsrcCtx().principal()), AccessStatus.DENIED);
    }

    @Test
    public void testEvaluateAccessAssertionDeny() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = zmsTestInitializer.createRoleObject("coretech", "role1", null, "user.user1", null);
        domain.getRoles().add(role);

        Policy policy = new Policy().setName("coretech:policy.policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.DENY);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);
        domain.getPolicies().add(policy);

        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, "user.user1", "read", "coretech:resource1",
                null, null, zmsTestInitializer.getMockDomRestRsrcCtx().principal()), AccessStatus.DENIED);
    }

    @Test
    public void testEvaluateAccessAssertionDenyCaseSensitive() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = zmsTestInitializer.createRoleObject("coretech", "role1", null, "user.user1", null);
        domain.getRoles().add(role);

        Policy policy = new Policy().setName("coretech:policy.policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("ReaD");
        assertion.setEffect(AssertionEffect.DENY);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);
        domain.getPolicies().add(policy);

        ZMSImpl spiedZms = Mockito.spy(zmsTestInitializer.getZms());
        assertEquals(spiedZms.evaluateAccess(domain, "user.user1", "read", "coretech:resource1",
                null, null, zmsTestInitializer.getMockDomRestRsrcCtx().principal()), AccessStatus.DENIED);

        // Verify that it was denied by explicit "Deny" assertion and not because no match was found
        verify(spiedZms, times(1)).matchPrincipal(
                eq(domain.getRoles()),
                eq("^coretech:role\\.role1$"),
                eq("user.user1"),
                eq(null));
    }

    @Test
    public void testEvaluateAccessAssertionAllow() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = zmsTestInitializer.createRoleObject("coretech", "role1", null, "user.user1", null);
        domain.getRoles().add(role);

        Policy policy = new Policy().setName("coretech:policy.policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);
        domain.getPolicies().add(policy);

        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, "user.user1", "read", "coretech:resource1", null, null, zmsTestInitializer.getMockDomRestRsrcCtx().principal()), AccessStatus.ALLOWED);
    }

    @Test
    public void testEvaluateAccessAssertionAllowNotActive() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = zmsTestInitializer.createRoleObject("coretech", "role1", null, "user.user1", null);
        domain.getRoles().add(role);

        // we have valid policy that would match however we have the
        // active flag set to false so the policy will be skipped

        Policy policy = new Policy().setName("coretech:policy.policy1").setActive(false);
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);
        domain.getPolicies().add(policy);

        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, "user.user1", "read", "coretech:resource1", null, null, zmsTestInitializer.getMockDomRestRsrcCtx().principal()), AccessStatus.DENIED);
    }

    @Test
    public void testEvaluateAccessMtlsRestricted() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = zmsTestInitializer.createRoleObject("coretech", "role1", null, "user.user1", null);
        domain.getRoles().add(role);

        Policy policy = new Policy().setName("coretech:policy.policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);
        domain.getPolicies().add(policy);

        Authority certificateAuthority = new CertificateAuthority();
        String unsignedCreds = "v=U1;d=user;n=user2";
        final Principal rsrcPrince = SimplePrincipal.create("user", "user2",
                unsignedCreds + ";s=signature", 0, certificateAuthority);
        assertNotNull(rsrcPrince);

        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, "user.user1", "read", "coretech:resource1", null, null, rsrcPrince),
                AccessStatus.ALLOWED);
        ((SimplePrincipal)rsrcPrince).setMtlsRestricted(true);
        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, "user.user1", "read", "coretech:resource1", null, null, rsrcPrince),
                AccessStatus.DENIED);
    }

    @Test
    public void testEvaluateAccessAssertionAllowCaseSensitive() {

        AthenzDomain domain = new AthenzDomain("coretech");
        Role role = zmsTestInitializer.createRoleObject("coretech", "role1", null, "user.user1", null);
        domain.getRoles().add(role);

        Policy policy = new Policy().setName("coretech:policy.policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("ReaD");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);
        domain.getPolicies().add(policy);

        assertEquals(zmsTestInitializer.getZms().evaluateAccess(domain, "user.user1", "read", "coretech:resource1", null, null, zmsTestInitializer.getMockDomRestRsrcCtx().principal()), AccessStatus.ALLOWED);
    }

    @Test
    public void testHasExceededDepthLimitNullLimit() {
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(null, "domain"));
    }

    @Test
    public void testHasExceededDepthLimitNotValidLimit() {
        assertTrue(zmsTestInitializer.getZms().hasExceededDepthLimit(-1, "domain"));
        assertTrue(zmsTestInitializer.getZms().hasExceededDepthLimit(-1, "domain.sub1"));
    }

    @Test
    public void testHasExceededDepthLimitYes() {
        assertTrue(zmsTestInitializer.getZms().hasExceededDepthLimit(0, "domain.sub1"));
        assertTrue(zmsTestInitializer.getZms().hasExceededDepthLimit(1, "domain.sub1.sub2"));
        assertTrue(zmsTestInitializer.getZms().hasExceededDepthLimit(1, "domain.sub1.sub2.sub3"));
        assertTrue(zmsTestInitializer.getZms().hasExceededDepthLimit(2, "domain.sub1.sub2.sub3"));
    }

    @Test
    public void testHasExceededDepthLimitNo() {
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(1, "domain.sub1"));
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(2, "domain.sub1"));
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(2, "domain.sub1.sub2"));
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(3, "domain.sub1.sub2"));
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(3, "domain.sub1.sub2.sub3"));
        assertFalse(zmsTestInitializer.getZms().hasExceededDepthLimit(4, "domain.sub1.sub2.sub3"));
    }

    @Test
    public void testIsZMSServiceYes() {

        assertTrue(zmsTestInitializer.getZms().isZMSService("sys.auth", "zms"));
        assertTrue(zmsTestInitializer.getZms().isZMSService("sys.Auth", "ZMS"));
        assertTrue(zmsTestInitializer.getZms().isZMSService("SYS.AUTH", "ZMS"));
    }

    @Test
    public void testIsZMSServiceNo() {

        assertFalse(zmsTestInitializer.getZms().isZMSService("sys.auth2", "zms"));
        assertFalse(zmsTestInitializer.getZms().isZMSService("sys.auth", "zts"));
    }

    @Test
    public void testRetrieveServiceIdentityInvalidServiceName() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceRetrieveDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceRetrieveDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceRetrieveDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceRetrieveDom1", "Service");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceRetrieveDom1", "Service2");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
        try {
            zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceRetrieveDom1", "Service11");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceRetrieveDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testRetrieveServiceIdentityValid() {

        String domainName = "serviceretrievedom2";
        String serviceName = "service1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(domainName,
                serviceName, "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Service1", zmsTestInitializer.getAuditRef(), false, service);

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, serviceName);
        assertNotNull(serviceRes);
        assertEquals(serviceRes.getName(), domainName + "." + serviceName);
        assertEquals(serviceRes.getExecutable(), "/usr/bin/java");
        assertEquals(serviceRes.getGroup(), "users");
        assertEquals(serviceRes.getUser(), "root");

        // provider endpoint is a system meta attribute so we shouldn't saved it
        assertNull(serviceRes.getProviderEndpoint());

        List<String> hosts = serviceRes.getHosts();
        assertNotNull(hosts);
        assertEquals(hosts.size(), 1);
        assertEquals(hosts.get(0), "host1");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderRoleActionPolicyNotFound() {

        String domainName = "coretech";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        addRoleNeededForTest(domainName, "role1");
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");

        Policy policy = new Policy().setName("coretech:policy.provider");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "provider", zmsTestInitializer.getAuditRef(), false, policy);

        assertEquals(zmsTestInitializer.getZms().getProviderRoleAction(domainName, "policy1"), "");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderRoleActionAssertionNoMatch() {

        String domainName = "coretech";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        addRoleNeededForTest(domainName, "Role1");
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.role1");

        Policy policy = new Policy().setName("coretech:policy.provider");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "provider", zmsTestInitializer.getAuditRef(), false, policy);

        assertEquals(zmsTestInitializer.getZms().getProviderRoleAction(domainName, "provider"), "");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderRoleActionNoAssertions() {

        String domainName = "coretech";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = new Policy().setName("coretech:policy.provider");
        policy.setAssertions(new ArrayList<>());

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "provider", zmsTestInitializer.getAuditRef(), false, policy);

        assertEquals(zmsTestInitializer.getZms().getProviderRoleAction(domainName, "provider"), "");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderRoleActionAssertionActionNull() {

        String domainName = "coretech";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Assertion assertion = new Assertion();
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.provider");

        Policy policy = new Policy().setName("coretech:policy.provider");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "provider", zmsTestInitializer.getAuditRef(), false, policy);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        assertEquals(zmsTestInitializer.getZms().getProviderRoleAction(domainName, "provider"), "");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderRoleActionValid() {

        String domainName = "coretech";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        addRoleNeededForTest(domainName, "provider");
        Assertion assertion = new Assertion();
        assertion.setAction("read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coretech:*");
        assertion.setRole("coretech:role.provider");

        Policy policy = new Policy().setName("coretech:policy.provider");
        policy.setAssertions(new ArrayList<>());
        policy.getAssertions().add(assertion);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "provider", zmsTestInitializer.getAuditRef(), false, policy);

        assertEquals(zmsTestInitializer.getZms().getProviderRoleAction(domainName, "provider"), "read");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListDomains() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ListDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("ListDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().listDomains(null, null, null, null, 0, false);
        assertNotNull(domList);

        assertTrue(domList.getNames().contains("ListDom1".toLowerCase()));
        assertTrue(domList.getNames().contains("ListDom2".toLowerCase()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListDomainsParamsLimit() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("LimitDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("LimitDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().listDomains(1, null, null, null, 0, false);
        assertEquals(1, domList.getNames().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "LimitDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "LimitDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListDomainsParamsSkip() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SkipDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("SkipDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject("SkipDom3",
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        DomainList domList = zmsTestInitializer.getZms().listDomains(null, null, null, null, 0, false);
        int size = domList.getNames().size();
        assertTrue(size > 3);

        // ask for only for 2 domains back
        domList = zmsTestInitializer.getZms().listDomains(2, null, null, null, 0, false);
        assertEquals(domList.getNames().size(), 2);

        // ask for the remaining domains
        DomainList remList = zmsTestInitializer.getZms().listDomains(null, domList.getNext(), null, null, 0, false);
        assertEquals(remList.getNames().size(), size - 2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SkipDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SkipDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SkipDom3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListDomainsParamsPrefix() {

        String noPrefixDom = "noprefixdom1";
        String prefixDom = "prefixdom2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(noPrefixDom,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(prefixDom,
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainList domList = zmsTestInitializer.getZms().listDomains(null, null, "prefix", null, 0, false);

        assertFalse(domList.getNames().contains(noPrefixDom));
        assertTrue(domList.getNames().contains(prefixDom));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), noPrefixDom, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), prefixDom, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListDomainsParamsDepth() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("DepthDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("DepthDom2", "DepthDom1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1", zmsTestInitializer.getAuditRef(), dom2);

        SubDomain dom3 = zmsTestInitializer.createSubDomainObject("DepthDom3",
                "DepthDom1.DepthDom2", "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1.DepthDom2", zmsTestInitializer.getAuditRef(), dom3);

        DomainList domList = zmsTestInitializer.getZms().listDomains(null, null, null, 1, 0, false);

        assertTrue(domList.getNames().contains("DepthDom1".toLowerCase()));
        assertTrue(domList.getNames().contains("DepthDom1.DepthDom2".toLowerCase()));
        assertFalse(domList.getNames().contains("DepthDom1.DepthDom2.DepthDom3".toLowerCase()));

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1.DepthDom2", "DepthDom3", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1", "DepthDom2", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "DepthDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListModifiedDomains() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ListDomMod1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("ListDomMod2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainMetaList domModList = zmsTestInitializer.getZms().dbService.listModifiedDomains(0);
        assertNotNull(domModList);
        assertTrue(domModList.getDomains().size() > 1);

        boolean dom1Found = false;
        boolean dom2Found = false;
        for (Domain domName : domModList.getDomains()) {
            if (domName.getName().equalsIgnoreCase("ListDomMod1")) {
                dom1Found = true;
            } else if (domName.getName().equalsIgnoreCase("ListDomMod2")) {
                dom2Found = true;
            }
        }

        assertTrue(dom1Found);
        assertTrue(dom2Found);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDomMod1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDomMod2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testListModifiedDomainsMillis() {

        long timestamp = System.currentTimeMillis() - 1001;

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ListDomMod1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("ListDomMod2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        DomainMetaList domModList = zmsTestInitializer.getZms().dbService.listModifiedDomains(timestamp);
        assertNotNull(domModList);
        assertTrue(domModList.getDomains().size() > 1);

        boolean dom1Found = false;
        boolean dom2Found = false;
        for (Domain domName : domModList.getDomains()) {
            if (domName.getName().equalsIgnoreCase("ListDomMod1")) {
                dom1Found = true;
            } else if (domName.getName().equalsIgnoreCase("ListDomMod2")) {
                dom2Found = true;
            }
        }

        assertTrue(dom1Found);
        assertTrue(dom2Found);

        timestamp += 10000; // add 10 seconds
        domModList = zmsTestInitializer.getZms().dbService.listModifiedDomains(timestamp);
        assertNotNull(domModList);
        assertEquals(0, domModList.getDomains().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDomMod1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ListDomMod2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testVirtualHomeDomain() {

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();

        Principal principal = SimplePrincipal.create("user", "user1", "v=U1;d=user;n=user1;s=signature",
                0, principalAuthority);

        AthenzDomain virtualDomain = zmsTestInitializer.getZms().virtualHomeDomain(principal, "user.user1");
        assertNotNull(virtualDomain);

        List<Role> roles = virtualDomain.getRoles();
        assertNotNull(roles);
        Role adminRole = null;
        for (Role role : roles) {
            if (role.getName().equals("user.user1:role.admin")) {
                adminRole = role;
                break;
            }
        }
        assertNotNull(adminRole);
        List<RoleMember> roleMembers = adminRole.getRoleMembers();
        assertEquals(roleMembers.size(), 1);
        assertEquals(roleMembers.get(0).getMemberName(), "user.user1");

        List<Policy> policies = virtualDomain.getPolicies();
        assertNotNull(policies);
        Policy adminPolicy = null;
        for (Policy policy : policies) {
            if (policy.getName().equals("user.user1:policy.admin")) {
                adminPolicy = policy;
                break;
            }
        }
        assertNotNull(adminPolicy);
    }

    @Test
    public void testVirtualHomeDomainDifferentUserHome() {

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();

        Principal principal = SimplePrincipal.create("user", "john.smith", "v=U1;d=user;n=john.smith;s=signature",
                0, principalAuthority);

        AthenzDomain virtualDomain = zmsTestInitializer.getZms().virtualHomeDomain(principal, "home.john-smith");
        assertNotNull(virtualDomain);

        List<Role> roles = virtualDomain.getRoles();
        assertNotNull(roles);
        Role adminRole = null;
        for (Role role : roles) {
            if (role.getName().equals("home.john-smith:role.admin")) {
                adminRole = role;
                break;
            }
        }
        assertNotNull(adminRole);
        List<RoleMember> roleMembers = adminRole.getRoleMembers();
        assertEquals(roleMembers.size(), 1);
        assertEquals(roleMembers.get(0).getMemberName(), "user.john.smith");

        List<Policy> policies = virtualDomain.getPolicies();
        assertNotNull(policies);
        Policy adminPolicy = null;
        for (Policy policy : policies) {
            if (policy.getName().equals("home.john-smith:policy.admin")) {
                adminPolicy = policy;
                break;
            }
        }
        assertNotNull(adminPolicy);
    }

    @Test
    public void testDeletePublicKeyEntry() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelPubKeyDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceDelPubKeyDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        zmsTestInitializer.getZms().deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom1", "Service1", "1", zmsTestInitializer.getAuditRef());
        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom1", "Service1");
        List<PublicKeyEntry> keyList = serviceRes.getPublicKeys();
        boolean found = false;
        for (PublicKeyEntry entry : keyList) {
            if (entry.getId().equals("1")) {
                found = true;
                break;
            }
        }
        assertFalse(found);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePublicKeyEntryMissingAuditRef() {
        String domain = "testDeletePublicKeyEntryMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(
                domain,
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("zone1");
        keyEntry.setKey(zmsTestInitializer.getPubKeyK2());
        zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", "zone1", zmsTestInitializer.getAuditRef(), keyEntry);
        try {
            zmsTestInitializer.getZms().deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", "1", null);
            fail("requesterror not thrown by deletePublicKeyEntry.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeletePublicKeyEntryDomainNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelPubKeyDom2",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceDelPubKeyDom2",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom2", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "UnknownPublicKeyDomain", "Service1", "1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePublicKeyEntryInvalidService() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelPubKeyDom2InvalidService",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceDelPubKeyDom2InvalidService",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsImpl.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom2InvalidService",
                "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw an invalid request exception
        try {
            zmsImpl.deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom2InvalidService",
                    "Service1.Service2", "1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom2InvalidService", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePublicKeyEntryServiceNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelPubKeyDom3",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceDelPubKeyDom3",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom3", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom3", "ServiceNotFound", "1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePublicKeyEntryIdNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServiceDelPubKeyDom4",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServiceDelPubKeyDom4",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom4", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // process invalid keys

        try {
            zmsTestInitializer.getZms().deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom4", "Service1", "zone", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // make sure both 1 and 2 keys are still valid

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom4", "Service1");
        List<PublicKeyEntry> keyList = serviceRes.getPublicKeys();
        boolean foundKey1 = false;
        boolean foundKey2 = false;
        for (PublicKeyEntry entry : keyList) {
            if (entry.getId().equals("1")) {
                foundKey1 = true;
            } else if (entry.getId().equals("2")) {
                foundKey2 = true;
            }
        }
        assertTrue(foundKey1);
        assertTrue(foundKey2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServiceDelPubKeyDom4", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPublicKeyEntry() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePubKeyDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePubKeyDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry entry = zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom1", "Service1", "1");
        assertNotNull(entry);
        assertEquals(entry.getId(), "1");
        assertEquals(entry.getKey(), zmsTestInitializer.getPubKeyK1());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPublicKeyEntryInvalidService() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePubKeyDom2Invalid",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePubKeyDom2Invalid",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom2Invalid", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw an invalid request exception
        try {
            zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom2Invalid", "Service1.Service2", "1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom2Invalid", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPublicKeyEntryDomainNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePubKeyDom2",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePubKeyDom2",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom2", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "UnknownPublicKeyDomain", "Service1", "1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPublicKeyEntryServiceNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePubKeyDom3",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePubKeyDom3",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom3", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom3", "ServiceNotFound", "1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPublicKeyEntryIdNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePubKeyDom4",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePubKeyDom4",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom4", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom4", "Service1", "zone");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePubKeyDom4", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPublicKeyEntryNew() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePutPubKeyDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePutPubKeyDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("zone1");
        keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

        zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", "Service1", "zone1", zmsTestInitializer.getAuditRef(), keyEntry);

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", "Service1");
        List<PublicKeyEntry> keyList = serviceRes.getPublicKeys();
        boolean foundKey1 = false;
        boolean foundKey2 = false;
        boolean foundKeyZONE1 = false;
        for (PublicKeyEntry entry : keyList) {
            switch (entry.getId()) {
                case "1":
                    foundKey1 = true;
                    break;
                case "2":
                    foundKey2 = true;
                    break;
                case "zone1":
                    foundKeyZONE1 = true;
                    break;
            }
        }
        assertTrue(foundKey1);
        assertTrue(foundKey2);
        assertTrue(foundKeyZONE1);

        PublicKeyEntry entry = zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", "Service1", "zone1");
        assertNotNull(entry);
        assertEquals(entry.getId(), "zone1");
        assertEquals(entry.getKey(), zmsTestInitializer.getPubKeyK2());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPublicKeyEntryInvalidKey() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePutPubKeyDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePutPubKeyDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("zone1");
        keyEntry.setKey("some-invalid-key");

        try {
            zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", "Service1", "zone1", zmsTestInitializer.getAuditRef(), keyEntry);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid public key"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPublicKeyEntryMissingAuditRef() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domain = "testPutPublicKeyEntryMissingAuditRef";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(
                domain,
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsImpl.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("zone1");
        keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

        try {
            zmsImpl.putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", "zone1", null, keyEntry);
            fail("requesterror not thrown by putPublicKeyEntry.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutPublicKeyEntryInvalidService() {

        String domain = "testPutPublicKeyEntryInvalidService";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        ServiceIdentity service = zmsTestInitializer.createServiceObject(
                domain,
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("zone1");
        keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

        try {
            zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), domain, "Service1.Service2", "zone1", null, keyEntry);
            fail("requesterror not thrown by putPublicKeyEntry.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutPublicKeyEntryUpdate() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePutPubKeyDom1A",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePutPubKeyDom1A",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1A", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("1");
        keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

        zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1A", "Service1", "1", zmsTestInitializer.getAuditRef(), keyEntry);

        ServiceIdentity serviceRes = zmsTestInitializer.getZms().getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1A", "Service1");
        List<PublicKeyEntry> keyList = serviceRes.getPublicKeys();
        assertEquals(keyList.size(), 2);

        boolean foundKey1 = false;
        boolean foundKey2 = false;
        for (PublicKeyEntry entry : keyList) {
            if (entry.getId().equals("1")) {
                foundKey1 = true;
            } else if (entry.getId().equals("2")) {
                foundKey2 = true;
            }
        }

        assertTrue(foundKey1);
        assertTrue(foundKey2);

        PublicKeyEntry entry = zmsTestInitializer.getZms().getPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1A", "Service1", "1");
        assertNotNull(entry);
        assertEquals(entry.getId(), "1");
        assertEquals(entry.getKey(), zmsTestInitializer.getPubKeyK2());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom1A", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPublicKeyEntryDomainNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePutPubKeyDom2",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePutPubKeyDom2",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom2", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            PublicKeyEntry keyEntry = new PublicKeyEntry();
            keyEntry.setId("zone1");
            keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

            zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "UnknownPublicKeyDomain", "Service1", "zone1", zmsTestInitializer.getAuditRef(), keyEntry);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPublicKeyEntryServiceNotFound() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePutPubKeyDom3",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePutPubKeyDom3",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom3", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw a not found exception
        try {
            PublicKeyEntry keyEntry = new PublicKeyEntry();
            keyEntry.setId("zone1");
            keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

            zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom3", "ServiceNotFound", "zone1", zmsTestInitializer.getAuditRef(), keyEntry);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom3", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePublicKeyEntryIdNoMatch() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ServicePutPubKeyDom4",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("ServicePutPubKeyDom4",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom4", "Service1", zmsTestInitializer.getAuditRef(), false, service);

        // this should throw invalid request exception

        try {
            PublicKeyEntry keyEntry = new PublicKeyEntry();
            keyEntry.setId("zone1");
            keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

            zmsTestInitializer.getZms().putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom4", "Service1", "zone2", zmsTestInitializer.getAuditRef(), keyEntry);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "ServicePutPubKeyDom4", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testConvertToLowerCaseAssertion() {

        Assertion assertion = new Assertion();
        assertion.setAction("Read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coreTech:VIP.*");
        assertion.setRole("coretech:role.Role1");

        AthenzObject.ASSERTION.convertToLowerCase(assertion);
        assertEquals(assertion.getRole(), "coretech:role.role1");
        assertEquals(assertion.getAction(), "read");
        assertEquals(assertion.getResource(), "coretech:vip.*");

        // Check with case-sensitive flag
        new Assertion();
        assertion.setAction("Read");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("coreTech:VIP.*");
        assertion.setRole("coretech:role.Role1");
        assertion.setCaseSensitive(true);

        AthenzObject.ASSERTION.convertToLowerCase(assertion);
        assertEquals(assertion.getRole(), "coretech:role.role1");
        assertEquals(assertion.getAction(), "Read");
        assertEquals(assertion.getResource(), "coretech:VIP.*");
    }

    @Test
    public void testRemoveQuotes() {

        assertEquals(zmsTestInitializer.getZms().removeQuotes("abc"), "abc");
        assertEquals(zmsTestInitializer.getZms().removeQuotes("\"abc"), "abc");
        assertEquals(zmsTestInitializer.getZms().removeQuotes("abc\""), "abc");
        assertEquals(zmsTestInitializer.getZms().removeQuotes("\"abc\""), "abc");
        assertEquals(zmsTestInitializer.getZms().removeQuotes("\"a\"bc\""), "a\"bc");
    }

    @Test
    public void testConvertToLowerCaseList() {

        AthenzObject.LIST.convertToLowerCase(null);

        List<String> list = new ArrayList<>();
        list.add("item1");
        list.add("Item2");
        list.add("ITEM3");

        AthenzObject.LIST.convertToLowerCase(list);
        assertTrue(list.contains("item1"));
        assertTrue(list.contains("item2"));
        assertTrue(list.contains("item3"));
        assertEquals(list.size(), 3);
    }

    @Test
    public void testConvertToLowerCaseSubdomain() {

        SubDomain dom = zmsTestInitializer.createSubDomainObject("DepthDom2", "DepthDom1",
                "Test Domain2", "testOrg", "user.user3A");
        dom.setSignAlgorithm("RSA");
        AthenzObject.SUB_DOMAIN.convertToLowerCase(dom);
        assertEquals(dom.getName(), "depthdom2");
        assertEquals(dom.getParent(), "depthdom1");
        assertEquals(dom.getSignAlgorithm(), "rsa");
        assertTrue(dom.getAdminUsers().contains("user.user3a"));

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("DepthDom2", "DepthDom1",
                "Test Domain2", "testOrg", "user.user3B");
        DomainTemplateList templates = new DomainTemplateList();
        List<String> list = new ArrayList<>();
        list.add("platforms");
        list.add("vipNg");
        list.add("ATHENZ");
        templates.setTemplateNames(list);
        dom2.setTemplates(templates);
        AthenzObject.SUB_DOMAIN.convertToLowerCase(dom2);
        assertEquals(dom2.getName(), "depthdom2");
        assertEquals(dom2.getParent(), "depthdom1");
        assertTrue(dom2.getAdminUsers().contains("user.user3b"));
        templates = dom2.getTemplates();
        list = templates.getTemplateNames();
        assertEquals(3, list.size());
        assertTrue(list.contains("platforms"));
        assertTrue(list.contains("vipng"));
        assertTrue(list.contains("athenz"));
    }

    @Test
    public void testConvertToLowerCaseTopLeveldomain() {

        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject("TopLevelDomain",
                "Test Domain1", "testOrg", "user.USER3A");
        dom.setSignAlgorithm("EC");
        AthenzObject.TOP_LEVEL_DOMAIN.convertToLowerCase(dom);
        assertEquals(dom.getName(), "topleveldomain");
        assertEquals(dom.getSignAlgorithm(), "ec");
        assertTrue(dom.getAdminUsers().contains("user.user3a"));

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("TopLevelDomain",
                "Test Domain1", "testOrg", "user.USER3B");
        DomainTemplateList templates = new DomainTemplateList();
        List<String> list = new ArrayList<>();
        list.add("platforms");
        list.add("vipNg");
        list.add("ATHENZ");
        templates.setTemplateNames(list);
        dom2.setTemplates(templates);
        AthenzObject.TOP_LEVEL_DOMAIN.convertToLowerCase(dom2);
        assertEquals(dom2.getName(), "topleveldomain");
        assertTrue(dom2.getAdminUsers().contains("user.user3b"));
        templates = dom2.getTemplates();
        list = templates.getTemplateNames();
        assertEquals(3, list.size());
        assertTrue(list.contains("platforms"));
        assertTrue(list.contains("vipng"));
        assertTrue(list.contains("athenz"));
    }

    @Test
    public void testConvertToLowerCaseUserdomain() {

        UserDomain dom = zmsTestInitializer.createUserDomainObject("USER3A",
                "Test Domain1", "testOrg");
        dom.setSignAlgorithm("RSA");
        AthenzObject.USER_DOMAIN.convertToLowerCase(dom);
        assertEquals(dom.getName(), "user3a");
        assertEquals(dom.getSignAlgorithm(), "rsa");

        UserDomain dom2 = zmsTestInitializer.createUserDomainObject("USER3B",
                "Test Domain1", "testOrg");
        DomainTemplateList templates = new DomainTemplateList();
        List<String> list = new ArrayList<>();
        list.add("platforms");
        list.add("vipNg");
        list.add("ATHENZ");
        templates.setTemplateNames(list);
        dom2.setTemplates(templates);

        AthenzObject.USER_DOMAIN.convertToLowerCase(dom2);
        assertEquals(dom2.getName(), "user3b");
        templates = dom2.getTemplates();
        list = templates.getTemplateNames();
        assertEquals(3, list.size());
        assertTrue(list.contains("platforms"));
        assertTrue(list.contains("vipng"));
        assertTrue(list.contains("athenz"));
    }

    @Test
    public void testConvertToLowerCasePublicKeyEntry() {
        PublicKeyEntry keyEntry = new PublicKeyEntry().setKey("KEY").setId("ZONE1");
        AthenzObject.PUBLIC_KEY_ENTRY.convertToLowerCase(keyEntry);
        assertEquals(keyEntry.getKey(), "KEY");
        assertEquals(keyEntry.getId(), "zone1");
    }

    @Test
    public void testConvertToLowerCaseQuota() {
        Quota quota = new Quota().setName("UpperCaseDomain");
        AthenzObject.QUOTA.convertToLowerCase(quota);
        assertEquals(quota.getName(), "uppercasedomain");
    }

    @Test
    public void testConvertToLowerCaseEntity() {
        Entity entity = zmsTestInitializer.createEntityObject("Domain1", "ABcEntity");
        AthenzObject.ENTITY.convertToLowerCase(entity);
        assertEquals(entity.getName(), "domain1:entity.abcentity");
    }

    @Test
    public void testConvertToLowerCaseTemplate() {
        DomainTemplate template = new DomainTemplate();
        List<String> names = new ArrayList<>();
        names.add("Burbank");
        names.add("santa_Monica");
        names.add("playa");
        template.setTemplateNames(names);
        List<TemplateParam> params = new ArrayList<>();
        params.add(new TemplateParam().setName("Name1").setValue("value1"));
        params.add(new TemplateParam().setName("name2").setValue("Value2"));
        template.setParams(params);

        AthenzObject.DOMAIN_TEMPLATE.convertToLowerCase(template);
        assertEquals(template.getTemplateNames().size(), 3);
        assertTrue(template.getTemplateNames().contains("burbank"));
        assertTrue(template.getTemplateNames().contains("playa"));
        assertTrue(template.getTemplateNames().contains("santa_monica"));
        assertEquals(template.getParams().size(), 2);
        boolean param1Check = false;
        boolean param2Check = false;
        TemplateParam param1 = new TemplateParam().setName("name1").setValue("value1");
        TemplateParam param2 = new TemplateParam().setName("name2").setValue("value2");
        for (TemplateParam param : template.getParams()) {
            if (param.equals(param1)) {
                param1Check = true;
            } else if (param.equals(param2)) {
                param2Check = true;
            }
        }
        assertTrue(param1Check);
        assertTrue(param2Check);

        // passing null should be no-op

        AthenzObject.DOMAIN_TEMPLATE.convertToLowerCase(null);
    }

    @Test
    public void testConvertToLowerCaseTenancy() {
        Tenancy tenancy = zmsTestInitializer.createTenantObject("CoretecH", "STorage");
        List<String> groups = new ArrayList<>();
        groups.add("Burbank");
        groups.add("santa_monica");
        tenancy.setResourceGroups(groups);
        AthenzObject.TENANCY.convertToLowerCase(tenancy);
        assertEquals(tenancy.getDomain(), "coretech");
        assertEquals(tenancy.getService(), "storage");
        assertTrue(tenancy.getResourceGroups().contains("burbank"));
        assertTrue(tenancy.getResourceGroups().contains("santa_monica"));
    }

    @Test
    public void testConvertToLowerCaseDefaultAdmins() {

        List<String> adminList = new ArrayList<>();
        adminList.add("user.User1");
        adminList.add("user.user2");
        DefaultAdmins admins = new DefaultAdmins();
        admins.setAdmins(adminList);

        AthenzObject.DEFAULT_ADMINS.convertToLowerCase(admins);
        assertTrue(admins.getAdmins().contains("user.user1"));
        assertTrue(admins.getAdmins().contains("user.user2"));
    }

    @Test
    public void testConvertToLowerCaseTenantResourceGroupRolesNoActions() {

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles()
                .setDomain("coreTech").setService("storaGe")
                .setTenant("DelTenantRolesDom1").setResourceGroup("Hockey");
        AthenzObject.TENANT_RESOURCE_GROUP_ROLES.convertToLowerCase(tenantRoles);
        assertEquals(tenantRoles.getDomain(), "coretech");
        assertEquals(tenantRoles.getService(), "storage");
        assertEquals(tenantRoles.getTenant(), "deltenantrolesdom1");
        assertEquals(tenantRoles.getResourceGroup(), "hockey");
    }

    @Test
    public void testConvertToLowerCaseProviderResourceGroupRolesNoActions() {

        ProviderResourceGroupRoles tenantRoles = new ProviderResourceGroupRoles()
                .setDomain("coreTech").setService("storaGe")
                .setTenant("DelTenantRolesDom1").setResourceGroup("Hockey");
        AthenzObject.PROVIDER_RESOURCE_GROUP_ROLES.convertToLowerCase(tenantRoles);
        assertEquals(tenantRoles.getDomain(), "coretech");
        assertEquals(tenantRoles.getService(), "storage");
        assertEquals(tenantRoles.getTenant(), "deltenantrolesdom1");
        assertEquals(tenantRoles.getResourceGroup(), "hockey");
    }

    @Test
    public void testConvertToLowerCaseGroupRole() {
        Role role = zmsTestInitializer.createRoleObject("RoleDomain", "roleName", null, "user.USER1", "user.user2");
        AthenzObject.ROLE.convertToLowerCase(role);
        assertEquals(role.getName(), "roledomain:role.rolename");
        List<String> checkList = new ArrayList<>();
        checkList.add("user.user1");
        checkList.add("user.user2");
        zmsTestInitializer.checkRoleMember(checkList, role.getRoleMembers());
    }

    @Test
    public void testConvertToLowerCaseRoleMeta() {
        RoleMeta roleMeta = new RoleMeta();
        roleMeta.setNotifyRoles("role1,Role2,roLE3");
        roleMeta.setUserAuthorityFilter("attr1,ATTR2");
        roleMeta.setUserAuthorityExpiration("ElevatedClearance");
        roleMeta.setSignAlgorithm("EC");
        AthenzObject.ROLE_META.convertToLowerCase(roleMeta);
        assertEquals(roleMeta.getNotifyRoles(), "role1,role2,role3");
        assertEquals(roleMeta.getUserAuthorityFilter(), "attr1,ATTR2");
        assertEquals(roleMeta.getUserAuthorityExpiration(), "ElevatedClearance");
        assertEquals(roleMeta.getSignAlgorithm(), "ec");
    }

    @Test
    public void testConvertToLowerCaseTrustRole() {
        Role role = zmsTestInitializer.createRoleObject("RoleDomain", "roleName", "TRUSTDomain");
        AthenzObject.ROLE.convertToLowerCase(role);
        assertEquals(role.getName(), "roledomain:role.rolename");
        assertEquals(role.getTrust(), "trustdomain");
    }

    @Test
    public void testConvertToLowerCaseMembershipWithRole() {
        Membership membership = new Membership().setMemberName("user.member1").setRoleName("ROLE1");
        AthenzObject.MEMBERSHIP.convertToLowerCase(membership);
        assertEquals(membership.getMemberName(), "user.member1");
        assertEquals(membership.getRoleName(), "role1");
    }

    @Test
    public void testConvertToLowerCaseRole() {

        Role role = new Role().setName("Role1");

        List<String> list = new ArrayList<>();
        list.add("item1");
        list.add("Item2");
        list.add("ITEM3");
        role.setMembers(list);

        List<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("item1"));
        roleMembers.add(new RoleMember().setMemberName("Item2"));
        roleMembers.add(new RoleMember().setMemberName("ITEM3"));
        role.setRoleMembers(roleMembers);

        AthenzObject.ROLE.convertToLowerCase(role);

        assertEquals(role.getName(), "role1");
        list = role.getMembers();
        assertTrue(list.contains("item1"));
        assertTrue(list.contains("item2"));
        assertTrue(list.contains("item3"));
        assertEquals(list.size(), 3);

        roleMembers = role.getRoleMembers();
        assertEquals(roleMembers.size(), 3);
        boolean item1 = false;
        boolean item2 = false;
        boolean item3 = false;
        for (RoleMember member : roleMembers) {
            switch (member.getMemberName()) {
                case "item1":
                    item1 = true;
                    break;
                case "item2":
                    item2 = true;
                    break;
                case "item3":
                    item3 = true;
                    break;
            }
        }
        assertTrue(item1);
        assertTrue(item2);
        assertTrue(item3);
    }

    @Test
    public void testConvertToLowerCaseMembershipWithoutRole() {
        Membership membership = new Membership().setMemberName("user.member1");
        AthenzObject.MEMBERSHIP.convertToLowerCase(membership);
        assertEquals(membership.getMemberName(), "user.member1");
    }

    @Test
    public void testConvertToLowerCaseServciceWithKeys() {
        ServiceIdentity service = zmsTestInitializer.createServiceObject("CoreTECH", "STORage",
                "http://localhost:4080", "jetty", "user", "group", "HOST1");
        List<PublicKeyEntry> publicKeyList = new ArrayList<>();
        PublicKeyEntry publicKeyEntry1 = new PublicKeyEntry();
        publicKeyEntry1.setKey(zmsTestInitializer.getPubKeyK1());
        publicKeyEntry1.setId("ZONE1");
        publicKeyList.add(publicKeyEntry1);
        PublicKeyEntry publicKeyEntry2 = new PublicKeyEntry();
        publicKeyEntry2.setKey(zmsTestInitializer.getPubKeyK2());
        publicKeyEntry2.setId("2");
        publicKeyList.add(publicKeyEntry2);
        service.setPublicKeys(publicKeyList);
        AthenzObject.SERVICE_IDENTITY.convertToLowerCase(service);
        assertEquals(service.getName(), "coretech.storage");
        assertTrue(service.getHosts().contains("host1"));
        assertEquals(service.getPublicKeys().get(0).getId(), "zone1");
        assertEquals(service.getPublicKeys().get(1).getId(), "2");
    }

    @Test
    public void testConvertToLowerCaseTenantRoleAction() {

        TenantRoleAction roleAction = new TenantRoleAction().setRole("ReaDer").setAction("READ");

        AthenzObject.TENANT_ROLE_ACTION.convertToLowerCase(roleAction);
        assertEquals(roleAction.getAction(), "read");
        assertEquals(roleAction.getRole(), "reader");
    }

    @Test
    public void testConvertToLowerCasePolicyNoAssertion() {

        Policy policy = new Policy();
        policy.setName(ResourceUtils.policyResourceName("CoreTech", "policy"));

        AthenzObject.POLICY.convertToLowerCase(policy);
        assertEquals(policy.getName(), "coretech:policy.policy");

        policy.setName(ResourceUtils.policyResourceName("newtech", "Policy"));

        AthenzObject.POLICY.convertToLowerCase(policy);
        assertEquals(policy.getName(), "newtech:policy.policy");
    }

    @Test
    public void testConvertToLowerCasePolicyMultipleAssertion() {

        Policy policy = new Policy();
        policy.setName(ResourceUtils.policyResourceName("CoreTech", "policy"));

        Assertion assertion1 = new Assertion();
        assertion1.setAction("Read");
        assertion1.setEffect(AssertionEffect.ALLOW);
        assertion1.setResource("coreTech:VIP.*");
        assertion1.setRole("coretech:role.Role1");

        Assertion assertion2 = new Assertion();
        assertion2.setAction("UPDATE");
        assertion2.setEffect(AssertionEffect.ALLOW);
        assertion2.setResource("CoreTech:VIP.*");
        assertion2.setRole("coretech:role.RoleAB");

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion1);
        assertList.add(assertion2);

        policy.setAssertions(assertList);

        AthenzObject.POLICY.convertToLowerCase(policy);
        assertEquals(policy.getName(), "coretech:policy.policy");
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals(assertion.getRole(), "coretech:role.role1");
        assertEquals(assertion.getAction(), "read");
        assertEquals(assertion.getResource(), "coretech:vip.*");

        assertion = policy.getAssertions().get(1);
        assertEquals(assertion.getRole(), "coretech:role.roleab");
        assertEquals(assertion.getAction(), "update");
        assertEquals(assertion.getResource(), "coretech:vip.*");

        // Now check case-sensitive
        policy = new Policy();
        policy.setName(ResourceUtils.policyResourceName("CoreTech", "policy"));
        policy.setCaseSensitive(true);
        assertion1 = new Assertion();
        assertion1.setAction("Read");
        assertion1.setEffect(AssertionEffect.ALLOW);
        assertion1.setResource("coreTech:VIP.*");
        assertion1.setRole("coretech:role.Role1");

        assertion2 = new Assertion();
        assertion2.setAction("UPDATE");
        assertion2.setEffect(AssertionEffect.ALLOW);
        assertion2.setResource("CoreTech:VIP.*");
        assertion2.setRole("coretech:role.RoleAB");

        assertList = new ArrayList<>();
        assertList.add(assertion1);
        assertList.add(assertion2);

        policy.setAssertions(assertList);

        AthenzObject.POLICY.convertToLowerCase(policy);
        assertEquals(policy.getName(), "coretech:policy.policy");
        assertion = policy.getAssertions().get(0);
        assertEquals(assertion.getRole(), "coretech:role.role1");
        assertEquals(assertion.getAction(), "Read");
        assertEquals(assertion.getResource(), "coretech:VIP.*");

        assertion = policy.getAssertions().get(1);
        assertEquals(assertion.getRole(), "coretech:role.roleab");
        assertEquals(assertion.getAction(), "UPDATE");
        assertEquals(assertion.getResource(), "coretech:VIP.*");
    }

    @Test
    public void testConvertToLowerCasePolicyOneAssertion() {

        Policy policy = zmsTestInitializer.createPolicyObject("CoreTech", "NewPolicy");
        AthenzObject.POLICY.convertToLowerCase(policy);
        assertEquals(policy.getName(), "coretech:policy.newpolicy");
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals(assertion.getRole(), "coretech:role.admin");
    }

    @Test
    public void testConvertToLowerCaseDomainTemplateList() {
        DomainTemplateList templates = new DomainTemplateList();
        List<String> list = new ArrayList<>();
        list.add("platforms");
        list.add("vipNg");
        list.add("ATHENZ");
        templates.setTemplateNames(list);
        AthenzObject.DOMAIN_TEMPLATE_LIST.convertToLowerCase(templates);

        list = templates.getTemplateNames();
        assertEquals(3, list.size());
        assertTrue(list.contains("platforms"));
        assertTrue(list.contains("vipng"));
        assertTrue(list.contains("athenz"));
    }

    @Test
    public void testProviderServiceDomain() {
        assertEquals(ZMSUtils.providerServiceDomain("coretech.storage"), "coretech");
        assertEquals(ZMSUtils.providerServiceDomain("coretech.hosted.storage"), "coretech.hosted");
        assertNull(ZMSUtils.providerServiceDomain("coretech"));
        assertNull(ZMSUtils.providerServiceDomain(".coretech"));
        assertNull(ZMSUtils.providerServiceDomain("coretech."));
    }

    @Test
    public void testProviderServiceName() {
        assertEquals(ZMSUtils.providerServiceName("coretech.storage"), "storage");
        assertEquals(ZMSUtils.providerServiceName("coretech.hosted.storage"), "storage");
        assertNull(ZMSUtils.providerServiceName("coretech"));
        assertNull(ZMSUtils.providerServiceName(".coretech"));
        assertNull(ZMSUtils.providerServiceName("coretech."));
    }

    @Test
    public void testIsAuthorizedProviderServiceInvalidService() {

        // null authorized service argument

        assertFalse(zmsTestInitializer.getZms().isAuthorizedProviderService(null, "coretech", "storage", zmsTestInitializer.getMockDomRestRsrcCtx().principal()));

        // service does not match provider details

        assertFalse(zmsTestInitializer.getZms().isAuthorizedProviderService("coretech.storage", "coretech", "storage2", zmsTestInitializer.getMockDomRestRsrcCtx().principal()));
        assertFalse(zmsTestInitializer.getZms().isAuthorizedProviderService("coretech.storage", "coretech2", "storage", zmsTestInitializer.getMockDomRestRsrcCtx().principal()));

        // domain does not exist in zms

        assertFalse(zmsTestInitializer.getZms().isAuthorizedProviderService("not_present_domain.storage", "not_present_domain",
                "storage", zmsTestInitializer.getMockDomRestRsrcCtx().principal()));
    }

    @Test
    public void testIsAuthorizedProviderServiceAuthorized() {

        String tenantDomain = "AuthorizedProviderDom1";
        String providerDomain = "coretech";
        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, "storage",
                "http://localhost:8090/tableprovider");

        // tenant is setup so let's setup up policy to authorize access to tenants

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null, providerDomain + ".storage", null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        assertTrue(zmsTestInitializer.getZms().isAuthorizedProviderService(providerDomain + ".storage", providerDomain,
                "storage", zmsTestInitializer.getMockDomRestRsrcCtx().principal()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testIsAuthorizedProviderServiceNotAuthorized() {

        String tenantDomain = "AuthorizedProviderDom2";
        String providerDomain = "coretech";
        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, "storage",
                "http://localhost:8090/tableprovider");

        // tenant is setup but no policy to authorize access to tenants

        assertFalse(zmsTestInitializer.getZms().isAuthorizedProviderService(providerDomain + ".storage", providerDomain,
                "storage", zmsTestInitializer.getMockDomRestRsrcCtx().principal()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testVerifyAuthorizedServiceOperation() {

        // null authorized service means it's all good

        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation(null, "putrole");

        // our test resource json file includes two services:
        // coretech.storage - allowed for putrole and putpolicy
        // sports.hockey - not allowed for any ops

        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.storage", "putrole");
        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.storage", "putpolicy");
        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.storage", "postdomain");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.storage", "deleterole");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("sports.hockey", "putrole");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }
        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("sports.hockey", "putpolicy");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }
        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("sports.hockey", "deleterole");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }
        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("sports.hockey", "putserviceidentity");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        // ATHENZ-1528
        // Try passing along operationItem key + value to see if verification works

        // First, try with AllowAll operation
        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.newsvc", "putrole"); // putrole has no restriction. This should pass.

        // Second, try with restricted operation. Currently, putmembership only allow single operation item.
        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.newsvc", "putmembership", "role", "platforms_deployer");
        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.newsvc", "putmembership", "role", "platforms_different_deployer");
        zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.newsvc", "putmembership", "not_role", "platforms_role_deployer");

        // Third, try with restriction operation, with not-specified operation item.

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.newsvc", "putmembership", "role", "platforms_deployer_new");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.newsvc", "putmembership", "not_role", "platforms_deployer_new_new");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("coretech.storage2", "postdomain");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceOperation("media.storage", "deleterole");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }
    }

    @Test
    public void testVerifyAuthorizedServiceRolePrefixOperation() {

        // our test resource json includes the following
        // role-prefix use case
        //        "coretech.updater": {
        //            "allowedOperations": [
        //               {
        //                 "name":"putmembership",
        //                  "items": {
        //                      "role-prefix" : [
        //                          "reader.org.",
        //                          "writer.domain."
        //                      ]
        //                  }
        //              }
        //            ]

        zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation(null, "putmembership", "role1");

        // Try passing along operationItem key + value to see if verification works

        zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.updater", "putmembership", "reader.org.role1");
        zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.updater", "putmembership", "writer.domain.role1");

        // try with restricted operation. Currently, putmembership only allow single operation item.
        zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.newsvc", "putmembership", "platforms_deployer");
        zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.newsvc", "putmembership", "platforms_different_deployer");

        // Third, try with restriction operation, with not-specified operation item.

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.updater", "putmembership", "platforms_deployer_new");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.updater", "putmembership", "reader.org1.role1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceRoleOperation("coretech.newsvc", "putmembership", "platforms_deployer_new");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }
    }

    @Test
    public void testPutProviderResourceGroupRoles() {

        String tenantDomain = "putproviderresourcegrouproles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(tenantDomain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String providerService = "storage";
        String providerDomain = "coretech";
        String resourceGroup = "hockey";

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);

        ProviderResourceGroupRoles tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        // when we execute the same request, it should work without
        // rejecting the request

        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);

        tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutProviderResourceGroupMultipleRoles() {

        String tenantDomain = "putproviderresourcegroupmultipleroles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(tenantDomain, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String providerService = "storage";
        String providerDomain = "coretech";
        String resourceGroup1 = "hockey";
        String resourceGroup2 = "baseball";

        // add resource group1 roles

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup1);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup1, zmsTestInitializer.getAuditRef(), providerRoles);

        // add resource group2 roles

        providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup2);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup2, zmsTestInitializer.getAuditRef(), providerRoles);

        // verify group 1 roles

        final String roleWriter = providerDomain + "." + providerService + ".res_group." + resourceGroup1 + ".writer";
        final String roleReader = providerDomain + "." + providerService + ".res_group." + resourceGroup1 + ".reader";

        ProviderResourceGroupRoles tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup1);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup1.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        Role roleW = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, roleWriter, false, false, false);
        assertEquals(roleW.getRoleMembers().size(), 1);
        assertEquals(roleW.getRoleMembers().get(0).getMemberName(), zmsTestInitializer.getMockDomRestRsrcCtx().principal().getFullName());

        Role roleR = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, roleReader, false, false, false);
        assertEquals(roleR.getRoleMembers().size(), 1);
        assertEquals(roleR.getRoleMembers().get(0).getMemberName(), zmsTestInitializer.getMockDomRestRsrcCtx().principal().getFullName());

        // verify group 2 roles

        tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup2);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup2.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        // add an additional service to the writer action role

        final String newMember = tenantDomain + ".backend";

        Membership mbr = zmsTestInitializer.generateMembership(roleWriter, newMember);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, roleWriter, newMember, zmsTestInitializer.getAuditRef(), false, mbr);

        // now let's re-add the group 1 roles again and verify that the
        // member list is correct

        providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup1);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup1, zmsTestInitializer.getAuditRef(), providerRoles);

        roleW = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, roleWriter, false, false, false);
        assertEquals(roleW.getRoleMembers().size(), 2);

        assertTrue(zmsTestInitializer.verifyRoleMember(roleW, zmsTestInitializer.getMockDomRestRsrcCtx().principal().getFullName()));
        assertTrue(zmsTestInitializer.verifyRoleMember(roleW, newMember));

        roleR = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, roleReader, false, false, false);
        assertEquals(roleR.getRoleMembers().size(), 1);
        assertTrue(zmsTestInitializer.verifyRoleMember(roleW, zmsTestInitializer.getMockDomRestRsrcCtx().principal().getFullName()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteProviderResourceGroupRoles() {

        String tenantDomain = "deleteproviderresourcegrouproles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(tenantDomain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String providerService  = "storage";
        String providerDomain = "coretech";
        String resourceGroup = "hockey";

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);

        ProviderResourceGroupRoles tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        // now let's delete our resource group

        zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef());

        // now let's retrieve our resource group and verify we got 0 roles

        tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(0, tRoles.getRoles().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteProviderResourceGroupMultipleRoles() {

        String tenantDomain = "deleteproviderresourcegroupmultipleroles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(tenantDomain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String providerService  = "storage";
        String providerDomain = "coretech";
        String resourceGroup1 = "hockey";
        String resourceGroup2 = "baseball";

        // add resource group1 roles

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup1);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup1, zmsTestInitializer.getAuditRef(), providerRoles);

        // add resource group2 roles

        providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup2);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup2, zmsTestInitializer.getAuditRef(), providerRoles);

        // now let's delete our resource group 1

        zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup1, zmsTestInitializer.getAuditRef());

        // verify group 1 roles and it's size of 0

        ProviderResourceGroupRoles tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup1);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup1.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(0, tRoles.getRoles().size());

        // verify group 2 roles with valid size of roles

        tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup2);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup2.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());

        // now let's delete our resource group 2

        zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup2, zmsTestInitializer.getAuditRef());

        // now both get operations must return 0 for the size

        tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup1);

        assertNotNull(tRoles);
        assertEquals(0, tRoles.getRoles().size());

        tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup2);

        assertNotNull(tRoles);
        assertEquals(0, tRoles.getRoles().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderResourceGroupRoles() {

        String tenantDomain = "getproviderresourcegrouproles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(tenantDomain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String providerService  = "storage";
        String providerDomain = "coretech";
        String resourceGroup = "hockey";

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);
        zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);

        ProviderResourceGroupRoles tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(tRoles);
        assertEquals(providerDomain.toLowerCase(), tRoles.getDomain());
        assertEquals(providerService.toLowerCase(), tRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), tRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), tRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());
        List<TenantRoleAction> traList = tRoles.getRoles();
        List<String> roles = new ArrayList<>();
        for (TenantRoleAction ra : traList) {
            roles.add(ra.getRole());
        }
        assertTrue(roles.contains("reader"));
        assertTrue(roles.contains("writer"));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderResourceGroupRolesInvalid() {

        String tenantDomain = "getproviderresourcegrouprolesinvalid";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(tenantDomain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        // all invalid input with provider domain, resource and resource group
        // just returns an empty list for role actions.

        ProviderResourceGroupRoles tRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, "test1", "invalid", "hockey");

        assertNotNull(tRoles);
        assertEquals(0, tRoles.getRoles().size());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetProviderResourceGroupRolesUnknownDomain() {

        // all invalid input with provider domain, resource and resource group
        // just returns an empty list for role actions but for invalid tenant
        // domain we get 404 exception

        try {
            zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "unknown-domain",
                    "test1", "invalid", "hockey");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testPutProviderResourceGroupRolesWithAuthorizedService() {

        String tenantDomain = "providerresourcegrouprolesauthorizedservice";
        String providerService  = "storage";
        String providerDomain = "coretech";
        String resourceGroup = "hockey";

        zmsTestInitializer.setupTenantDomainProviderService(tenantDomain, providerDomain, providerService,
                "http://localhost:8090/tableprovider");

        // tenant is setup so let's setup up policy to authorize access to tenants
        // without this role/policy we won't be authorized to add tenant roles
        // to the provider domain even with authorized service details

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null,
                providerDomain + "." + providerService, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        // now we're going to setup our provider role call

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);

        // we are going to create a principal object with authorized service
        // set to coretech.storage

        String userId = "user1";
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature",
                0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setAuthorizedService("coretech.storage");
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal, "putproviderresourcegrouproles");

        // after this call we should have roles set for both provider and tenant

        zmsTestInitializer.getZms().putProviderResourceGroupRoles(ctx, tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);

        assertPutProviderResourceGroupRolesWithAuthorizedService(zmsTestInitializer.getZms(), tenantDomain, providerService, providerDomain, resourceGroup, ctx);

        // Verify domain dependency wasn't created as the provider isn't listed in the "sys.auth:role.service_providers role

        try {
            zmsTestInitializer.getZms().getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain + "." + providerService);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"" + providerDomain + "." + providerService + " is not a registered service provider\"}");
        }

        // now we're going to delete the provider roles using the standard
        // resource object without the authorized service. in this case
        // the provider roles are going to be deleted but not the tenant
        // roles from the provider domain

        zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain,
                providerService, resourceGroup, zmsTestInitializer.getAuditRef());

        // so for tenant we're going to 0 provider roles

        ProviderResourceGroupRoles pRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(pRoles);
        assertEquals(0, pRoles.getRoles().size());

        // but for provider we're still going to get full set of roles

        TenantResourceGroupRoles tRoles = zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain,
                providerService, tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(2, tRoles.getRoles().size());

        // now this time we're going to delete with the principal with the
        // authorized service token

        zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(ctx, tenantDomain, providerDomain,
                providerService, resourceGroup, zmsTestInitializer.getAuditRef());

        // so for tenant we're still going to 0 provider roles

        pRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(ctx,
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(pRoles);
        assertEquals(0, pRoles.getRoles().size());

        // and for provider we're now going to get 0 tenant roles as well

        tRoles = zmsTestInitializer.getZms().getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain,
                providerService, tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(0, tRoles.getRoles().size());

        // clean up our domains

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutProviderResourceGroupRolesWithAuthorizedServiceDomainDependency() {

        String tenantDomain = "providerresourcegrouprolesauthorizedservice";
        String providerService  = "storage";
        String providerDomain = "coretech";
        String resourceGroup = "hockey";

        ZMSImpl zms = zmsTestInitializer.zmsInit();

        zmsTestInitializer.setupTenantDomainProviderService(zms, tenantDomain, providerDomain, providerService,
                "http://localhost:8090/tableprovider");

        makeServiceProviders(zms, zmsTestInitializer.getMockDomRsrcCtx(), Collections.singletonList("coretech.storage"));

        // tenant is setup so let's setup up policy to authorize access to tenants
        // without this role/policy we won't be authorized to add tenant roles
        // to the provider domain even with authorized service details

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null,
                providerDomain + "." + providerService, null);
        zms.putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zms.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        // now we're going to setup our provider role call

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);

        // we are going to create a principal object with authorized service
        // set to coretech.storage

        String userId = "user1";
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature",
                0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setAuthorizedService("coretech.storage");
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal, "putproviderresourcegrouproles");

        // after this call we should have roles set for both provider and tenant

        zms.putProviderResourceGroupRoles(ctx, tenantDomain, providerDomain, providerService,
                resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);

        assertPutProviderResourceGroupRolesWithAuthorizedService(zms, tenantDomain, providerService, providerDomain, resourceGroup, ctx);

        // Verify domain dependency was created

        DomainList dependentDomainList = zms.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain + "." + providerService);
        assertEquals(dependentDomainList.getNames().size(), 1);
        assertEquals(dependentDomainList.getNames().get(0), "providerresourcegrouprolesauthorizedservice");

        // now we're going to delete the provider roles using the standard
        // resource object without the authorized service. in this case
        // the provider roles are going to be deleted but not the tenant
        // roles from the provider domain

        zms.deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain,
                providerService, resourceGroup, zmsTestInitializer.getAuditRef());

        // so for tenant we're going to 0 provider roles

        ProviderResourceGroupRoles pRoles = zms.getProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(),
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(pRoles);
        assertEquals(0, pRoles.getRoles().size());

        // but for provider we're still going to get full set of roles

        TenantResourceGroupRoles tRoles = zms.getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain,
                providerService, tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(2, tRoles.getRoles().size());

        // Also, domain dependency remains until the resources are removed from the provider

        dependentDomainList = zms.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain + "." + providerService);
        assertEquals(dependentDomainList.getNames().size(), 1);
        assertEquals(dependentDomainList.getNames().get(0), "providerresourcegrouprolesauthorizedservice");

        // now this time we're going to delete with the principal with the
        // authorized service token

        zms.deleteProviderResourceGroupRoles(ctx, tenantDomain, providerDomain,
                providerService, resourceGroup, zmsTestInitializer.getAuditRef());

        // so for tenant we're still going to 0 provider roles

        pRoles = zmsTestInitializer.getZms().getProviderResourceGroupRoles(ctx,
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(pRoles);
        assertEquals(0, pRoles.getRoles().size());

        // and for provider we're now going to get 0 tenant roles as well

        tRoles = zms.getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain,
                providerService, tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(0, tRoles.getRoles().size());

        // Domain dependency will be removed

        dependentDomainList = zms.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain + "." + providerService);
        assertEquals(dependentDomainList.getNames().size(), 0);

        // Finally, delete the tenant
        RsrcCtxWrapper serviceProviderCtx = zmsTestInitializer.contextWithMockPrincipal("deleteTenant", providerDomain, providerService);
        zms.deleteTenant(serviceProviderCtx, providerDomain, providerService, tenantDomain, zmsTestInitializer.getAuditRef());
        dependentDomainList = zms.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain + "." + providerService);
        assertEquals(dependentDomainList.getNames().size(), 0);

        // clean up our domains

        zms.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "service_providers", zmsTestInitializer.getAuditRef());
        zms.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zms.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    private void assertPutProviderResourceGroupRolesWithAuthorizedService(ZMSImpl zms, String tenantDomain, String providerService, String providerDomain, String resourceGroup, ResourceContext ctx) {
        ProviderResourceGroupRoles pRoles = zms.getProviderResourceGroupRoles(ctx,
                tenantDomain, providerDomain, providerService, resourceGroup);

        assertNotNull(pRoles);
        assertEquals(providerDomain.toLowerCase(), pRoles.getDomain());
        assertEquals(providerService.toLowerCase(), pRoles.getService());
        assertEquals(tenantDomain.toLowerCase(), pRoles.getTenant());
        assertEquals(resourceGroup.toLowerCase(), pRoles.getResourceGroup());
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), pRoles.getRoles().size());
        List<TenantRoleAction> traList = pRoles.getRoles();
        List<String> roles = new ArrayList<>();
        for (TenantRoleAction ra : traList) {
            roles.add(ra.getRole());
        }
        assertTrue(roles.contains("reader"));
        assertTrue(roles.contains("writer"));

        // now get the tenant roles for the provider

        TenantResourceGroupRoles tRoles = zms.getTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain,
                providerService, tenantDomain, resourceGroup);
        assertNotNull(tRoles);
        assertEquals(tRoles.getDomain(), providerDomain);
        assertEquals(tRoles.getService(), providerService);
        assertEquals(tRoles.getTenant(), tenantDomain);
        assertEquals(tRoles.getResourceGroup(), resourceGroup);
        assertEquals(ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS.size(), tRoles.getRoles().size());
        traList = pRoles.getRoles();
        roles = new ArrayList<>();
        for (TenantRoleAction ra : traList) {
            roles.add(ra.getRole());
        }
        assertTrue(roles.contains("reader"));
        assertTrue(roles.contains("writer"));
    }

    @Test
    public void testProviderResourceGroupRolesWithAuthorizedServiceNoAccess() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String tenantDomain = "provrscgrprolesauthorizedservicenoaccess";
        String providerService  = "index";
        String providerDomain = "coretech";
        String resourceGroup = "hockey";

        zmsTestInitializer.setupTenantDomainProviderService(zmsImpl, tenantDomain, providerDomain, providerService,
                "http://localhost:8090/tableprovider");

        // tenant is setup so let's setup up policy to authorize access to tenants
        // without this role/policy we won't be authorized to add tenant roles
        // to the provider domain even with authorized service details

        Role role = zmsTestInitializer.createRoleObject(providerDomain, "self_serve", null,
                providerDomain + "." + providerService, null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = zmsTestInitializer.createPolicyObject(providerDomain, "self_serve",
                "self_serve", "update", providerDomain + ":tenant.*", AssertionEffect.ALLOW);
        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, "self_serve", zmsTestInitializer.getAuditRef(), false, policy);

        // now we're going to setup our provider role call

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.RESOURCE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);

        // we are going to create a principal object with authorized service
        // set to coretech.index

        String userId = "user1";
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=" + userId;
        Principal principal = SimplePrincipal.create("user", userId, unsignedCreds + ";s=signature",
                0, principalAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setUnsignedCreds(unsignedCreds);
        ((SimplePrincipal) principal).setAuthorizedService("coretech.index");
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal);

        // this call should return an exception since we can't execute
        // the putproviderresourcegrouproles operation with our chained token

        try {
            zmsImpl.putProviderResourceGroupRoles(ctx, tenantDomain, providerDomain, providerService,
                    resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);
            fail();
        } catch (ResourceException ex) {
            assertEquals(403, ex.getCode());
        }

        // clean up our domains

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutProviderRolesWithResourceGroupEmptyRoleActions() {

        String domain = "testputproviderrolesnoroles";
        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(
                domain, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        List<TenantRoleAction> roleActions = new ArrayList<>();
        String serviceName  = "storage";
        String tenantDomain = "tenantTestPutTenantRoles";
        String resourceGroup = "Group1";

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles().setDomain(domain)
                .setService(serviceName).setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);

        try {
            zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), domain, serviceName, tenantDomain,
                    resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domain, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testOptionsUserTokenInvalidService() {

        // null service must return 400

        try {
            zmsTestInitializer.getZms().optionsUserToken(zmsTestInitializer.getMockDomRsrcCtx(), "user1", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // empty service must return 400

        try {
            zmsTestInitializer.getZms().optionsUserToken(zmsTestInitializer.getMockDomRsrcCtx(), "user1", "");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // unknown registered service must return 400
        try {
            zmsTestInitializer.getZms().optionsUserToken(zmsTestInitializer.getMockDomRsrcCtx(), "user1", "unknown_service_name");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // in a list all services must be valid - any invalid must return 400

        try {
            zmsTestInitializer.getZms().optionsUserToken(zmsTestInitializer.getMockDomRsrcCtx(), "user1", "coretech.storage,unknown_service_name");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }
    }

    @Test
    public void testOptionsUserToken() {
        HttpServletRequest servletRequest = new MockHttpServletRequest();
        HttpServletResponse servletResponse = new MockHttpServletResponse();
        ResourceContext ctx = new RsrcCtxWrapper(null, servletRequest, servletResponse, null, false,
                null, new Object(), "apiName", false);

        zmsTestInitializer.getZms().optionsUserToken(ctx, "user", "coretech.storage");
        assertEquals("GET", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_METHODS));
        assertEquals("2592000", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_MAX_AGE));
        assertEquals("true", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS));

        // using default values where we'll get back null for origin and no allow headers

        assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_ORIGIN));
        assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));
    }

    @Test
    public void testOptionsUserTokenRequestHeaders() {
        MockHttpServletRequest servletRequest = new MockHttpServletRequest();
        MockHttpServletResponse servletResponse = new MockHttpServletResponse();
        ResourceContext ctx = new RsrcCtxWrapper(null, servletRequest, servletResponse, null, false,
                null, new Object(), "apiName", false);

        String origin = "https://zms.origin.athenzcompany.com";
        String requestHeaders = "X-Forwarded-For,Content-Type";
        servletRequest.addHeader(ZMSConsts.HTTP_ORIGIN, origin);
        servletRequest.addHeader(ZMSConsts.HTTP_ACCESS_CONTROL_REQUEST_HEADERS, requestHeaders);

        // this time we're going to try with multiple services

        zmsTestInitializer.getZms().optionsUserToken(ctx, "user", "coretech.storage,coretech.index");
        assertEquals("GET", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_METHODS));
        assertEquals("2592000", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_MAX_AGE));
        assertEquals("true", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS));
        assertEquals(origin, servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_ORIGIN));

        // because X-Forwarded-For is not in the request header list,
        // our header list will be null

        assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));

        // now let's add the header to the list and we should get
        // back our header list

        zmsTestInitializer.getZms().corsRequestHeaderList.add("x-forwarded-for");
        zmsTestInitializer.getZms().optionsUserToken(ctx, "user", "coretech.storage,coretech.index");

        assertEquals(requestHeaders, servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));
        zmsTestInitializer.getZms().corsRequestHeaderList.remove("x-forwarded-for");
    }

    @Test
    public void testSetStandardCORSHeaders() {
        HttpServletRequest servletRequest = new MockHttpServletRequest();
        HttpServletResponse servletResponse = new MockHttpServletResponse();
        ResourceContext ctx = new RsrcCtxWrapper(null, servletRequest, servletResponse, null, false,
                null, new Object(), "apiName", false);

        zmsTestInitializer.getZms().setStandardCORSHeaders(ctx);
        assertEquals("true", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS));

        // using default values where we'll get back null for origin and no allow headers

        assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_ORIGIN));
        assertNull(servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));
    }

    @Test
    public void testSetStandardCORSHeadersRequestHeaders() {
        MockHttpServletRequest servletRequest = new MockHttpServletRequest();
        MockHttpServletResponse servletResponse = new MockHttpServletResponse();
        ResourceContext ctx = new RsrcCtxWrapper(null, servletRequest, servletResponse, null, false,
                null, new Object(), "apiName", true);

        String origin = "https://zms.origin.athenzcompany.com";
        String requestHeaders = "X-Forwarded-For,Content-Type";
        servletRequest.addHeader(ZMSConsts.HTTP_ORIGIN, origin);
        servletRequest.addHeader(ZMSConsts.HTTP_ACCESS_CONTROL_REQUEST_HEADERS, requestHeaders);

        zmsTestInitializer.getZms().corsRequestHeaderList.add("x-forwarded-for");
        zmsTestInitializer.getZms().setStandardCORSHeaders(ctx);
        assertEquals("true", servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_CREDENTIALS));

        assertEquals(origin, servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_ORIGIN));
        assertEquals(requestHeaders, servletResponse.getHeader(ZMSConsts.HTTP_ACCESS_CONTROL_ALLOW_HEADERS));
        zmsTestInitializer.getZms().corsRequestHeaderList.remove("x-forwarded-for");
    }

    @Test
    public void testVerifyProviderEndpoint() {

        // http successful test cases (localhost or *.athenzcompany.com)
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://localhost"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://localhost:4080"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://localhost:4080/"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://localhost:4080/test1"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.athenzcompany.com"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.athenzcompany.com:4080"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.athenzcompany.com:4080/"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.athenzcompany.com:4080/test1"));

        // https successful test cases (localhost or *.athenzcompany.com)
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://localhost"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://localhost:4080"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://localhost:4080/"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://localhost:4080/test1"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://host1.athenzcompany.com"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://host1.athenzcompany.com:4080"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://host1.athenzcompany.com:4080/"));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("https://host1.athenzcompany.com:4080/test1"));

        // class successful test case
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint("class://com.yahoo.athenz.zmsTestInitializer.getZms().ZMS"));

        // http invalid cases - not *.athenzcompany.com
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.server.com"));
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.server.com:4080"));
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.server.com:4080/"));
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.server.yahoo:4080/test1"));
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.athenz.server.com:4080/test1"));
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("http://host1.athenz.ch:4080/test1"));

        // non-http scheme test cases
        assertFalse(zmsTestInitializer.getZms().verifyProviderEndpoint("file://host1.athenz.com"));

        // other null and empty test cases
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint(null));
        assertTrue(zmsTestInitializer.getZms().verifyProviderEndpoint(""));
    }

    @Test
    public void testGetServerTemplateList() {

        ServerTemplateList list = zmsTestInitializer.getZms().getServerTemplateList(zmsTestInitializer.getMockDomRsrcCtx());
        assertNotNull(list);
        assertTrue(list.getTemplateNames().contains("platforms"));
        assertTrue(list.getTemplateNames().contains("vipng"));
        assertTrue(list.getTemplateNames().contains("user_provisioning"));
    }

    @Test
    public void testGetTemplateInvalid() {
        try {
            zmsTestInitializer.getZms().getTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "platforms test");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        try {
            zmsTestInitializer.getZms().getTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "invalid");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }
    }

    @Test
    public void testGetTemplate() {

        Template template = zmsTestInitializer.getZms().getTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "user_provisioning");
        assertNotNull(template);

        List<Role> roles = template.getRoles();
        assertNotNull(roles);
        assertEquals(3, roles.size());

        Role userRole = null;
        Role superuserRole = null;
        Role openstackReadersRole = null;
        for (Role role : roles) {
            switch (role.getName()) {
                case "_domain_:role.user":
                    userRole = role;
                    break;
                case "_domain_:role.superuser":
                    superuserRole = role;
                    break;
                case "_domain_:role.openstack_readers":
                    openstackReadersRole = role;
                    break;
            }
        }

        assertNotNull(userRole);
        assertNotNull(superuserRole);
        assertNotNull(openstackReadersRole);

        // openstack_readers role has 2 members

        assertEquals(2, openstackReadersRole.getRoleMembers().size());
        List<String> checkList = new ArrayList<>();
        checkList.add("sys.builder");
        checkList.add("sys.openstack");
        zmsTestInitializer.checkRoleMember(checkList, openstackReadersRole.getRoleMembers());

        // other roles have no members

        assertNull(userRole.getRoleMembers());
        assertNull(superuserRole.getRoleMembers());

        List<Policy> policies = template.getPolicies();
        assertNotNull(policies);
        assertEquals(3, policies.size());

        Policy userPolicy = null;
        Policy superuserPolicy = null;
        Policy openstackReadersPolicy = null;
        for (Policy policy : policies) {
            switch (policy.getName()) {
                case "_domain_:policy.user":
                    userPolicy = policy;
                    break;
                case "_domain_:policy.superuser":
                    superuserPolicy = policy;
                    break;
                case "_domain_:policy.openstack_readers":
                    openstackReadersPolicy = policy;
                    break;
            }
        }

        assertNotNull(userPolicy);
        assertNotNull(superuserPolicy);
        assertNotNull(openstackReadersPolicy);

        assertEquals(1, userPolicy.getAssertions().size());
        assertEquals(1, superuserPolicy.getAssertions().size());
        assertEquals(2, openstackReadersPolicy.getAssertions().size());

        template = zmsTestInitializer.getZms().getTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "vipng");
        assertNotNull(template);

        template = zmsTestInitializer.getZms().getTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "platforms");
        assertNotNull(template);

        template = zmsTestInitializer.getZms().getTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "VipNg");
        assertNotNull(template);

        assertEquals(10, template.getMetadata().getLatestVersion().intValue());
        assertEquals("2020-04-28T00:00:00.000Z", template.getMetadata().timestamp.toString());
        assertEquals("Vipng template", template.getMetadata().description);
        assertEquals("", template.getMetadata().keywordsToReplace);
        assertFalse(template.getMetadata().getAutoUpdate());
    }

    @Test
    public void testValidateSolutionTemplates() {
        final String caller = "testValidateDomainTemplates";
        List<String> templateNames = new ArrayList<>();
        templateNames.add("platforms");
        zmsTestInitializer.getZms().validateSolutionTemplates(templateNames, caller);

        templateNames.add("vipng");
        zmsTestInitializer.getZms().validateSolutionTemplates(templateNames, caller);

        templateNames.add("athenz");
        try {
            zmsTestInitializer.getZms().validateSolutionTemplates(templateNames, caller);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
            assertTrue(ex.getMessage().contains("athenz"));
        }
    }

    @Test
    public void testPutDomainTemplateInvalidTemplate() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domainName = "templatelist-invalid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // first no templates

        DomainTemplate templateList = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templateList.setTemplateNames(templates);

        try {
            zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("No templates specified"));
        }

        // then invalid template

        templates.add("test validate");
        try {
            zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateNotFoundTemplate() {

        String domainName = "templatelist-invalid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainTemplate templateList = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add("InvalidTemplate");
        templateList.setTemplateNames(templates);
        try {
            zmsTestInitializer.getZms().putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateSingleTemplate() {

        String domainName = "templatelist-single";

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysNetwork = zmsTestInitializer.createSubDomainObject("network", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysNetwork);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainTemplate domTemplate = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add("vipng");
        domTemplate.setTemplateNames(templates);

        zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), domTemplate);

        // verify that our role collection includes the roles defined in template

        List<String> names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(3, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));

        Role role = zmsImpl.dbService.getRole(domainName, "vip_admin", false, false, false);
        assertEquals(domainName + ":role.vip_admin", role.getName());
        assertNull(role.getTrust());
        assertTrue(role.getRoleMembers().isEmpty());

        role = zmsImpl.dbService.getRole(domainName, "sys_network_super_vip_admin", false, false, false);
        assertEquals(domainName + ":role.sys_network_super_vip_admin", role.getName());
        assertEquals("sys.network", role.getTrust());

        // verify that our policy collections includes the policies defined in the template

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(3, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));

        Policy policy = zmsImpl.dbService.getPolicy(domainName, "vip_admin", null);
        assertEquals(domainName + ":policy.vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(domainName + ":role.vip_admin", assertion.getRole());
        assertEquals(domainName + ":vip*", assertion.getResource());

        policy = zmsImpl.dbService.getPolicy(domainName, "sys_network_super_vip_admin", null);
        assertEquals(domainName + ":policy.sys_network_super_vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(domainName + ":role.sys_network_super_vip_admin", assertion.getRole());
        assertEquals(domainName + ":vip*", assertion.getResource());

        // delete an applied service template
        //
        String templateName = "vipng";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName, zmsTestInitializer.getAuditRef());

        // verify that our role collection does NOT include the roles defined in template

        names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "network", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateMultipleTemplates() {

        String domainName = "templatelist-multiple";

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysNetwork = zmsTestInitializer.createSubDomainObject("network", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysNetwork);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainTemplate domTemplate = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add("vipng");
        templates.add("platforms");
        templates.add("user_provisioning");
        domTemplate.setTemplateNames(templates);

        zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), domTemplate);

        // verify that our role collection includes the roles defined in template

        List<String> names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(7, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));
        assertTrue(names.contains("platforms_deployer"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        Role role = zmsImpl.dbService.getRole(domainName, "openstack_readers", false, false, false);
        assertEquals(domainName + ":role.openstack_readers", role.getName());
        assertNull(role.getTrust());
        assertEquals(2, role.getRoleMembers().size());

        List<String> checkList = new ArrayList<>();
        checkList.add("sys.builder");
        checkList.add("sys.openstack");
        zmsTestInitializer.checkRoleMember(checkList, role.getRoleMembers());

        role = zmsImpl.dbService.getRole(domainName, "sys_network_super_vip_admin", false, false, false);
        assertEquals(domainName + ":role.sys_network_super_vip_admin", role.getName());
        assertEquals("sys.network", role.getTrust());

        // verify that our policy collections includes the policies defined in the template

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(7, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));
        assertTrue(names.contains("platforms_deploy"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        Policy policy = zmsImpl.dbService.getPolicy(domainName, "vip_admin", null);
        assertEquals(domainName + ":policy.vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(domainName + ":role.vip_admin", assertion.getRole());
        assertEquals(domainName + ":vip*", assertion.getResource());

        policy = zmsImpl.dbService.getPolicy(domainName, "sys_network_super_vip_admin", null);
        assertEquals(domainName + ":policy.sys_network_super_vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(domainName + ":role.sys_network_super_vip_admin", assertion.getRole());
        assertEquals(domainName + ":vip*", assertion.getResource());

        // delete applied service template
        //
        String templateName = "vipng";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName, zmsTestInitializer.getAuditRef());

        // verify that our role collection does NOT include the vipng roles defined in template

        names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(5, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("platforms_deployer"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(5, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("platforms_deploy"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        // delete applied service template
        //
        templateName = "platforms";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName, zmsTestInitializer.getAuditRef());

        // verify that our role collection does NOT include the platforms roles defined in template

        names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(4, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(4, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        // delete last applied service template
        //
        templateName = "user_provisioning";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName, zmsTestInitializer.getAuditRef());

        // verify that our role collection does NOT include the user_provisioning roles defined in template

        names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "network", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateExtInvalidTemplate() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        String domainName = "templatelist-invalid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // first no templates

        DomainTemplate templateList = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templateList.setTemplateNames(templates);

        try {
            zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("No templates specified"));
        }

        final String templateName = "test validate";
        templates.add(templateName);
        try {
            zmsImpl.putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                    zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateExtNotFoundTemplate() {

        String domainName = "templatelist-invalid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String templateName = "InvalidTemplate";
        DomainTemplate templateList = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add(templateName);
        templateList.setTemplateNames(templates);
        try {
            zmsTestInitializer.getZms().putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                    zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateExtEmptyTemplateList() {

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        String domainName = "templatelist-empty";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainTemplate templateList = new DomainTemplate();
        try {
            zmsImpl.putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "unknown",
                    zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        templateList.setTemplateNames(Collections.emptyList());
        try {
            zmsImpl.putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "unknown",
                    zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateExtMultipleTemplate() {

        String domainName = "templatelist-invalid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String templateName = "vipng";
        DomainTemplate templateList = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add(templateName);
        templates.add("pes");
        templateList.setTemplateNames(templates);
        try {
            zmsTestInitializer.getZms().putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                    zmsTestInitializer.getAuditRef(), templateList);
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainTemplateExtSingleTemplate() {

        String domainName = "templatelist-single";

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysNetwork = zmsTestInitializer.createSubDomainObject("network", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysNetwork);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String templateName = "vipng";
        DomainTemplate domTemplate = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add(templateName);
        domTemplate.setTemplateNames(templates);

        zmsImpl.putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                zmsTestInitializer.getAuditRef(), domTemplate);

        // verify that our role collection includes the roles defined in template

        List<String> names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(3, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));

        Role role = zmsImpl.dbService.getRole(domainName, "vip_admin", false, false, false);
        assertEquals(domainName + ":role.vip_admin", role.getName());
        assertNull(role.getTrust());
        assertTrue(role.getRoleMembers().isEmpty());

        role = zmsImpl.dbService.getRole(domainName, "sys_network_super_vip_admin", false, false, false);
        assertEquals(domainName + ":role.sys_network_super_vip_admin", role.getName());
        assertEquals("sys.network", role.getTrust());

        // verify that our policy collections includes the policies defined in the template

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(3, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));

        Policy policy = zmsImpl.dbService.getPolicy(domainName, "vip_admin", null);
        assertEquals(domainName + ":policy.vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(domainName + ":role.vip_admin", assertion.getRole());
        assertEquals(domainName + ":vip*", assertion.getResource());

        policy = zmsImpl.dbService.getPolicy(domainName, "sys_network_super_vip_admin", null);
        assertEquals(domainName + ":policy.sys_network_super_vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(domainName + ":role.sys_network_super_vip_admin", assertion.getRole());
        assertEquals(domainName + ":vip*", assertion.getResource());

        // delete an applied service template
        //
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                zmsTestInitializer.getAuditRef());

        // verify that our role collection does NOT include the roles defined in template

        names = zmsImpl.dbService.listRoles(domainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        names = zmsImpl.dbService.listPolicies(domainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "network", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainTemplateListInvalid() {

        try {
            zmsTestInitializer.getZms().getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), "invalid_domain name");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        try {
            zmsTestInitializer.getZms().getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), "not_found_domain_name");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }
    }

    @Test
    public void testGetDomainTemplateList() {

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        String domainName = "domaintemplatelist-valid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // initially no templates

        DomainTemplateList domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(),
                domainName);
        List<String> templates = domaintemplateList.getTemplateNames();
        assertEquals(0, templates.size());

        // add a single template

        DomainTemplate domTemplate = new DomainTemplate();
        templates = new ArrayList<>();
        templates.add("user_provisioning");
        domTemplate.setTemplateNames(templates);

        zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(),
                domTemplate);

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(1, templates.size());
        assertTrue(templates.contains("user_provisioning"));

        // add 2 templates

        domTemplate = new DomainTemplate();
        templates = new ArrayList<>();
        templates.add("user_provisioning");
        templates.add("platforms");
        domTemplate.setTemplateNames(templates);

        zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(),
                domTemplate);

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(2, templates.size());
        assertTrue(templates.contains("user_provisioning"));
        assertTrue(templates.contains("platforms"));

        // add the same set of templates again and no change in results
        domTemplate = new DomainTemplate();
        domTemplate.setTemplateNames(templates);
        zmsImpl.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(),
                domTemplate);

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(2, templates.size());
        assertTrue(templates.contains("user_provisioning"));
        assertTrue(templates.contains("platforms"));

        // delete an applied service template
        //
        String templateName = "user_provisioning";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                zmsTestInitializer.getAuditRef());

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(1, templates.size());
        assertTrue(templates.contains("platforms"));

        // delete last applied service template
        //
        templateName = "platforms";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), domainName, templateName,
                zmsTestInitializer.getAuditRef());

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        templates = domaintemplateList.getTemplateNames();
        assertTrue(templates.isEmpty());

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPostSubDomainWithTemplates() {

        String domainName = "postsubdomain-withtemplate";

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysNetwork = zmsTestInitializer.createSubDomainObject("network", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysNetwork);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("sub", domainName,
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        DomainTemplateList templateList = new DomainTemplateList();
        List<String> templates = new ArrayList<>();
        templates.add("vipng");
        templates.add("platforms");
        templates.add("user_provisioning");
        templateList.setTemplateNames(templates);
        dom2.setTemplates(templateList);

        Domain resDom1 = zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                zmsTestInitializer.getAuditRef(), dom2);
        assertNotNull(resDom1);

        String subDomainName = domainName + ".sub";

        // verify that our role collection includes the roles defined in template

        List<String> names = zmsImpl.dbService.listRoles(subDomainName);
        assertEquals(7, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));
        assertTrue(names.contains("platforms_deployer"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        Role role = zmsImpl.dbService.getRole(subDomainName, "openstack_readers", false, false, false);
        assertEquals(subDomainName + ":role.openstack_readers", role.getName());
        assertNull(role.getTrust());
        assertEquals(2, role.getRoleMembers().size());

        List<String> checkList = new ArrayList<>();
        checkList.add("sys.builder");
        checkList.add("sys.openstack");
        zmsTestInitializer.checkRoleMember(checkList, role.getRoleMembers());

        role = zmsImpl.dbService.getRole(subDomainName, "sys_network_super_vip_admin", false, false, false);
        assertEquals(subDomainName + ":role.sys_network_super_vip_admin", role.getName());
        assertEquals("sys.network", role.getTrust());

        // verify that our policy collections includes the policies defined in the template

        names = zmsImpl.dbService.listPolicies(subDomainName);
        assertEquals(7, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("vip_admin"));
        assertTrue(names.contains("sys_network_super_vip_admin"));
        assertTrue(names.contains("platforms_deploy"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        Policy policy = zmsImpl.dbService.getPolicy(subDomainName, "vip_admin", null);
        assertEquals(subDomainName + ":policy.vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(subDomainName + ":role.vip_admin", assertion.getRole());
        assertEquals(subDomainName + ":vip*", assertion.getResource());

        policy = zmsImpl.dbService.getPolicy(subDomainName, "sys_network_super_vip_admin", null);
        assertEquals(subDomainName + ":policy.sys_network_super_vip_admin", policy.getName());
        assertEquals(1, policy.getAssertions().size());
        assertion = policy.getAssertions().get(0);
        assertEquals("*", assertion.getAction());
        assertEquals(subDomainName + ":role.sys_network_super_vip_admin", assertion.getRole());
        assertEquals(subDomainName + ":vip*", assertion.getResource());

        // verify the saved domain list

        DomainTemplateList domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(),
                subDomainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(3, templates.size());
        assertTrue(templates.contains("vipng"));
        assertTrue(templates.contains("platforms"));
        assertTrue(templates.contains("user_provisioning"));

        // delete an applied service template
        //
        String templateName = "vipng";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), subDomainName, templateName,
                zmsTestInitializer.getAuditRef());

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), subDomainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(2, templates.size());
        assertTrue(templates.contains("platforms"));
        assertTrue(templates.contains("user_provisioning"));

        names = zmsImpl.dbService.listRoles(subDomainName);
        assertEquals(5, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("platforms_deployer"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        names = zmsImpl.dbService.listPolicies(subDomainName);
        assertEquals(5, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("platforms_deploy"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        // delete an applied service template
        //
        templateName = "platforms";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), subDomainName, templateName,
                zmsTestInitializer.getAuditRef());

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), subDomainName);
        templates = domaintemplateList.getTemplateNames();
        assertEquals(1, templates.size());
        assertTrue(templates.contains("user_provisioning"));

        names = zmsImpl.dbService.listRoles(subDomainName);
        assertEquals(4, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        names = zmsImpl.dbService.listPolicies(subDomainName);
        assertEquals(4, names.size());
        assertTrue(names.contains("admin"));
        assertTrue(names.contains("user"));
        assertTrue(names.contains("superuser"));
        assertTrue(names.contains("openstack_readers"));

        // delete last applied service template
        //
        templateName = "user_provisioning";
        zmsImpl.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), subDomainName, templateName,
                zmsTestInitializer.getAuditRef());

        domaintemplateList = zmsImpl.getDomainTemplateList(zmsTestInitializer.getMockDomRsrcCtx(), subDomainName);
        templates = domaintemplateList.getTemplateNames();
        assertTrue(templates.isEmpty());

        names = zmsImpl.dbService.listRoles(subDomainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        names = zmsImpl.dbService.listPolicies(subDomainName);
        assertEquals(1, names.size());
        assertTrue(names.contains("admin"));

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "network", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "sub", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyNoLoopbackNoSuchDomainError() {
        HttpServletRequest servletRequest = Mockito.mock(HttpServletRequest.class);
        when(servletRequest.getRemoteAddr()).thenReturn("10.10.10.11");
        when(servletRequest.isSecure()).thenReturn(true);

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsObj = zmsTestInitializer.getZmsImpl(alogger);

        String userId = "user";
        Principal principal = SimplePrincipal.create("user", userId, "v=U1;d=user;n=user;s=signature", 0, null);
        ResourceContext context = zmsTestInitializer.createResourceContext(principal, servletRequest);
        String domainName = "DomainName";
        String policyName = "PolicyName";

        // Tests the putPolicy() condition: if (domain == null)...
        try {
            Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);

            // should fail b/c we never created a top level domain.
            zmsObj.putPolicy(context, domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testPutPolicyLoopbackNoXFF_InconsistentNameError() {
        HttpServletRequest servletRequest = Mockito.mock(HttpServletRequest.class);
        when(servletRequest.getRemoteAddr()).thenReturn("127.0.0.1");
        when(servletRequest.isSecure()).thenReturn(true);

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsObj = zmsTestInitializer.getZmsImpl(alogger);

        String userId = "user";
        Principal principal = SimplePrincipal.create("user", userId, "v=U1;d=user;n=user;s=signature", 0, null);
        ResourceContext context = zmsTestInitializer.createResourceContext(principal, servletRequest);
        String domainName = "DomainName";
        String policyName = "PolicyName";

        // Tests the putPolicy() condition : if (!policyResourceName(domainName, policyName).equals(policy.getName()))...
        try {
            Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);

            zmsObj.putPolicy(context, domainName, "Bad" + policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }
    }

    @Test
    public void testPutPolicyLoopbackXFFSingleValue() {
        HttpServletRequest servletRequest = Mockito.mock(HttpServletRequest.class);
        when(servletRequest.getRemoteAddr()).thenReturn("127.0.0.1");
        when(servletRequest.getHeader("X-Forwarded-For")).thenReturn("10.10.10.11");
        when(servletRequest.isSecure()).thenReturn(true);

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsObj = zmsTestInitializer.getZmsImpl(alogger);

        String userId = "user";
        Principal principal = SimplePrincipal.create("user", userId, "v=U1;d=user;n=user;s=signature", 0, null);
        ResourceContext context = zmsTestInitializer.createResourceContext(principal, servletRequest);
        String domainName = "DomainName";
        String policyName = "PolicyName";

        // Tests the putPolicy() condition : if (!policyResourceName(domainName, policyName).equals(policy.getName()))...
        try {
            Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);

            zmsObj.putPolicy(context, domainName, "Bad" + policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }
    }

    @Test
    public void testPutPolicyLoopbackXFFMultipleValues() {
        HttpServletRequest servletRequest = Mockito.mock(HttpServletRequest.class);
        when(servletRequest.getRemoteAddr()).thenReturn("127.0.0.1");
        when(servletRequest.getHeader("X-Forwarded-For")).thenReturn("10.10.10.11, 10.11.11.11, 10.12.12.12");
        when(servletRequest.isSecure()).thenReturn(true);

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsObj = zmsTestInitializer.getZmsImpl(alogger);

        String userId = "user";
        Principal principal = SimplePrincipal.create("user", userId, "v=U1;d=user;n=user;s=signature", 0, null);
        ResourceContext context = zmsTestInitializer.createResourceContext(principal, servletRequest);
        String domainName = "DomainName";
        String policyName = "PolicyName";

        // Tests the putPolicy() condition : if (!policyResourceName(domainName, policyName).equals(policy.getName()))...
        try {
            Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);

            zmsObj.putPolicy(context, domainName, "Bad" + policyName, zmsTestInitializer.getAuditRef(), false, policy);
            fail("requesterror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 400);
        }
    }

    @Test
    public void testLoadSolutionTemplatesInvalid() {
        System.setProperty(ZMSConsts.ZMS_PROP_SOLUTION_TEMPLATE_FNAME, "invalid-templates.json");
        zmsTestInitializer.getZms().serverSolutionTemplates = null;
        zmsTestInitializer.getZms().loadSolutionTemplates();
        assertNotNull(zmsTestInitializer.getZms().serverSolutionTemplates);
        assertTrue(zmsTestInitializer.getZms().serverSolutionTemplates.getTemplates().isEmpty());
        System.clearProperty(ZMSConsts.ZMS_PROP_SOLUTION_TEMPLATE_FNAME);
    }

    @Test
    public void testUnderscoreNotAllowed() {

        String domainName = "core-tech";
        String badDomainName = "core_tech";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(badDomainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        SubDomain sub = zmsTestInitializer.createSubDomainObject(badDomainName, domainName,
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), sub);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        UserDomain userDom = zmsTestInitializer.createUserDomainObject(badDomainName, "Test Domain1", "testOrg");
        try {
            zmsTestInitializer.getZms().postUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), badDomainName, zmsTestInitializer.getAuditRef(), userDom);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testReadOnlyMode() {

        // first initialize our impl which would create our service

        //noinspection UnusedAssignment
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        // now we're going to create a new instance with read-only mode

        System.setProperty(ZMSConsts.ZMS_PROP_READ_ONLY_MODE, "true");
        System.setProperty(ZMSConsts.ZMS_PROP_PRINCIPAL_STATE_UPDATER_DISABLE_TIMER, "true");

        zmsTest = new ZMSImpl();
        ZMSImpl.serverHostName = "localhost";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("ReadOnlyDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        try {
            zmsTest.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "domain", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.postUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", "sub", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putDomainTemplateExt(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", "template", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteDomainTemplate(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", "template", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putEntity(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", "entity", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteEntity(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", "entity", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        Policy policy1 = zmsTestInitializer.createPolicyObject("ReadOnlyDom1", "Policy1");
        try {
            zmsTest.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Policy1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Policy1", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Policy1", 101L, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        Role role1 = zmsTestInitializer.createRoleObject("ReadOnlyDom1", "Role1", null,
                "user.joe", "user.jane");
        try {
            zmsTest.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Role1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Role1", "Member1", zmsTestInitializer.getAuditRef(), false, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteMembership(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Role1", "Member1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("ReadOnlyDom1",
                "Service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        try {
            zmsTest.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Service1", zmsTestInitializer.getAuditRef(), false, service1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            ServiceIdentitySystemMeta meta = new ServiceIdentitySystemMeta();
            zmsTest.putServiceIdentitySystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Service1", "providerendpoint",
                    zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Service1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putPublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Service1", "0", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "ReadOnlyDom1", "Service1", "0", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteDomainRoleMember(zmsTestInitializer.getMockDomRsrcCtx(), "dom1", "user1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteUser(zmsTestInitializer.getMockDomRsrcCtx(), "user1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "dom1", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "dom1", "account", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "tenant", "provider.service", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteTenancy(zmsTestInitializer.getMockDomRsrcCtx(), "tenant", "provider.service", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putTenant(zmsTestInitializer.getMockDomRsrcCtx(), "provider", "service", "tenant", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteTenant(zmsTestInitializer.getMockDomRsrcCtx(), "provider", "service", "tenant", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "provider", "service", "tenant",
                    "resgroup", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "tenant", "provider", "service",
                    "resgroup", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "tenant", "provider", "service",
                    "resgroup", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), "provider", "service", "tenant",
                    "resgroup", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putQuota(zmsTestInitializer.getMockDomRsrcCtx(), "domain", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteQuota(zmsTestInitializer.getMockDomRsrcCtx(), "domain", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putDefaultAdmins(zmsTestInitializer.getMockDomRsrcCtx(), "domain", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            RoleSystemMeta rsm = createRoleSystemMetaObject(true);
            zmsTest.putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "domain", "role1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            RoleMeta rm = createRoleMetaObject(true);
            zmsTest.putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "domain", "role1", "auditenabled", rm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "role1", "member1", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "role1", zmsTestInitializer.getAuditRef(), false, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deletePendingMembership(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "role1", "member1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putGroup(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", zmsTestInitializer.getAuditRef(), false, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", "user.joe", zmsTestInitializer.getAuditRef(), false, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", "user.joe", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", zmsTestInitializer.getAuditRef(), false, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", "attr", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", "user.joe", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "group1", "user.joe", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.putAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "policy1", "1", zmsTestInitializer.getAuditRef(), null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteAssertionPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", "policy1", "1", 1001L, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            DependentService dependentService = new DependentService().setService("sys.auth.zms");
            zmsTest.putDomainDependency(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", zmsTestInitializer.getAuditRef(), dependentService);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        try {
            zmsTest.deleteDomainDependency(zmsTestInitializer.getMockDomRsrcCtx(), "readonlydom1", zmsTestInitializer.getAuditRef(), "sys.auth.zms");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Read-Only"));
        }

        // now make sure we can read our sys.auth zms service

        ServiceIdentity serviceRes = zmsTest.getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "zms");
        assertNotNull(serviceRes);
        assertEquals(serviceRes.getName(), "sys.auth.zms");

        System.clearProperty(ZMSConsts.ZMS_PROP_READ_ONLY_MODE);
    }

    @Test
    public void testResourceContext() {
        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = (RsrcCtxWrapper) zmsImpl.newResourceContext(zmsTestInitializer.getMockServletContext(),
                zmsTestInitializer.getMockServletRequest(), zmsTestInitializer.getMockServletResponse(), "apiName");
        assertNotNull(ctx);
        assertNotNull(ctx.context());
        assertNull(ctx.principal());
        assertEquals(ctx.servletContext(), zmsTestInitializer.getMockServletContext());
        assertEquals(ctx.request(), zmsTestInitializer.getMockServletRequest());
        assertEquals(ctx.response(), zmsTestInitializer.getMockServletResponse());

        try {
            com.yahoo.athenz.common.server.rest.ResourceException restExc = new com.yahoo.athenz.common.server.rest.ResourceException(401, "failed struct");
            ctx.throwZmsException(restExc);
            fail();
        } catch (ResourceException ex) {
            assertEquals(401, ex.getCode());
            assertEquals( ((ResourceError) ex.data).message, "failed struct");
        }
    }

    @Test
    public void testAssertionMatchAuthenticatedRoles() {
        Role role = new Role().setName("domain:role.role1");
        ArrayList<Role> roles = new ArrayList<>();
        roles.add(role);

        ArrayList<String> authRoles = new ArrayList<>();
        authRoles.add("domain:role.role1");

        Assertion assertion = new Assertion();
        assertion.setAction("write");
        assertion.setResource("domain:db.write");
        assertion.setRole("domain:role.role1");

        assertTrue(zmsTestInitializer.getZms().assertionMatch(assertion, "user.john", "write", "domain:db.write", "domain",
                roles, authRoles, null));

        // check case sensitive action and resource
        assertion = new Assertion();
        assertion.setAction("write");
        assertion.setResource("domain:db.write");
        assertion.setRole("domain:role.role1");

        assertTrue(zmsTestInitializer.getZms().assertionMatch(assertion, "user.john", "write", "domain:db.write", "domain",
                roles, authRoles, null));

        // check case sensitive assertion
        assertion = new Assertion();
        assertion.setAction("WRITE");
        assertion.setResource("domain:db.WRITE");
        assertion.setRole("domain:role.role1");

        assertTrue(zmsTestInitializer.getZms().assertionMatch(assertion, "user.john", "write", "domain:db.write", "domain",
                roles, authRoles, null));
    }

    @Test
    public void testMatchRoleNoRoles() {
        assertFalse(zmsTestInitializer.getZms().matchRole("domain", new ArrayList<>(), "role", null));
    }

    @Test
    public void testMatchRoleNoRoleMatch() {
        assertFalse(zmsTestInitializer.getZms().matchRole("domain", new ArrayList<>(), "domain:role\\.role2.*", null));
    }

    @Test
    public void testMatchRoleAuthRoleNoMatchShortName() {
        Role role = new Role().setName("domain:role.role1");
        ArrayList<Role> roles = new ArrayList<>();
        roles.add(role);

        ArrayList<String> authRoles = new ArrayList<>();
        authRoles.add("role3");

        assertFalse(zmsTestInitializer.getZms().matchRole("domain", roles, "domain:role\\.role1.*", authRoles));
    }

    @Test
    public void testMatchRoleAuthRoleNoMatchFullName() {
        Role role = new Role().setName("domain:role.role1");
        ArrayList<Role> roles = new ArrayList<>();
        roles.add(role);

        ArrayList<String> authRoles = new ArrayList<>();
        authRoles.add("domain:role.role3");

        assertFalse(zmsTestInitializer.getZms().matchRole("domain", roles, "domain:role\\.role1.*", authRoles));
    }

    @Test
    public void testMatchRoleNoMatchPattern() {
        Role role = new Role().setName("domain:role.role2");
        ArrayList<Role> roles = new ArrayList<>();
        roles.add(role);

        ArrayList<String> authRoles = new ArrayList<>();
        authRoles.add("role3");

        assertFalse(zmsTestInitializer.getZms().matchRole("domain", roles, "domain:role\\.role1.*", authRoles));
    }

    @Test
    public void testMatchRoleShortName() {
        Role role = new Role().setName("domain:role.role1");
        ArrayList<Role> roles = new ArrayList<>();
        roles.add(role);

        ArrayList<String> authRoles = new ArrayList<>();
        authRoles.add("role1");

        assertTrue(zmsTestInitializer.getZms().matchRole("domain", roles, "domain:role\\.role.*", authRoles));
    }

    @Test
    public void testMatchRoleFullName() {
        Role role = new Role().setName("domain:role.role1");
        ArrayList<Role> roles = new ArrayList<>();
        roles.add(role);

        ArrayList<String> authRoles = new ArrayList<>();
        authRoles.add("domain:role.role1");

        assertTrue(zmsTestInitializer.getZms().matchRole("domain", roles, "domain:role\\.role.*", authRoles));
    }

    @Test
    public void testServerInternalError() {

        RuntimeException ex = ZMSUtils.internalServerError("unit test", "tester");
        assertTrue(ex.getMessage().contains("{code: 500"));
    }

    @Test
    public void testGetSchema() {
        Schema schema = zmsTestInitializer.getZms().getRdlSchema(zmsTestInitializer.getMockDomRsrcCtx());
        assertNotNull(schema);
    }

    @Test
    public void testValidatePolicyAssertionsInValid() {

        // assertion missing domain name

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);

        try {
            zmsTestInitializer.getZms().validatePolicyAssertions(assertList, "domain1", "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with empty domain name

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(":resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        assertList.clear();
        assertList.add(assertion);

        try {
            zmsTestInitializer.getZms().validatePolicyAssertions(assertList, "domain1", "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with invalid domain name

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain name:resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        assertList.clear();
        assertList.add(assertion);

        try {
            zmsTestInitializer.getZms().validatePolicyAssertions(assertList, "domain1", "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }
    }

    @Test
    public void testValidatePolicyAssertionInValid() {

        // assertion missing domain name

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with empty domain name

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(":resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with invalid domain name

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain name:resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with invalid resource name

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource\t\ntest");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with null action

        assertion = new Assertion();
        assertion.setAction(null);
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with empty action

        assertion = new Assertion();
        assertion.setAction("");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }

        // assertion with action containing control characters

        assertion = new Assertion();
        assertion.setAction("update\t");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource1");
        assertion.setRole(ResourceUtils.roleResourceName("domain1", "role1"));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, "domain1", new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
        }
    }

    @Test
    public void testValidatePolicyAssertionsValid() {

        String domainName = "domain1";
        String roleName = "role1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        addRoleNeededForTest(domainName, roleName);
        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);

        assertion = new Assertion();
        assertion.setAction("play");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("*:resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        assertList.add(assertion);

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        assertList.add(assertion);

        try {
            zmsTestInitializer.getZms().validatePolicyAssertions(assertList, domainName, "unitTest");
        } catch (Exception ex) {
            fail(ex.getMessage());
        }

        // null should also be valid

        try {
            zmsTestInitializer.getZms().validatePolicyAssertions(null, domainName, "unitTest");
        } catch (Exception ex) {
            fail(ex.getMessage());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidatePolicyAssertionValid() {

        String domainName = "domain1";
        String roleName = "role1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        addRoleNeededForTest(domainName, roleName);
        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, domainName, new HashSet<>(), "unitTest");
        } catch (Exception ex) {
            fail(ex.getMessage());
        }

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("*:resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, domainName, new HashSet<>(), "unitTest");
        } catch (Exception ex) {
            fail(ex.getMessage());
        }

        assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, domainName, new HashSet<>(), "unitTest");
        } catch (Exception ex) {
            fail(ex.getMessage());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidatePolicyAssertionRoleNames() {

        final String domainName = "validate-policy-assertion-role";
        final String roleName = "dev-role";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("domain1:resource1");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, roleName));

        // with feature enabled the request is rejected because there is no role

        DynamicConfigBoolean currentValue = zmsTestInitializer.getZms().validatePolicyAssertionRoles;
        zmsTestInitializer.getZms().validatePolicyAssertionRoles = new DynamicConfigBoolean(true);

        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, domainName, new HashSet<>(), "unitTest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        // now disable the feature and we should be able to process the assertion

        zmsTestInitializer.getZms().validatePolicyAssertionRoles = new DynamicConfigBoolean(false);
        try {
            zmsTestInitializer.getZms().validatePolicyAssertion(assertion, domainName, new HashSet<>(), "unitTest");
        } catch (ResourceException ex) {
            fail(ex.getMessage());
        }

        zmsTestInitializer.getZms().validatePolicyAssertionRoles = currentValue;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetupRoleListWithMembers() {

        String domainName = "setuprolelistwithmembers";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "Role2", null, "user.doe",
                "user.janie");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "Role3", "sys.auth", null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role3", zmsTestInitializer.getAuditRef(), false, role3);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<Role> roles = zmsTestInitializer.getZms().setupRoleList(domain, Boolean.TRUE, null, null);
        assertEquals(4, roles.size()); // need to account for admin role

        boolean role1Check = false;
        boolean role2Check = false;
        boolean role3Check = false;

        for (Role role : roles) {
            switch (role.getName()) {
                case "setuprolelistwithmembers:role.role1":
                    List<String> checkList = new ArrayList<>();
                    checkList.add("user.joe");
                    checkList.add("user.jane");
                    zmsTestInitializer.checkRoleMember(checkList, role.getRoleMembers());
                    assertEquals(role.getRoleMembers().size(), 2);
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role1Check = true;
                    break;
                case "setuprolelistwithmembers:role.role2":
                    List<String> checkList2 = new ArrayList<>();
                    checkList2.add("user.doe");
                    checkList2.add("user.janie");
                    zmsTestInitializer.checkRoleMember(checkList2, role.getRoleMembers());
                    assertEquals(role.getRoleMembers().size(), 2);
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role2Check = true;
                    break;
                case "setuprolelistwithmembers:role.role3":
                    assertEquals(role.getTrust(), "sys.auth");
                    assertNull(role.getRoleMembers());
                    role3Check = true;
                    assertNotNull(role.getModified());
                    break;
            }
        }

        assertTrue(role1Check);
        assertTrue(role2Check);
        assertTrue(role3Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetupRoleListWithOutMembers() {

        String domainName = "setuprolelistwithoutmembers";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "Role2", null, "user.doe",
                "user.janie");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "Role3", "sys.auth", null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role3", zmsTestInitializer.getAuditRef(), false, role3);

        Role role4 = zmsTestInitializer.createRoleObject(domainName, "Role4", null, "user.doe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role4", zmsTestInitializer.getAuditRef(), false, role4);

        RoleMeta rm = createRoleMetaObject(true);
        rm.setReviewEnabled(true);
        rm.setMemberExpiryDays(45);
        rm.setCertExpiryMins(55);
        rm.setServiceExpiryDays(45);
        rm.setGroupExpiryDays(50);
        rm.setTokenExpiryMins(65);
        rm.setMemberReviewDays(70);
        rm.setServiceReviewDays(80);
        rm.setGroupReviewDays(90);
        rm.setSignAlgorithm("ec");
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role4", zmsTestInitializer.getAuditRef(), rm);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<Role> roles = zmsTestInitializer.getZms().setupRoleList(domain, Boolean.FALSE, null, null);
        assertEquals(5, roles.size()); // need to account for admin role

        boolean role1Check = false;
        boolean role2Check = false;
        boolean role3Check = false;
        boolean role4Check = false;

        for (Role role : roles) {
            switch (role.getName()) {
                case "setuprolelistwithoutmembers:role.role1":
                    assertNull(role.getRoleMembers());
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role1Check = true;
                    break;
                case "setuprolelistwithoutmembers:role.role2":
                    assertNull(role.getRoleMembers());
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role2Check = true;
                    break;
                case "setuprolelistwithoutmembers:role.role3":
                    assertEquals(role.getTrust(), "sys.auth");
                    assertNull(role.getRoleMembers());
                    role3Check = true;
                    assertNotNull(role.getModified());
                    break;
                case "setuprolelistwithoutmembers:role.role4":
                    assertNull(role.getRoleMembers());
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    assertNull(role.getLastReviewedDate());
                    assertEquals(role.getMemberExpiryDays().intValue(), 45);
                    assertEquals(role.getCertExpiryMins().intValue(), 55);
                    assertEquals(role.getServiceExpiryDays().intValue(), 45);
                    assertEquals(role.getGroupExpiryDays().intValue(), 50);
                    assertEquals(role.getTokenExpiryMins().intValue(), 65);
                    assertEquals(role.getMemberReviewDays().intValue(), 70);
                    assertEquals(role.getServiceReviewDays().intValue(), 80);
                    assertEquals(role.getGroupReviewDays().intValue(), 90);
                    assertNotNull(role.getSignAlgorithm());
                    assertTrue(role.getReviewEnabled());
                    assertTrue(role.getSelfServe());
                    assertNull(role.getAuditEnabled());
                    role4Check = true;
                    break;
            }
        }

        assertTrue(role1Check);
        assertTrue(role2Check);
        assertTrue(role3Check);
        assertTrue(role4Check);

        // we'll do the same check this time passing null
        // for the boolean flag instead of false

        roles = zmsTestInitializer.getZms().setupRoleList(domain, null, null, null);
        assertEquals(5, roles.size()); // need to account for admin role

        role1Check = false;
        role2Check = false;
        role3Check = false;
        role4Check = false;

        for (Role role : roles) {
            switch (role.getName()) {
                case "setuprolelistwithoutmembers:role.role1":
                    assertNull(role.getRoleMembers());
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role1Check = true;
                    break;
                case "setuprolelistwithoutmembers:role.role2":
                    assertNull(role.getRoleMembers());
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role2Check = true;
                    break;
                case "setuprolelistwithoutmembers:role.role3":
                    assertEquals(role.getTrust(), "sys.auth");
                    assertNull(role.getRoleMembers());
                    role3Check = true;
                    assertNotNull(role.getModified());
                    break;
                case "setuprolelistwithoutmembers:role.role4":
                    assertNull(role.getRoleMembers());
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    assertNull(role.getLastReviewedDate());
                    assertEquals(role.getMemberExpiryDays().intValue(), 45);
                    assertEquals(role.getCertExpiryMins().intValue(), 55);
                    assertEquals(role.getServiceExpiryDays().intValue(), 45);
                    assertEquals(role.getGroupExpiryDays().intValue(), 50);
                    assertEquals(role.getTokenExpiryMins().intValue(), 65);
                    assertEquals(role.getMemberReviewDays().intValue(), 70);
                    assertEquals(role.getServiceReviewDays().intValue(), 80);
                    assertEquals(role.getGroupReviewDays().intValue(), 90);
                    assertNotNull(role.getSignAlgorithm());
                    assertTrue(role.getReviewEnabled());
                    assertTrue(role.getSelfServe());
                    role4Check = true;
                    break;
            }
        }

        assertTrue(role1Check);
        assertTrue(role2Check);
        assertTrue(role3Check);
        assertTrue(role4Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoles() {

        String domainName = "getroles";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "Role1", null, "user.joe",
                "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "Role2", null, "user.doe",
                "user.janie");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "Role3", "sys.auth", null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Role3", zmsTestInitializer.getAuditRef(), false, role3);

        Roles roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, null, null);
        List<Role> roles = roleList.getList();
        assertEquals(4, roles.size()); // need to account for admin role

        boolean role1Check = false;
        boolean role2Check = false;
        boolean role3Check = false;

        for (Role role : roles) {
            switch (role.getName()) {
                case "getroles:role.role1":
                    List<String> checkList = new ArrayList<>();
                    checkList.add("user.joe");
                    checkList.add("user.jane");
                    zmsTestInitializer.checkRoleMember(checkList, role.getRoleMembers());
                    assertEquals(role.getRoleMembers().size(), 2);
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role1Check = true;
                    break;
                case "getroles:role.role2":
                    List<String> checkList2 = new ArrayList<>();
                    checkList2.add("user.doe");
                    checkList2.add("user.janie");
                    zmsTestInitializer.checkRoleMember(checkList2, role.getRoleMembers());
                    assertEquals(role.getRoleMembers().size(), 2);
                    assertNull(role.getTrust());
                    assertNotNull(role.getModified());
                    role2Check = true;
                    break;
                case "getroles:role.role3":
                    assertEquals(role.getTrust(), "sys.auth");
                    assertNull(role.getRoleMembers());
                    role3Check = true;
                    assertNotNull(role.getModified());
                    break;
            }
        }

        assertTrue(role1Check);
        assertTrue(role2Check);
        assertTrue(role3Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRolesInvalidDomain() {

        final String domainName = "getrolesinvaliddomain";

        try {
            zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, null, null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testSetupPolicyListWithAssertionsBothActive() {

        final String domainName = "setup-policy-with-assert";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<Policy> policies = zmsTestInitializer.getZms().setupPolicyList(domain, Boolean.TRUE, Boolean.FALSE);
        assertEquals(3, policies.size()); // need to account for admin policy

        boolean policy1Check = false;
        boolean policy2Check = false;

        List<Assertion> testAssertions;
        for (Policy policy : policies) {
            switch (policy.getName()) {
                case "setup-policy-with-assert:policy.policy1":
                    testAssertions = policy.getAssertions();
                    assertEquals(testAssertions.size(), 1);
                    policy1Check = true;
                    break;
                case "setup-policy-with-assert:policy.policy2":
                    testAssertions = policy.getAssertions();
                    assertEquals(testAssertions.size(), 1);
                    policy2Check = true;
                    break;
            }
        }

        assertTrue(policy1Check);
        assertTrue(policy2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetupPolicyListWithAssertionsActiveOnly() {

        final String domainName = "setup-policy-with-assert-active-only";

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1").setActive(true);
        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2").setActive(false);

        List<Policy> policyList = new ArrayList<>();
        policyList.add(policy1);
        policyList.add(policy2);

        AthenzDomain domain = new AthenzDomain(domainName);
        domain.setPolicies(policyList);

        List<Policy> policies = zmsTestInitializer.getZms().setupPolicyList(domain, Boolean.TRUE, Boolean.FALSE);
        assertEquals(1, policies.size());
        assertEquals(policies.get(0).getName(), "setup-policy-with-assert-active-only:policy.policy1");
    }

    @Test
    public void testSetupPolicyListWithAssertionsAllVersions() {

        final String domainName = "setup-policy-with-assert-all-versions";

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1").setActive(true).setVersion("ver1");
        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2").setActive(false).setVersion("ver2");

        List<Policy> policyList = new ArrayList<>();
        policyList.add(policy1);
        policyList.add(policy2);

        AthenzDomain domain = new AthenzDomain(domainName);
        domain.setPolicies(policyList);

        List<Policy> policies = zmsTestInitializer.getZms().setupPolicyList(domain, Boolean.TRUE, Boolean.TRUE);
        assertEquals(2, policies.size());
        assertEquals(policies.get(0).getName(), "setup-policy-with-assert-all-versions:policy.policy1");
        assertEquals(policies.get(0).getVersion(), "ver1");
        assertTrue(policies.get(0).getActive());
        assertEquals(policies.get(1).getName(), "setup-policy-with-assert-all-versions:policy.policy2");
        assertEquals(policies.get(1).getVersion(), "ver2");
        assertFalse(policies.get(1).getActive());

        policies = zmsTestInitializer.getZms().setupPolicyList(domain, Boolean.FALSE, Boolean.TRUE);
        assertEquals(2, policies.size());
        assertEquals(policies.get(0).getName(), "setup-policy-with-assert-all-versions:policy.policy1");
        assertEquals(policies.get(0).getVersion(), "ver1");
        assertTrue(policies.get(0).getActive());
        assertEquals(policies.get(1).getName(), "setup-policy-with-assert-all-versions:policy.policy2");
        assertEquals(policies.get(1).getVersion(), "ver2");
        assertFalse(policies.get(1).getActive());
    }

    @Test
    public void testGetPolicies() {

        final String domainName = "get-policies";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policies policyList = zmsTestInitializer.getZms().getPolicies(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, Boolean.FALSE);
        List<Policy> policies = policyList.getList();
        assertEquals(3, policies.size()); // need to account for admin policy

        boolean policy1Check = false;
        boolean policy2Check = false;

        List<Assertion> testAssertions;
        for (Policy policy : policies) {
            switch (policy.getName()) {
                case "get-policies:policy.policy1":
                    testAssertions = policy.getAssertions();
                    assertEquals(testAssertions.size(), 1);
                    policy1Check = true;
                    break;
                case "get-policies:policy.policy2":
                    testAssertions = policy.getAssertions();
                    assertEquals(testAssertions.size(), 1);
                    policy2Check = true;
                    break;
            }
        }

        assertTrue(policy1Check);
        assertTrue(policy2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyVersions() {

        final String domainName = "get-policies";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", new PolicyOptions().setVersion("version2"), zmsTestInitializer.getAuditRef(), false);

        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", new PolicyOptions().setVersion("new-version"), zmsTestInitializer.getAuditRef(), false);

        Policies policyList = zmsTestInitializer.getZms().getPolicies(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, Boolean.TRUE);
        List<Policy> policies = policyList.getList();
        assertEquals(5, policies.size()); // need to account for admin policy
        // set our default versions for our policy objects
        policy1.setVersion("0");
        policy2.setVersion("0");
        assertTrue(checkPolicyList(policies, policy1));
        policy1.setVersion("version2");
        policy1.setActive(false);
        assertTrue(checkPolicyList(policies, policy1));
        assertTrue(checkPolicyList(policies, policy2));
        policy2.setVersion("new-version");
        policy2.setActive(false);
        assertTrue(checkPolicyList(policies, policy2));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    boolean checkPolicyList(List<Policy> policies, Policy checkPolicy) {
        for (Policy policy : policies) {
            if (policy.getName().equals(checkPolicy.getName()) && policy.getVersion().equals(checkPolicy.getVersion())) {
                return true;
            }
        }
        return false;
    }
    @Test
    public void testGetPoliciesInvalidDomain() {

        String domainName = "get-policies-invalid-domain";

        try {
            zmsTestInitializer.getZms().getPolicies(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, Boolean.FALSE);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testSetupPolicyListWithOutAssertions() {

        final String domainName = "setup-policy-without-assert";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<Policy> policies = zmsTestInitializer.getZms().setupPolicyList(domain, Boolean.FALSE, Boolean.FALSE);
        assertEquals(3, policies.size()); // need to account for admin policy

        boolean policy1Check = false;
        boolean policy2Check = false;

        for (Policy policy : policies) {
            switch (policy.getName()) {
                case "setup-policy-without-assert:policy.policy1":
                    assertNull(policy.getAssertions());
                    policy1Check = true;
                    break;
                case "setup-policy-without-assert:policy.policy2":
                    assertNull(policy.getAssertions());
                    policy2Check = true;
                    break;
            }
        }

        assertTrue(policy1Check);
        assertTrue(policy2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetServiceIdentities() {

        final String domainName = "get-services";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject(domainName,
                "service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        Response myService = zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service1", zmsTestInitializer.getAuditRef(), true, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject(domainName,
                "service2", "http://localhost", "/usr/bin/java", "yahoo",
                "users", "host2");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service2", zmsTestInitializer.getAuditRef(), false, service2);

        ServiceIdentities serviceList = zmsTestInitializer.getZms().getServiceIdentities(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                Boolean.TRUE, Boolean.TRUE);
        List<ServiceIdentity> services = serviceList.getList();
        assertEquals(2, services.size());

        boolean service1Check = false;
        boolean service2Check = false;

        for (ServiceIdentity service : services) {
            switch (service.getName()) {
                case "get-services.service1":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "root");
                    assertEquals(service.getPublicKeys().size(), 2);
                    assertEquals(service.getHosts().size(), 1);
                    assertEquals(service.getHosts().get(0), "host1");
                    service1Check = true;
                    break;
                case "get-services.service2":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "yahoo");
                    assertEquals(service.getPublicKeys().size(), 2);
                    assertEquals(service.getHosts().size(), 1);
                    assertEquals(service.getHosts().get(0), "host2");
                    assertEquals(service.getDescription(), "test");
                    service2Check = true;
                    break;
            }
        }

        assertTrue(service1Check);
        assertTrue(service2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetServiceIdentitiesInvalidDomain() {

        String domainName = "get-services-invalid-domain";

        try {
            zmsTestInitializer.getZms().getServiceIdentities(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                    Boolean.TRUE, Boolean.TRUE);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }
    }

    @Test
    public void testSetupServiceListWithKeysHosts() {

        final String domainName = "setup-service-keys-hosts";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject(domainName,
                "service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject(domainName,
                "service2", "http://localhost", "/usr/bin/java", "yahoo",
                "users", "host2");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service2", zmsTestInitializer.getAuditRef(), false, service2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<ServiceIdentity> services = zmsTestInitializer.getZms().setupServiceIdentityList(domain,
                Boolean.TRUE, Boolean.TRUE);
        assertEquals(2, services.size());

        boolean service1Check = false;
        boolean service2Check = false;

        for (ServiceIdentity service : services) {
            switch (service.getName()) {
                case "setup-service-keys-hosts.service1":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "root");
                    assertEquals(service.getPublicKeys().size(), 2);
                    assertEquals(service.getHosts().size(), 1);
                    assertEquals(service.getHosts().get(0), "host1");
                    service1Check = true;
                    break;
                case "setup-service-keys-hosts.service2":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "yahoo");
                    assertEquals(service.getPublicKeys().size(), 2);
                    assertEquals(service.getHosts().size(), 1);
                    assertEquals(service.getHosts().get(0), "host2");
                    service2Check = true;
                    break;
            }
        }

        assertTrue(service1Check);
        assertTrue(service2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetupServiceListWithOutKeysHosts() {

        final String domainName = "setup-service-without-keys-hosts";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject(domainName,
                "service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject(domainName,
                "service2", "http://localhost", "/usr/bin/java", "yahoo",
                "users", "host2");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service2", zmsTestInitializer.getAuditRef(), false, service2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<ServiceIdentity> services = zmsTestInitializer.getZms().setupServiceIdentityList(domain,
                Boolean.FALSE, Boolean.FALSE);
        assertEquals(2, services.size());

        boolean service1Check = false;
        boolean service2Check = false;

        for (ServiceIdentity service : services) {
            switch (service.getName()) {
                case "setup-service-without-keys-hosts.service1":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "root");
                    assertNull(service.getPublicKeys());
                    assertNull(service.getHosts());
                    service1Check = true;
                    break;
                case "setup-service-without-keys-hosts.service2":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "yahoo");
                    assertNull(service.getPublicKeys());
                    assertNull(service.getHosts());
                    service2Check = true;
                    break;
            }
        }

        assertTrue(service1Check);
        assertTrue(service2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetupServiceListWithKeysOnly() {

        final String domainName = "setup-service-keys-only";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject(domainName,
                "service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject(domainName,
                "service2", "http://localhost", "/usr/bin/java", "yahoo",
                "users", "host2");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service2", zmsTestInitializer.getAuditRef(), false, service2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<ServiceIdentity> services = zmsTestInitializer.getZms().setupServiceIdentityList(domain,
                Boolean.TRUE, Boolean.FALSE);
        assertEquals(2, services.size());

        boolean service1Check = false;
        boolean service2Check = false;

        for (ServiceIdentity service : services) {
            switch (service.getName()) {
                case "setup-service-keys-only.service1":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "root");
                    assertEquals(service.getPublicKeys().size(), 2);
                    assertNull(service.getHosts());
                    service1Check = true;
                    break;
                case "setup-service-keys-only.service2":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "yahoo");
                    assertEquals(service.getPublicKeys().size(), 2);
                    assertNull(service.getHosts());
                    service2Check = true;
                    break;
            }
        }

        assertTrue(service1Check);
        assertTrue(service2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetupServiceListWithHostsOnly() {

        final String domainName = "setup-service-hosts-only";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject(domainName,
                "service1", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service1", zmsTestInitializer.getAuditRef(), false, service1);

        ServiceIdentity service2 = zmsTestInitializer.createServiceObject(domainName,
                "service2", "http://localhost", "/usr/bin/java", "yahoo",
                "users", "host2");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "service2", zmsTestInitializer.getAuditRef(), false, service2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<ServiceIdentity> services = zmsTestInitializer.getZms().setupServiceIdentityList(domain,
                Boolean.FALSE, Boolean.TRUE);
        assertEquals(2, services.size());

        boolean service1Check = false;
        boolean service2Check = false;

        for (ServiceIdentity service : services) {
            switch (service.getName()) {
                case "setup-service-hosts-only.service1":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "root");
                    assertNull(service.getPublicKeys());
                    assertEquals(service.getHosts().size(), 1);
                    assertEquals(service.getHosts().get(0), "host1");
                    service1Check = true;
                    break;
                case "setup-service-hosts-only.service2":
                    assertEquals(service.getExecutable(), "/usr/bin/java");
                    assertEquals(service.getUser(), "yahoo");
                    assertNull(service.getPublicKeys());
                    assertEquals(service.getHosts().size(), 1);
                    assertEquals(service.getHosts().get(0), "host2");
                    service2Check = true;
                    break;
            }
        }

        assertTrue(service1Check);
        assertTrue(service2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAssertion() {

        final String domainName = "get-assertion";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        Long assertionId = policyRes.getAssertions().get(0).getId();

        Assertion assertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId);
        assertNotNull(assertion);
        assertEquals(assertion.getAction(), "*");
        assertEquals(assertion.getResource(), domainName + ":*");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAssertionActivePolicy() {

        final String domainName = "get-assertion";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // Create policy
        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        // Create policy version
        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", new PolicyOptions().setVersion("new-version"), zmsTestInitializer.getAuditRef(), false);

        // Add assertion to policy
        Assertion assertion = new Assertion();
        assertion.setAction("testactive");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), assertion);

        // Make sure it is added to active policy version
        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        Long assertionId = policyRes.getAssertions().get(1).getId();
        assertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId);
        assertNotNull(assertion);
        assertEquals(assertion.getAction(), "testactive");
        assertEquals(assertion.getResource(), domainName + ":resource");

        // Make sure it isn't added to non-active policy version
        policyRes = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", "new-version");
        assertEquals(policyRes.getAssertions().size(), 1);
        assertEquals(policyRes.getAssertions().get(0).getAction(), "*");
        assertEquals(policyRes.getAssertions().get(0).getResource(), domainName + ":*");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAssertionCaseSensitive() {

        final String domainName = "get-assertion";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        addRoleNeededForTest(domainName, "Role1");

        // Create case-sensitive policy
        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1", "Role1", "ActioN1", "GeT-AssertioN:SomeResource", AssertionEffect.ALLOW);
        policy.setCaseSensitive(true);

        // Create case-insensitive policy
        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName, "policy2", "Role1", "ActioN2", "GeT-AssertioN:SomeResource2", AssertionEffect.ALLOW);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        Long assertionId = policyRes.getAssertions().get(0).getId();

        Assertion assertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId);
        assertNotNull(assertion);
        assertEquals(assertion.getAction(), "ActioN1");
        assertEquals(assertion.getResource(), domainName + ":SomeResource");

        policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2");
        assertionId = policyRes.getAssertions().get(0).getId();

        assertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", assertionId);
        assertNotNull(assertion);
        assertEquals(assertion.getAction(), "action2");
        assertEquals(assertion.getResource(), domainName + ":someresource2");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAssertionMultiple() {

        final String domainName = "get-assertion-multiple";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));

        // Create case-sensitive assertion
        Assertion assertion2 = new Assertion();
        assertion2.setAction("UpdatE2");
        assertion2.setEffect(AssertionEffect.ALLOW);
        assertion2.setResource(domainName + ":ResourcE2");
        assertion2.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        assertion2.setCaseSensitive(true);

        // Put both assertions
        policy.getAssertions().add(assertion);
        policy.getAssertions().add(assertion2);

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        List<Assertion> testAssertions = new ArrayList<>();

        Long assertionId = policyRes.getAssertions().get(0).getId();
        Assertion testAssertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId);
        assertNotNull(testAssertion);
        testAssertions.add(testAssertion);

        assertionId = policyRes.getAssertions().get(1).getId();
        testAssertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId);
        assertNotNull(testAssertion);
        testAssertions.add(testAssertion);

        assertionId = policyRes.getAssertions().get(2).getId();
        testAssertion = zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId);
        assertNotNull(testAssertion);
        testAssertions.add(testAssertion);

        boolean assert1Check = false;
        boolean assert2Check = false;
        boolean assert3Check = false;
        for (Assertion testAssert : testAssertions) {
            switch (testAssert.getAction()) {
                case "*":
                    assertEquals(testAssert.getResource(), domainName + ":*");
                    assert1Check = true;
                    break;
                case "update":
                    assertEquals(testAssert.getResource(), domainName + ":resource");
                    assert2Check = true;
                    break;
                case "UpdatE2":
                    assertEquals(testAssert.getResource(), domainName + ":ResourcE2");
                    assert3Check = true;
                    break;
            }
        }
        assertTrue(assert1Check);
        assertTrue(assert2Check);
        assertTrue(assert3Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAssertionUnknownId() {

        final String domainName = "get-assertion-invalid";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        try {
            zmsTestInitializer.getZms().getAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", 1L);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutAssertion() {

        final String domainName = "put-assertion";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));

        // add the assertion

        assertion = zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), assertion);

        // verity that the return assertion object has the id set

        assertNotNull(assertion.getId());

        // validate that both assertions exist

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");

        boolean assert1Check = false;
        boolean assert2Check = false;
        for (Assertion testAssert : policyRes.getAssertions()) {
            switch (testAssert.getAction()) {
                case "*":
                    assertEquals(testAssert.getResource(), domainName + ":*");
                    assert1Check = true;
                    break;
                case "update":
                    assertEquals(testAssert.getResource(), domainName + ":resource");
                    assert2Check = true;
                    break;
            }
        }
        assertTrue(assert1Check);
        assertTrue(assert2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutAssertionItsRoleDoesNotExist(){

        final String domainName = "put-assertion";
        final String policyName = "policy1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "not-exist"));

        // add the assertion - should be fail
        try {
            zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), assertion);
            fail("should be fail");
        } catch (ResourceException ex){
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("that associated to an assertion"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutAssertionCaseSensitive() {

        final String domainName = "put-assertion";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        Assertion assertion = new Assertion();
        assertion.setAction("Update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":Resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        assertion.setCaseSensitive(true);

        // add the assertion

        assertion = zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), assertion);

        // verity that the return assertion object has the id set

        assertNotNull(assertion.getId());

        // validate that both assertions exist

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");

        boolean assert1Check = false;
        boolean assert2Check = false;
        for (Assertion testAssert : policyRes.getAssertions()) {
            switch (testAssert.getAction()) {
                case "*":
                    assertEquals(testAssert.getResource(), domainName + ":*");
                    assert1Check = true;
                    break;
                case "Update":
                    assertEquals(testAssert.getResource(), domainName + ":Resource");
                    assert2Check = true;
                    break;
            }
        }
        assertTrue(assert1Check);
        assertTrue(assert2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testAddDefaultAdminAssertion() {

        final String domainName = "put-default-assertion";
        final String policyName = "policy1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // add an empty policy to the domain

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);

        // add invalid assertions that will be skipped by the call
        // and we'll add the default assertion

        List<Assertion> assertList = new ArrayList<>();

        Assertion assertion = new Assertion();
        assertion.setResource(null);
        assertList.add(assertion);

        assertion = new Assertion();
        assertion.setResource(domainName + ":test");
        assertion.setAction(null);
        assertList.add(assertion);

        assertion = new Assertion();
        assertion.setResource(domainName + ":test");
        assertion.setAction("update");
        assertion.setRole(null);
        assertList.add(assertion);

        assertion = new Assertion();
        assertion.setResource(domainName + ":test");
        assertion.setAction("update");
        assertion.setRole("admin");
        assertList.add(assertion);

        assertion = new Assertion();
        assertion.setResource(domainName + ":test");
        assertion.setAction("update");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        assertion.setEffect(AssertionEffect.DENY);
        assertList.add(assertion);

        // add the assertion

        policy.setAssertions(assertList);
        zmsTestInitializer.getZms().addDefaultAdminAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, policy, zmsTestInitializer.getAuditRef(), "unit-test");

        // validate admin policy is correct set with assertion

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin");

        boolean assert1Check = false;
        for (Assertion testAssert : policyRes.getAssertions()) {
            if ("*".equals(testAssert.getAction())) {
                assertEquals(testAssert.getResource(), domainName + ":*");
                assert1Check = true;
                break;
            }
        }
        assertTrue(assert1Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutAssertionAdminReject() {

        final String domainName = "put-assertion-admin";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));

        try {
            zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", zmsTestInitializer.getAuditRef(), assertion);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("admin policy cannot be modified"), ex.getMessage());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutAssertionWithoutDomainPrefixForRole() {

        final String domainName = "put-invalid-assertion";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole("role_with_out_prefix");

        try {
            zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), assertion);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("that associated to an assertion"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutAssertionUnknownPolicy() {

        final String domainName = "put-assertion-unknown";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));

        // add the assertion which should fail due to unknown policy name

        try {
            zmsTestInitializer.getZms().putAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", zmsTestInitializer.getAuditRef(), assertion);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionSingle() {

        final String domainName = "delete-assertion-single";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        // now let's delete the assertion directly

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        Long assertionId = policyRes.getAssertions().get(0).getId();

        zmsTestInitializer.getZms().deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId, zmsTestInitializer.getAuditRef());

        policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        assertEquals(policyRes.getAssertions().size(), 0);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionMultiple() {

        final String domainName = "delete-assertion-multiple";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        policy.getAssertions().add(assertion);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        Policy policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");

        // we are going to delete assertion at index 0

        Long assertionId = policyRes.getAssertions().get(0).getId();
        zmsTestInitializer.getZms().deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", assertionId, zmsTestInitializer.getAuditRef());

        // remember the assertion action for index 1

        String action = policyRes.getAssertions().get(1).getAction();

        // fetch the policy again and verify the action

        policyRes = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        assertEquals(policyRes.getAssertions().size(), 1);
        assertEquals(policyRes.getAssertions().get(0).getAction(), action);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionAdminReject() {

        final String domainName = "delete-assertion-admin";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        try {
            zmsTestInitializer.getZms().deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", 101L, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("admin policy cannot be modified"), ex.getMessage());
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionUnknown() {

        final String domainName = "delete-assertion-unknown";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy);

        // delete the assertion which should fail due to unknown policy name

        try {
            zmsTestInitializer.getZms().deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy2", 1L, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // delete the assertion which should fail due to unknown assertion id

        try {
            zmsTestInitializer.getZms().deleteAssertion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", 1L, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPolicyListWithoutAssertionId() {

        assertNull(zmsTestInitializer.getZms().getDomainPolicyList(null, false));

        List<Policy> emptyList = new ArrayList<>();
        List<Policy> result = zmsTestInitializer.getZms().getDomainPolicyList(emptyList, false);
        assertTrue(result.isEmpty());

        final String domainName = "assertion-test";
        Policy policy = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        policy.setCaseSensitive(true);
        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        assertion.setId(101L);
        assertion.setCaseSensitive(true);
        policy.getAssertions().add(assertion);

        List<Policy> policyList = new ArrayList<>();
        policyList.add(policy);

        result = zmsTestInitializer.getZms().getDomainPolicyList(policyList, false);
        assertEquals(result.size(), 1);
        Assertion testAssertion = result.get(0).getAssertions().get(0);
        assertNull(testAssertion.getId());
        assertEquals(assertion.getAction(), "update");
        assertEquals(assertion.getEffect(), AssertionEffect.ALLOW);
        assertEquals(assertion.getResource(), domainName + ":resource");
        assertEquals(assertion.getRole(), ResourceUtils.roleResourceName(domainName, "admin"));

        // Verify case-sensitivity isn't returned
        assertNull(result.get(0).getCaseSensitive());
        assertNull(testAssertion.getCaseSensitive());
    }

    @Test
    public void testIsConsistentRoleName() {

        Role role = new Role();

        role.setName("domain1:role.role1");
        assertTrue(zmsTestInitializer.getZms().isConsistentRoleName("domain1", "role1", role));

        // local name behavior

        role.setName("role1");
        assertTrue(zmsTestInitializer.getZms().isConsistentRoleName("domain1", "role1", role));
        assertEquals(role.getName(), "domain1:role.role1");

        // inconsistent behavior

        role.setName("domain1:role.role1");
        assertFalse(zmsTestInitializer.getZms().isConsistentRoleName("domain1", "role2", role));

        role.setName("role1");
        assertFalse(zmsTestInitializer.getZms().isConsistentRoleName("domain1", "role2", role));
    }

    @Test
    public void testIsConsistentPolicyName() {

        Policy policy = new Policy();

        policy.setName("domain1:policy.policy1");
        assertTrue(zmsTestInitializer.getZms().isConsistentPolicyName("domain1", "policy1", policy));

        // local name behavior

        policy.setName("policy1");
        assertTrue(zmsTestInitializer.getZms().isConsistentPolicyName("domain1", "policy1", policy));
        assertEquals(policy.getName(), "domain1:policy.policy1");

        // inconsistent behavior

        policy.setName("domain1:policy.policy1");
        assertFalse(zmsTestInitializer.getZms().isConsistentPolicyName("domain1", "policy2", policy));

        policy.setName("policy1");
        assertFalse(zmsTestInitializer.getZms().isConsistentPolicyName("domain1", "policy2", policy));
    }

    @Test
    public void testGetDomainListNotNull() {
        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();
        String userId = "user1";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password", 0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);
        zmsTestInitializer.getZms().getDomainList(rsrcCtx1, 100, null, null, 100, "account", 224, "roleMem1",
                "role1", null, null, null, null, null);
    }

    @Test
    public void testDeleteUserDomainNull() {
        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();
        String userId = "user1";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password", 0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);
        try {
            zmsTestInitializer.getZms().deleteUserDomain(rsrcCtx1, null, null);
            fail();
        } catch (ResourceException ex) {
            assertTrue(true);
        }
    }

    @Test
    public void testDeleteDomainTemplateNull() {
        Authority userAuthority = new com.yahoo.athenz.common.server.debug.DebugUserAuthority();
        String userId = "user1";
        Principal principal = SimplePrincipal.create("user", userId, userId + ":password", 0, userAuthority);
        assertNotNull(principal);
        ((SimplePrincipal) principal).setUnsignedCreds(userId);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal);
        try {
            zmsTestInitializer.getZms().deleteDomainTemplate(rsrcCtx1, "dom1", null, "zms");
            fail();
        } catch (ResourceException ex) {
            assertTrue(true);
        }
    }

    @Test
    public void testDeleteDomainTemplate() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        try{
            zmsTestInitializer.getZms().deleteDomainTemplate(rsrcCtx1, null, null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
    }

    @Test
    public void testPutTenantResourceGroupRolesNull() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        TenantResourceGroupRoles tenantResource = new TenantResourceGroupRoles();
        try{
            zmsTestInitializer.getZms().putTenantResourceGroupRoles(rsrcCtx1, null, null, null, null, null, tenantResource);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
    }

    @Test
    public void testDeleteTenantResourceGroupRolesNull() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        try{
            zmsTestInitializer.getZms().deleteTenantResourceGroupRoles(rsrcCtx1, null, null, null, null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
    }

    @Test
    public void testGetResourceAccessListFailure() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        try{
            zmsTestInitializer.getZms().getResourceAccessList(rsrcCtx1, "principal", "UPDATE");
            fail();
        } catch(Exception ex) {
            assertTrue(true);
        }
    }

    @Test
    public void testGetResourceAccessListNullPrincipal() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);

        try{
            zmsTestInitializer.getZms().getResourceAccessList(rsrcCtx1, "", "UPDATE");
            fail();
        } catch(ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("principal is required for resource access list"));
        }

        try{
            zmsTestInitializer.getZms().getResourceAccessList(rsrcCtx1, null, "UPDATE");
            fail();
        } catch(ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("principal is required for resource access list"));
        }
    }

    @Test
    public void testGetResourceAccessList() {

        final String domainName1 = "resource-aws1";
        final String domainName2 = "resource-aws2";
        final String domainName3 = "resource-aws3";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAccount("aws-1234");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2,
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject(domainName3,
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        Group group31 = zmsTestInitializer.createGroupObject(domainName3, "group31", "user.john", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, "group31", zmsTestInitializer.getAuditRef(), false, group31);

        Group group32 = zmsTestInitializer.createGroupObject(domainName3, "group32", "user.john", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, "group32", zmsTestInitializer.getAuditRef(), false, group32);

        Group group33 = zmsTestInitializer.createGroupObject(domainName3, "group33", "user.jack", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, "group33", zmsTestInitializer.getAuditRef(), false, group33);

        // two roles in domain1 with aws access

        Role role1 = zmsTestInitializer.createRoleObject(domainName1, "aws-role1", null, "user.joe",
                ResourceUtils.groupResourceName(domainName3, "group31"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, "aws-role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName1, "aws-role2", null, "user.jane",
                ResourceUtils.groupResourceName(domainName3, "group32"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, "aws-role2", zmsTestInitializer.getAuditRef(), false, role2);

        // same roles in domain2 without aws access

        role1 = zmsTestInitializer.createRoleObject(domainName2, "aws-role1", null, "user.joe",
                ResourceUtils.groupResourceName(domainName3, "group31"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, "aws-role1", zmsTestInitializer.getAuditRef(), false, role1);

        role2 = zmsTestInitializer.createRoleObject(domainName2, "aws-role2", null, "user.jane",
                ResourceUtils.groupResourceName(domainName3, "group32"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, "aws-role2", zmsTestInitializer.getAuditRef(), false, role2);

        // similar roles in domain3 without any policies

        role1 = zmsTestInitializer.createRoleObject(domainName3, "aws-role1", null, "user.joe",
                ResourceUtils.groupResourceName(domainName3, "group33"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, "aws-role1", zmsTestInitializer.getAuditRef(), false, role1);

        role2 = zmsTestInitializer.createRoleObject(domainName3, "aws-role2", null, "user.jane",
                ResourceUtils.groupResourceName(domainName3, "group33"));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, "aws-role2", zmsTestInitializer.getAuditRef(), false, role2);

        // create the policies with assume_aws_role action

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName1, "policy1", "aws-role1",
                "assume_aws_role", domainName1 + ":role1-resource", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy2 = zmsTestInitializer.createPolicyObject(domainName1, "policy2", "aws-role2",
                "assume_aws_role", domainName1 + ":role2-resource", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        // same policies in domain 2 without aws access

        policy1 = zmsTestInitializer.createPolicyObject(domainName2, "policy1", "aws-role1",
                "assume_aws_role", domainName2 + ":role1-resource", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        policy2 = zmsTestInitializer.createPolicyObject(domainName2, "policy2", "aws-role2",
                "assume_aws_role", domainName2 + ":role2-resource", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, "policy2", zmsTestInitializer.getAuditRef(), false, policy2);

        // get the list of resources for user.joe with assume_aws_role action

        ResourceAccessList resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.joe", "assume_aws_role");
        assertNotNull(resourceAccessList);

        List<ResourceAccess> resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        ResourceAccess rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.joe");
        assertEquals(rsrcAccess.getAssertions().size(), 2);
        Set<String> resourceCheck = new HashSet<>();
        for (Assertion assertion : rsrcAccess.getAssertions()) {
            resourceCheck.add(assertion.getResource());
        }
        assertTrue(resourceCheck.contains("arn:aws:iam::aws-1234:role/role1-resource"));
        assertTrue(resourceCheck.contains("arn:aws:iam::aws-1234:role/role2-resource"));

        // get the list of resources for user.jane with assume_aws_role action

        resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.jane", "assume_aws_role");
        assertNotNull(resourceAccessList);

        resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.jane");
        assertEquals(rsrcAccess.getAssertions().size(), 1);
        assertEquals(rsrcAccess.getAssertions().get(0).getResource(), "arn:aws:iam::aws-1234:role/role2-resource");

        // get the list of resources for user.john with assume_aws_role action

        resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.john", "assume_aws_role");
        assertNotNull(resourceAccessList);

        resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.john");
        assertEquals(rsrcAccess.getAssertions().size(), 2);
        resourceCheck = new HashSet<>();
        for (Assertion assertion : rsrcAccess.getAssertions()) {
            resourceCheck.add(assertion.getResource());
        }
        assertTrue(resourceCheck.contains("arn:aws:iam::aws-1234:role/role1-resource"));
        assertTrue(resourceCheck.contains("arn:aws:iam::aws-1234:role/role2-resource"));

        // get the list of resources for unknown user with assume_aws_role action

        try {
            zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.unknown", "assume_aws_role");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // get the list of resources for user.joe with unknown action

        resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.joe", "unknown");
        assertNotNull(resourceAccessList);

        resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.joe");
        assertTrue(rsrcAccess.getAssertions().isEmpty());

        // get the list of resources for user.joe with null action

        resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.joe", null);
        assertNotNull(resourceAccessList);

        resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.joe");
        assertEquals(rsrcAccess.getAssertions().size(), 4);
        resourceCheck = new HashSet<>();
        for (Assertion assertion : rsrcAccess.getAssertions()) {
            resourceCheck.add(assertion.getResource());
        }
        assertTrue(resourceCheck.contains(domainName1 + ":role1-resource"));
        assertTrue(resourceCheck.contains(domainName1 + ":role2-resource"));
        assertTrue(resourceCheck.contains(domainName2 + ":role1-resource"));
        assertTrue(resourceCheck.contains(domainName2 + ":role2-resource"));

        // get the list of resources for user.jane with null action

        resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.jane", null);
        assertNotNull(resourceAccessList);

        resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.jane");
        assertEquals(rsrcAccess.getAssertions().size(), 2);
        resourceCheck = new HashSet<>();
        for (Assertion assertion : rsrcAccess.getAssertions()) {
            resourceCheck.add(assertion.getResource());
        }
        assertTrue(resourceCheck.contains(domainName1 + ":role2-resource"));
        assertTrue(resourceCheck.contains(domainName2 + ":role2-resource"));

        // get the list of resources for user.john with null action

        resourceAccessList = zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.john", null);
        assertNotNull(resourceAccessList);

        resources = resourceAccessList.getResources();
        assertEquals(resources.size(), 1);
        rsrcAccess = resources.get(0);
        assertEquals(rsrcAccess.getPrincipal(), "user.john");
        assertEquals(rsrcAccess.getAssertions().size(), 4);
        resourceCheck = new HashSet<>();
        for (Assertion assertion : rsrcAccess.getAssertions()) {
            resourceCheck.add(assertion.getResource());
        }
        assertTrue(resourceCheck.contains(domainName1 + ":role1-resource"));
        assertTrue(resourceCheck.contains(domainName1 + ":role2-resource"));
        assertTrue(resourceCheck.contains(domainName2 + ":role1-resource"));
        assertTrue(resourceCheck.contains(domainName2 + ":role2-resource"));

        // get the list of resources for unknown user with null action

        try {
            zmsTestInitializer.getZms().getResourceAccessList(zmsTestInitializer.getMockDomRsrcCtx(), "user.unknown", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteProviderResourceGroupRolesNull() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=user1;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);
        try{
            zmsTestInitializer.getZms().deleteProviderResourceGroupRoles(rsrcCtx1, null, null, null, null, null);
            fail();
        } catch(Exception ex) {
            assertTrue(true);
        }
    }

    @DataProvider(name = "roles")
    public static Object[][] getRoles() {
        final String memberName="member1";
        final String memberNameToSearch="notFound";
        final Timestamp expiredTimestamp = Timestamp.fromMillis(System.currentTimeMillis() - 10000);
        final Timestamp notExpiredTimestamp = Timestamp.fromMillis(System.currentTimeMillis() + 10000);

        return new Object[][] {
                //expired
                {memberName, memberName, expiredTimestamp, true, false},
                //not expired
                {memberName, memberName, notExpiredTimestamp, true, true},
                //not found
                {memberName, memberNameToSearch, notExpiredTimestamp, true, false},
                //set not filled which means no members are defined
                {memberName, memberName, notExpiredTimestamp, false, false},
                //null expiration
                {memberName, memberName, null, true, true},
        };
    }

    @Test(dataProvider = "roles")
    public void testIsMemberOfRole(final String memeberName, final String memberNameToSearch,
                                   Timestamp expiredTimestamp, boolean setRoleMembers, boolean isMember) {
        //Construct roleMembers
        List<RoleMember> roleMembers = new ArrayList<>();
        RoleMember roleMember = new RoleMember();
        roleMember.setMemberName(memeberName);
        roleMember.setExpiration(expiredTimestamp);
        roleMembers.add(roleMember);

        Role role = new Role();
        if (setRoleMembers) {
            role.setRoleMembers(roleMembers);
        }
        boolean actual = zmsTestInitializer.getZms().isMemberOfRole(role, memberNameToSearch);
        assertEquals(actual, isMember);
    }

    @Test
    public void testLogPrincipalEmpty() {

        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        ResourceContext ctx = zmsTestInitializer.getZms().newResourceContext(null, request, response, "apiName");
        zmsTestInitializer.getZms().logPrincipal(ctx);
        assertTrue(request.getAttributes().isEmpty());
    }

    @Test
    public void testIsSysAdminUserInvalidDomain() {
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal = SimplePrincipal.create("sports", "nhl", "v=S1;d=sports;n=nhl;s=signature",
                0, principalAuthority);
        assertNotNull(principal);
        assertFalse(zmsTestInitializer.getZms().isSysAdminUser(principal));
    }

    @Test
    public void testIsSysAdminUserValidDomain() {
        RsrcCtxWrapper ctx = zmsTestInitializer.contextWithMockPrincipal("postUserDomain");
        assertTrue(zmsTestInitializer.getZms().isSysAdminUser(ctx.principal()));
    }

    @Test
    public void testGetUserList() {

        ZMSTestUtils.cleanupNotAdminUsers(zmsTestInitializer.getZms(), zmsTestInitializer.getAdminUser(), zmsTestInitializer.getMockDomRsrcCtx());

        String domainName = "listusers1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("listusersports",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject("listuserweather",
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.joe", "user.janie");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "role2", null,
                "user.joe", "listusersports.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "role3", null,
                "user.jack", "listuserweather.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3", zmsTestInitializer.getAuditRef(), false, role3);

        Role role4 = zmsTestInitializer.createRoleObject("listusersports", "role4", null,
                "user.ana", "user.janie");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "listusersports", "role4", zmsTestInitializer.getAuditRef(), false, role4);

        UserList userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), null);
        List<String> users = userList.getNames();
        assertTrue(users.contains("user.testadminuser"));
        assertTrue(users.contains("user.janie"));
        assertTrue(users.contains("user.ana"));
        assertTrue(users.contains("user.jack"));
        assertTrue(users.contains("user.joe"));

        // retry the operation with the default user domain and
        // we should get the same results

        userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), "user");
        users = userList.getNames();
        assertTrue(users.contains("user.testadminuser"));
        assertTrue(users.contains("user.janie"));
        assertTrue(users.contains("user.ana"));
        assertTrue(users.contains("user.jack"));
        assertTrue(users.contains("user.joe"));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "listusersports", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "listuserweather", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetUserListInvalidDomain() {

        try {
            zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), "coretech");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("Unknown user domain"));
        }
    }

    @Test
    public void testGetUserListUserDomains() {

        Set<String> currentUserDomainSet = zmsTestInitializer.getZms().addlUserCheckDomainSet;
        zmsTestInitializer.getZms().addlUserCheckDomainSet = new HashSet<>();
        zmsTestInitializer.getZms().addlUserCheckDomainSet.add("unix");
        zmsTestInitializer.getZms().addlUserCheckDomainSet.add("grid");

        ZMSTestUtils.cleanupNotAdminUsers(zmsTestInitializer.getZms(), zmsTestInitializer.getAdminUser(), zmsTestInitializer.getMockDomRsrcCtx());

        String domainName = "listusersdomians";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("unix",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject("grid",
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.joe", "unix.nobody");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "role2", null,
                "user.joe", "grid.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "role3", null,
                "unix.root", "user.ana");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3", zmsTestInitializer.getAuditRef(), false, role3);

        UserList userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), null);
        List<String> users = userList.getNames();
        assertTrue(users.contains("user.testadminuser"));
        assertTrue(users.contains("user.joe"));
        assertTrue(users.contains("user.ana"));

        userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), "unix");
        users = userList.getNames();
        assertTrue(users.contains("unix.nobody"));
        assertTrue(users.contains("unix.root"));

        userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), "grid");
        users = userList.getNames();
        assertTrue(users.contains("grid.jane"));

        try {
            zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), "coretech");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("Unknown user domain"));
        }

        zmsTestInitializer.getZms().addlUserCheckDomainSet = currentUserDomainSet;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "unix", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "grid", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteUser() {

        final String domainName = "deleteuser1";

        ZMSTestUtils.cleanupNotAdminUsers(zmsTestInitializer.getZms(), zmsTestInitializer.getAdminUser(), zmsTestInitializer.getMockDomRsrcCtx());

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("deleteusersports",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        ServiceIdentity service = new ServiceIdentity().setName(ResourceUtils.serviceResourceName("deleteusersports", "api"));
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "deleteusersports", "api", zmsTestInitializer.getAuditRef(), false, service);

        SubDomain subDom1 = zmsTestInitializer.createSubDomainObject("jack", "user",
                "Test SubDomain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), subDom1);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("sub1", "user.jack",
                "Test SubDomain21", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.jack", zmsTestInitializer.getAuditRef(), subDom2);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.joe", "user.jack.sub1.service");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "role2", null,
                "user.joe", "deleteusersports.api");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "role3", null,
                "user.jack", "user.jack.sub1.api");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3", zmsTestInitializer.getAuditRef(), false, role3);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "dev-team", "user.joe", "user.jack.sub1.api");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "dev-team", zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject(domainName, "ops-team", "user.joe", "deleteusersports.api");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "ops-team", zmsTestInitializer.getAuditRef(), false, group2);

        Group group3 = zmsTestInitializer.createGroupObject(domainName, "qa-team", "user.jack", "user.jack.sub1.api");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "qa-team", zmsTestInitializer.getAuditRef(), false, group3);

        // fetch the objects, so we can track of their modification timestamps

        role1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", true, false, false);
        assertEquals(role1.getAuditLog().size(), 2);
        role2 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", true, false, false);
        assertEquals(role2.getAuditLog().size(), 2);
        role3 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3", true, false, false);
        assertEquals(role3.getAuditLog().size(), 2);

        group1 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "dev-team", true, false);
        assertEquals(group1.getAuditLog().size(), 2);
        group2 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "ops-team", true, false);
        assertEquals(group2.getAuditLog().size(), 2);
        group3 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "qa-team", true, false);
        assertEquals(group3.getAuditLog().size(), 2);

        UserList userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), null);
        List<String> users = userList.getNames();
        int userSize = users.size();
        assertTrue(users.contains("user.testadminuser"));
        assertTrue(users.contains("user.jack"));
        assertTrue(users.contains("user.joe"));

        // sleep for a second, so we can track of last modification
        // timestamp changes for objects

        ZMSTestUtils.sleep(1000);
        
        RsrcCtxWrapper ctx = zmsTestInitializer.contextWithMockPrincipal("deleteUser");

        zmsTestInitializer.getZms().deleteUser(ctx, "jack", zmsTestInitializer.getAuditRef());
        List<DomainChangeMessage> changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 4);
        assertChange(changeMsgs.get(0), DOMAIN, "user.jack", "user.jack", "deleteUser");
        assertChange(changeMsgs.get(1), DOMAIN, "user.jack.sub1", "user.jack.sub1", "deleteUser");
        assertChange(changeMsgs.get(2), ROLE, "deleteuser1", "role3", "deleteUser");
        assertChange(changeMsgs.get(3), GROUP, "deleteuser1", "qa-team", "deleteUser");
        
        Role role1Res = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", true, false, false);
        assertTrue(role1Res.getModified().millis() > role1.getModified().millis());
        assertEquals(role1Res.getAuditLog().size(), 3);

        // role2 was not modified thus we must have the same value

        Role role2Res = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", true, false, false);
        assertEquals(role2.getModified().millis(), role2Res.getModified().millis());
        assertEquals(role2Res.getAuditLog().size(), 2);

        Role role3Res = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3", true, false, false);
        assertTrue(role3Res.getModified().millis() > role3.getModified().millis());
        assertEquals(role3Res.getAuditLog().size(), 4);

        Group group1Res = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "dev-team", true, false);
        assertTrue(group1Res.getModified().millis() > group1.getModified().millis());
        assertEquals(group1Res.getAuditLog().size(), 3);

        // group2 was not modified thus we must have the same value

        Group group2Res = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "ops-team", true, false);
        assertEquals(group2.getModified().millis(), group2Res.getModified().millis());
        assertEquals(group2Res.getAuditLog().size(), 2);

        Group group3Res = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "qa-team", true, false);
        assertTrue(group3Res.getModified().millis() > group3.getModified().millis());
        assertEquals(group3Res.getAuditLog().size(), 4);

        userList = zmsTestInitializer.getZms().getUserList(zmsTestInitializer.getMockDomRsrcCtx(), null);
        users = userList.getNames();
        assertEquals(users.size(), userSize - 1);
        assertTrue(users.contains("user.testadminuser"));
        assertTrue(users.contains("user.joe"));
        assertFalse(users.contains("user.jack"));

        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.jack");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        try {
            zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.jack.sub1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "deleteusersports", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAdminUserForbidden() {

        // we should not be allowed to delete system admin users

        try {
            zmsTestInitializer.getZms().deleteUser(zmsTestInitializer.getMockDomRsrcCtx(), "testadminuser", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
            assertTrue(ex.getMessage().contains("system admin users cannot be deleted"));
        }
    }

    @Test
    public void testGetDomainRoleMembersInvalidDomain() {

        try {
            zmsTestInitializer.getZms().getDomainRoleMembers(zmsTestInitializer.getMockDomRsrcCtx(), "invalid-domain");
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }
    }

    @Test
    public void testDeleteDomainRoleMemberInvalidDomain() {

        try {
            zmsTestInitializer.getZms().deleteDomainRoleMember(zmsTestInitializer.getMockDomRsrcCtx(), "invalid-domain", "user.joe", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(404, ex.getCode());
        }
    }

    @Test
    public void testDeleteDomainRoleMember() {

        String domainName = "deletedomainrolemember2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.jack", "user.janie");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "role2", null,
                "user.janie", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName, "role3", null,
                "user.jack", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role3", zmsTestInitializer.getAuditRef(), false, role3);

        Role role4 = zmsTestInitializer.createRoleObject(domainName, "role4", null,
                "user.jack", null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role4", zmsTestInitializer.getAuditRef(), false, role4);

        Role role5 = zmsTestInitializer.createRoleObject(domainName, "role5", null,
                "user.jack-service", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role5", zmsTestInitializer.getAuditRef(), false, role5);

        DomainRoleMembers domainRoleMembers = zmsTestInitializer.getZms().getDomainRoleMembers(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domainName, domainRoleMembers.getDomainName());

        List<DomainRoleMember> members = domainRoleMembers.getMembers();
        assertNotNull(members);
        assertEquals(5, members.size());
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jack", "role1", "role3", "role4");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.janie", "role1", "role2");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jane", "role2", "role3", "role5");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jack-service", "role5");
        ZMSTestUtils.verifyDomainRoleMember(members, zmsTestInitializer.getAdminUser(), "admin");

        // with unknown user we get back 404

        try {
            zmsTestInitializer.getZms().deleteDomainRoleMember(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "user.unknown", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        members = domainRoleMembers.getMembers();
        assertNotNull(members);
        assertEquals(5, members.size());
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jack", "role1", "role3", "role4");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.janie", "role1", "role2");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jane", "role2", "role3", "role5");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jack-service", "role5");
        ZMSTestUtils.verifyDomainRoleMember(members, zmsTestInitializer.getAdminUser(), "admin");

        // now remove a known user

        zmsTestInitializer.getZms().deleteDomainRoleMember(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "user.jack", zmsTestInitializer.getAuditRef());

        domainRoleMembers = zmsTestInitializer.getZms().getDomainRoleMembers(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domainName, domainRoleMembers.getDomainName());

        members = domainRoleMembers.getMembers();
        assertNotNull(members);
        assertEquals(4, members.size());
        ZMSTestUtils.verifyDomainRoleMember(members, "user.janie", "role1", "role2");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jane", "role2", "role3", "role5");
        ZMSTestUtils.verifyDomainRoleMember(members, "user.jack-service", "role5");
        ZMSTestUtils.verifyDomainRoleMember(members, zmsTestInitializer.getAdminUser(), "admin");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutQuota() {

        String domainName = "putquota";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Quota quota = new Quota().setName(domainName)
                .setAssertion(10).setEntity(11)
                .setPolicy(12).setPublicKey(13)
                .setRole(14).setRoleMember(15)
                .setService(16).setServiceHost(17)
                .setSubdomain(18).setGroupMember(19).setGroup(20);

        zmsTestInitializer.getZms().putQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), quota);

        // now retrieve the quota using zms interface

        Quota quotaCheck = zmsTestInitializer.getZms().getQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(quotaCheck);
        assertEquals(quotaCheck.getAssertion(), 10);
        assertEquals(quotaCheck.getRole(), 14);
        assertEquals(quotaCheck.getPolicy(), 12);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutQuotaMismatchName() {

        String domainName = "putquotamismatchname";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Quota quota = new Quota().setName("athenz")
                .setAssertion(10).setEntity(11)
                .setPolicy(12).setPublicKey(13)
                .setRole(14).setRoleMember(15)
                .setService(16).setServiceHost(17)
                .setSubdomain(18);

        try {
            zmsTestInitializer.getZms().putQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), quota);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteQuota() {

        String domainName = "deletequota";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Quota quota = new Quota().setName(domainName)
                .setAssertion(10).setEntity(11)
                .setPolicy(12).setPublicKey(13)
                .setRole(14).setRoleMember(15)
                .setService(16).setServiceHost(17)
                .setSubdomain(18).setGroupMember(19).setGroup(20);

        zmsTestInitializer.getZms().putQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), quota);

        Quota quotaCheck = zmsTestInitializer.getZms().getQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(quotaCheck);
        assertEquals(domainName, quotaCheck.getName());
        assertEquals(quotaCheck.getAssertion(), 10);
        assertEquals(quotaCheck.getRole(), 14);
        assertEquals(quotaCheck.getPolicy(), 12);

        // now delete the quota

        zmsTestInitializer.getZms().deleteQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());

        // now we'll get the default quota

        quotaCheck = zmsTestInitializer.getZms().getQuota(zmsTestInitializer.getMockDomRsrcCtx(), domainName);

        assertEquals("server-default", quotaCheck.getName());
        assertEquals(quotaCheck.getAssertion(), 100);
        assertEquals(quotaCheck.getRole(), 1000);
        assertEquals(quotaCheck.getPolicy(), 1000);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUserHomeDomainResource() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        PrincipalAuthority principalAuthority = new com.yahoo.athenz.auth.impl.PrincipalAuthority();
        PrincipalAuthority testPrincipalAuthority = new com.yahoo.athenz.zms.TestUserPrincipalAuthority();

        // no changes expected

        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.homeDomain = "user";
        zmsImpl.homeDomainPrefix = "user.";
        zmsImpl.userAuthority = principalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "user.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "user.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        // no changes expected

        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.homeDomain = "user";
        zmsImpl.homeDomainPrefix = "user.";
        zmsImpl.userAuthority = testPrincipalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "user.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "user.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        // only domain name is changed - no username changes since user/home are same

        zmsImpl.userDomain = "testuser";
        zmsImpl.userDomainPrefix = "testuser.";
        zmsImpl.homeDomain = "testuser";
        zmsImpl.homeDomainPrefix = "testuser.";
        zmsImpl.userAuthority = principalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "testuser.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        // only domain name is changed - no username changes since user/home are same

        zmsImpl.userDomain = "testuser";
        zmsImpl.userDomainPrefix = "testuser.";
        zmsImpl.homeDomain = "testuser";
        zmsImpl.homeDomainPrefix = "testuser.";
        zmsImpl.userAuthority = testPrincipalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "testuser.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        // domain and username are changed since user/home namespaces are different
        // username impl in authority is default so we'll end up with same username

        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.homeDomain = "home";
        zmsImpl.homeDomainPrefix = "home.";
        zmsImpl.userAuthority = principalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "home.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "home.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.hga"), "user.hga");

        // domain and username are changed since user/home namespaces are different
        // username impl in authority will replace .'s with -'s

        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.homeDomain = "home";
        zmsImpl.homeDomainPrefix = "home.";
        zmsImpl.userAuthority = testPrincipalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "home.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "home.john-smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        // domain and username are changed since user/home namespaces are different
        // username impl in authority is default so we'll end up with same username

        zmsImpl.userDomain = "testuser";
        zmsImpl.userDomainPrefix = "testuser.";
        zmsImpl.homeDomain = "home";
        zmsImpl.homeDomainPrefix = "home.";
        zmsImpl.userAuthority = principalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "home.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "home.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        // domain and username are changed since user/home namespaces are different
        // username impl in authority will replace .'s with -'s

        zmsImpl.userDomain = "testuser";
        zmsImpl.userDomainPrefix = "testuser.";
        zmsImpl.homeDomain = "home";
        zmsImpl.homeDomainPrefix = "home.";
        zmsImpl.userAuthority = testPrincipalAuthority;
        assertEquals(zmsImpl.userHomeDomainResource("user.hga:domain"), "home.hga:domain");
        assertEquals(zmsImpl.userHomeDomainResource("user.john.smith:domain"), "home.john-smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("testuser.john.smith:domain"), "testuser.john.smith:domain");
        assertEquals(zmsImpl.userHomeDomainResource("product.john.smith:domain"), "product.john.smith:domain");

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testNormalizedAdminUsers() {
        List<String> list = new ArrayList<>();
        list.add("user-alias.user1");
        list.add("user-alias.user1.svc");
        list.add("user.user2");
        list.add("user.user2.svc");

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.userDomainAlias = null;
        zmsImpl.userDomainAliasPrefix = null;

        List<String> normList = zmsImpl.normalizedAdminUsers(list, null, "unit-test");
        assertEquals(normList.size(), 4);
        assertTrue(normList.contains("user-alias.user1"));
        assertTrue(normList.contains("user-alias.user1.svc"));
        assertTrue(normList.contains("user.user2"));
        assertTrue(normList.contains("user.user2.svc"));

        zmsImpl.userDomainAlias = "user-alias";
        zmsImpl.userDomainAliasPrefix = "user-alias.";

        normList = zmsImpl.normalizedAdminUsers(list, null, "unit-test");
        assertEquals(normList.size(), 4);
        assertTrue(normList.contains("user.user1"));
        assertTrue(normList.contains("user-alias.user1.svc"));
        assertTrue(normList.contains("user.user2"));
        assertTrue(normList.contains("user.user2.svc"));

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testNormalizeDomainAliasUser() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.userDomain = "user";
        zmsImpl.userDomainPrefix = "user.";
        zmsImpl.userDomainAlias = null;
        zmsImpl.userDomainAliasPrefix = null;

        assertNull(zmsImpl.normalizeDomainAliasUser(null));
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1"), "user-alias.user1");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1.svc"), "user-alias.user1.svc");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user2"), "user.user2");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user2.svc"), "user.user2.svc");

        zmsImpl.userDomainAlias = "user-alias";
        zmsImpl.userDomainAliasPrefix = "user-alias.";
        assertNull(zmsImpl.normalizeDomainAliasUser(null));
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1"), "user.user1");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user-alias.user1.svc"), "user-alias.user1.svc");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user2"), "user.user2");
        assertEquals(zmsImpl.normalizeDomainAliasUser("user.user2.svc"), "user.user2.svc");

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidateRequestSecureRequests() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.secureRequestsOnly = false;
        zmsImpl.statusPort = 0;

        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        when(request.isSecure()).thenReturn(true);

        // if secure requests is false, no check is done

        zmsImpl.validateRequest(request, "test");
        zmsImpl.validateRequest(request, "test", false);
        zmsImpl.validateRequest(request, "test", true);

        // should complete successfully since our request is true

        zmsImpl.secureRequestsOnly = true;
        zmsImpl.validateRequest(request, "test");
        zmsImpl.validateRequest(request, "test", false);
        zmsImpl.validateRequest(request, "test", true);

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidateRequestNonSecureRequests() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.secureRequestsOnly = true;
        zmsImpl.statusPort = 0;

        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);

        // if request is not secure, should be rejected

        when(request.isSecure()).thenReturn(false);
        try {
            zmsImpl.validateRequest(request, "test");
            fail();
        } catch (ResourceException ignored) {
        }
        try {
            zmsImpl.validateRequest(request, "test", false);
            fail();
        } catch (ResourceException ignored) {
        }
        try {
            zmsImpl.validateRequest(request, "test", true);
            fail();
        } catch (ResourceException ignored) {
        }

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidateRequestStatusRequestPort() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.secureRequestsOnly = true;
        zmsImpl.statusPort = 8443;

        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        when(request.isSecure()).thenReturn(true);
        when(request.getLocalPort()).thenReturn(4443);

        // non-status requests are allowed on port 4443

        zmsImpl.validateRequest(request, "test");
        zmsImpl.validateRequest(request, "test", false);

        // status requests are not allowed on port 4443

        try {
            zmsImpl.validateRequest(request, "test", true);
            fail();
        } catch (ResourceException ignored) {
        }

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidateRequestRegularRequestPort() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.secureRequestsOnly = true;
        zmsImpl.statusPort = 8443;

        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        when(request.isSecure()).thenReturn(true);
        when(request.getLocalPort()).thenReturn(8443);

        // status requests are allowed on port 8443

        zmsImpl.validateRequest(request, "test", true);

        // non-status requests are not allowed on port 8443

        try {
            zmsImpl.validateRequest(request, "test");
            fail();
        } catch (ResourceException ignored) {
        }

        try {
            zmsImpl.validateRequest(request, "test", false);
            fail();
        } catch (ResourceException ignored) {
        }

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testGetStatus() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;
        Status status = zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
        assertEquals(status.getCode(), ResourceException.OK);

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testGetStatusWithStatusFile() throws IOException {

        System.setProperty(ZMSConsts.ZMS_PROP_HEALTH_CHECK_PATH, "/tmp/zms-healthcheck");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;

        // without the file we should get failure - make sure
        // to delete it just in case left over from previous run

        File healthCheckFile = new File("/tmp/zms-healthcheck");
        healthCheckFile.delete();

        try {
            zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ResourceException.NOT_FOUND, ex.getCode());
        }

        // create the status file

        new FileOutputStream(healthCheckFile).close();
        Status status = zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
        assertEquals(ResourceException.OK, status.getCode());

        // delete the status file

        healthCheckFile.delete();
        try {
            zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ResourceException.NOT_FOUND, ex.getCode());
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_HEALTH_CHECK_PATH);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testGetStatusWithStatusChecker() {

        // if the MockStatusCheckerNoException is set
        // the MockStatusCheckerNoException determines the server is healthy

        System.setProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS,
                MockStatusCheckerNoException.class.getName());
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;

        Status status = zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
        assertEquals(ResourceException.OK, status.getCode());

        // if the MockStatusCheckerThrowException is set
        // the MockStatusCheckerThrowException determines that there is a problem with the server

        System.setProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS,
                MockStatusCheckerThrowException.NoArguments.class.getName());
        zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;

        try {
            zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
            fail();
        } catch (ResourceException ex) {
            int code = com.yahoo.athenz.common.server.rest.ResourceException.INTERNAL_SERVER_ERROR;
            String msg = com.yahoo.athenz.common.server.rest.ResourceException.symbolForCode(ResourceException.INTERNAL_SERVER_ERROR);
            assertEquals(new ResourceError().code(code).message(msg).toString(), ex.getData().toString());
        }

        System.setProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS,
                MockStatusCheckerThrowException.NotFound.class.getName());
        zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;

        try {
            zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
            fail();
        } catch (ResourceException ex) {
            int code = com.yahoo.athenz.common.server.rest.ResourceException.NOT_FOUND;
            String msg = com.yahoo.athenz.common.server.rest.ResourceException.symbolForCode(ResourceException.NOT_FOUND);
            assertEquals(new ResourceError().code(code).message(msg).toString(), ex.getData().toString());
        }

        System.setProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS,
                MockStatusCheckerThrowException.InternalServerErrorWithMessage.class.getName());
        zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;

        try {
            zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
            fail();
        } catch (ResourceException ex) {
            int code = com.yahoo.athenz.common.server.rest.ResourceException.INTERNAL_SERVER_ERROR;
            String msg = "error message";
            assertEquals(new ResourceError().code(code).message(msg).toString(), ex.getData().toString());
        }

        System.setProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS,
                MockStatusCheckerThrowException.CauseRuntimeException.class.getName());
        zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.statusPort = 0;

        try {
            zmsImpl.getStatus(zmsTestInitializer.getMockDomRsrcCtx());
            fail();
        } catch (ResourceException ex) {
            int code = com.yahoo.athenz.common.server.rest.ResourceException.INTERNAL_SERVER_ERROR;
            String msg = "runtime exception";
            assertEquals(new ResourceError().code(code).message(msg).toString(), ex.getData().toString());
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidateString() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.validateString(null, "CompoundName", "unit-test");
        zmsImpl.validateString("", "CompoundName", "unit-test");
        zmsImpl.validateString("124356789012", "CompoundName", "unit-test");
        zmsImpl.validateString("unit-test_test-101", "CompoundName", "unit-test");
        try {
            zmsImpl.validateString("unit test", "CompoundName", "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testgetModTimestampEmtpy() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertEquals(zmsImpl.getModTimestamp(null), 0);
        assertEquals(zmsImpl.getModTimestamp("\"\""), 0);
        assertEquals(zmsImpl.getModTimestamp(""), 0);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidCORSOrigin() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        // invalid origin values tests

        assertFalse(zmsImpl.isValidCORSOrigin(null));
        assertFalse(zmsImpl.isValidCORSOrigin(""));

        // origin white list not configured tests

        zmsImpl.corsOriginList = null;
        assertTrue(zmsImpl.isValidCORSOrigin("http://cors.origin1"));
        assertTrue(zmsImpl.isValidCORSOrigin("http://cors.origin2"));
        assertTrue(zmsImpl.isValidCORSOrigin("https://cors.origin2"));
        assertTrue(zmsImpl.isValidCORSOrigin("https://cors.origin2:4443"));

        assertFalse(zmsImpl.isValidCORSOrigin("https://cors.origin2:2000000"));
        assertFalse(zmsImpl.isValidCORSOrigin("https://cors.origin2:-2"));
        assertFalse(zmsImpl.isValidCORSOrigin("https://cors.origin2/"));
        assertFalse(zmsImpl.isValidCORSOrigin("https://cors.origin2/data"));
        assertFalse(zmsImpl.isValidCORSOrigin("https://cors.origin2:443?test=data"));
        assertFalse(zmsImpl.isValidCORSOrigin("file://cors.origin2"));
        assertFalse(zmsImpl.isValidCORSOrigin("https://cors origin2"));
        assertFalse(zmsImpl.isValidCORSOrigin("https://cors%20origin2"));

        zmsImpl.corsOriginList = new HashSet<>();
        assertTrue(zmsImpl.isValidCORSOrigin("http://cors.origin1"));
        assertTrue(zmsImpl.isValidCORSOrigin("https://cors.origin2"));
        assertFalse(zmsImpl.isValidCORSOrigin("file://cors.origin2"));

        // origin white list configured tests

        zmsImpl.corsOriginList.add("http://cors.origin1");
        assertTrue(zmsImpl.isValidCORSOrigin("http://cors.origin1"));
        assertFalse(zmsImpl.isValidCORSOrigin("http://cors.origin2"));

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testValidateServiceName() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        // reserved names
        assertFalse(zmsImpl.isValidServiceName("com"));
        assertFalse(zmsImpl.isValidServiceName("gov"));
        assertFalse(zmsImpl.isValidServiceName("info"));
        assertFalse(zmsImpl.isValidServiceName("org"));

        assertTrue(zmsImpl.isValidServiceName("svc"));
        assertTrue(zmsImpl.isValidServiceName("acom"));
        assertTrue(zmsImpl.isValidServiceName("coms"));
        assertTrue(zmsImpl.isValidServiceName("borg"));

        // service names with 1 or 2 chars

        assertFalse(zmsImpl.isValidServiceName("u"));
        assertFalse(zmsImpl.isValidServiceName("k"));
        assertFalse(zmsImpl.isValidServiceName("r"));

        assertFalse(zmsImpl.isValidServiceName("us"));
        assertFalse(zmsImpl.isValidServiceName("uk"));
        assertFalse(zmsImpl.isValidServiceName("fr"));

        // set the min length to 0 and verify all pass

        zmsImpl.serviceNameMinLength = 0;
        assertTrue(zmsImpl.isValidServiceName("r"));
        assertTrue(zmsImpl.isValidServiceName("us"));
        assertTrue(zmsImpl.isValidServiceName("svc"));

        // set map to null and verify all pass

        zmsImpl.reservedServiceNames = null;
        assertTrue(zmsImpl.isValidServiceName("com"));
        assertTrue(zmsImpl.isValidServiceName("gov"));

        // create new impl objects with new settings

        System.setProperty(ZMSConsts.ZMS_PROP_RESERVED_SERVICE_NAMES, "one,two");
        System.setProperty(ZMSConsts.ZMS_PROP_SERVICE_NAME_MIN_LENGTH, "0");
        ZMSImpl zmsImpl2 = zmsTestInitializer.zmsInit();

        assertTrue(zmsImpl2.isValidServiceName("com"));
        assertTrue(zmsImpl2.isValidServiceName("gov"));
        assertTrue(zmsImpl2.isValidServiceName("info"));

        assertFalse(zmsImpl2.isValidServiceName("one"));
        assertFalse(zmsImpl2.isValidServiceName("two"));

        assertTrue(zmsImpl2.isValidServiceName("u"));
        assertTrue(zmsImpl2.isValidServiceName("k"));
        assertTrue(zmsImpl2.isValidServiceName("r"));
        System.clearProperty(ZMSConsts.ZMS_PROP_RESERVED_SERVICE_NAMES);
        System.clearProperty(ZMSConsts.ZMS_PROP_SERVICE_NAME_MIN_LENGTH);

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testRetrieveSignedDomainMeta() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        Domain domainMeta = new Domain().setName("dom1").setYpmId(123).setModified(Timestamp.fromCurrentTime())
                .setAccount("1234").setAuditEnabled(true).setOrg("org").setAzureSubscription("4567").setBusinessService("123:business service");
        SignedDomain domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, null);
        assertNull(domain.getDomain().getAccount());
        assertNull(domain.getDomain().getYpmId());
        assertNull(domain.getDomain().getOrg());
        assertNull(domain.getDomain().getAuditEnabled());
        assertNull(domain.getDomain().getAzureSubscription());
        assertNull(domain.getDomain().getBusinessService());

        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "unknown");
        assertNull(domain.getDomain().getAccount());
        assertNull(domain.getDomain().getYpmId());
        assertNull(domain.getDomain().getOrg());
        assertNull(domain.getDomain().getAuditEnabled());
        assertNull(domain.getDomain().getAzureSubscription());
        assertNull(domain.getDomain().getBusinessService());

        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "account");
        assertEquals(domain.getDomain().getAccount(), "1234");
        assertNull(domain.getDomain().getYpmId());
        assertNull(domain.getDomain().getOrg());
        assertNull(domain.getDomain().getAuditEnabled());
        assertNull(domain.getDomain().getAzureSubscription());
        assertNull(domain.getDomain().getBusinessService());

        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "ypmid");
        assertNull(domain.getDomain().getAccount());
        assertEquals(domain.getDomain().getYpmId().intValue(), 123);
        assertNull(domain.getDomain().getOrg());
        assertNull(domain.getDomain().getAuditEnabled());
        assertNull(domain.getDomain().getAzureSubscription());
        assertNull(domain.getDomain().getBusinessService());

        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "azuresubscription");
        assertEquals(domain.getDomain().getAzureSubscription(), "4567");
        assertNull(domain.getDomain().getAccount());
        assertNull(domain.getDomain().getYpmId());
        assertNull(domain.getDomain().getOrg());
        assertNull(domain.getDomain().getAuditEnabled());
        assertNull(domain.getDomain().getBusinessService());

        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "businessservice");
        assertEquals(domain.getDomain().getBusinessService(), "123:business service");
        assertNull(domain.getDomain().getAccount());
        assertNull(domain.getDomain().getYpmId());
        assertNull(domain.getDomain().getOrg());
        assertNull(domain.getDomain().getAuditEnabled());
        assertNull(domain.getDomain().getAzureSubscription());

        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "all");
        assertEquals(domain.getDomain().getAccount(), "1234");
        assertEquals(domain.getDomain().getAzureSubscription(), "4567");
        assertEquals(domain.getDomain().getYpmId().intValue(), 123);
        assertEquals(domain.getDomain().getOrg(), "org");
        assertTrue(domain.getDomain().getAuditEnabled());
        assertEquals(domain.getDomain().getBusinessService(), "123:business service");

        domainMeta.setAccount(null);
        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "account");
        assertNull(domain);

        domainMeta.setAzureSubscription(null);
        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "azuresubscription");
        assertNull(domain);

        domainMeta.setBusinessService(null);
        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "businessservice");
        assertNull(domain);

        domainMeta.setAccount("1234");
        domainMeta.setYpmId(null);
        domain = zmsImpl.retrieveSignedDomainMeta(domainMeta, "ypmid");
        assertNull(domain);

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testRetrieveSignedDomainDataNotFound() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        Domain dom = new Domain().setName("unknown").setModified(Timestamp.fromMillis(1234));
        SignedDomain domain = zmsImpl.retrieveSignedDomainData(dom, true, false);
        assertNull(domain);

        // now signed domains with unknown domain name

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        Response response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, "unknown", null, null, Boolean.TRUE, false, null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        List<SignedDomain> list = sdoms.getDomains();
        assertEquals(0, list.size());

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testGetSignedDomainsWithMetaAttrs() {

        // create multiple top level domains
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SignedDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // set the meta attributes for domain

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain1", null, true, false, "12345", 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", zmsTestInitializer.getAuditRef(), meta);
        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain1", null, true, false, "12345", 987654103);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "account", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", "productid", zmsTestInitializer.getAuditRef(), meta);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("SignedDom2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain2", null, true, false, "12346", null);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom2", zmsTestInitializer.getAuditRef(), meta);
        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain2", null, true, false, "12346", null);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom2", "account", zmsTestInitializer.getAuditRef(), meta);

        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), "signeddom2", "productid");
        meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain2", null, true, false, "12346", null);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom2", "productid", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());

        DomainList domList = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, null, null);
        assertNotNull(domList);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        // we're going to ask for entries with ypm id so we'll only
        // get one of the domains back - dom1 but not dom2

        Response response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, null, "true", "ypmid", Boolean.TRUE, false, null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);
        List<SignedDomain> list = sdoms.getDomains();
        assertNotNull(list);

        boolean dom1Found = false;
        boolean dom2Found = false;
        for (SignedDomain sDomain : list) {
            DomainData domainData = sDomain.getDomain();
            switch (domainData.getName()) {
                case "signeddom1":
                    dom1Found = true;
                    break;
                case "signeddom2":
                    dom2Found = true;
                    break;
            }
        }
        assertTrue(dom1Found);
        assertFalse(dom2Found);

        // now asking for specific domains with ypm id
        // first signeddom1 with should return

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, "signeddom1", "true", "ypmid", Boolean.TRUE, false, null);
        sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), 1);

        DomainData domainData = list.get(0).getDomain();
        assertEquals(domainData.getName(), "signeddom1");

        // then signeddom2 with should not return

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, "signeddom2", "true", "ypmid", Boolean.TRUE, false, null);
        sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        list = sdoms.getDomains();
        assertNotNull(list);
        assertEquals(list.size(), 0);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetSignedDomainsNotModified() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SignedDom1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // set the meta attributes for domain

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Tenant Domain1", null, true, false, "12345", 0);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1", zmsTestInitializer.getAuditRef(), meta);

        zmsTestInitializer.getZms().privateKey = new ServerPrivateKey(Crypto.loadPrivateKey(Crypto.ybase64DecodeString(zmsTestInitializer.getPrivKey())), "0");

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        EntityTag eTag = new EntityTag(Timestamp.fromCurrentTime().toString());
        Response response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, "signeddom1", null, null, Boolean.TRUE, false, eTag.toString());
        assertEquals(response.getStatus(), 304);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "SignedDom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetSignedDomainsException503() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        DBService dbService = Mockito.mock(DBService.class);
        when(dbService.getDomain("signeddom1", true)).thenThrow(new ResourceException(503));
        zmsImpl.dbService = dbService;

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        try {
            zmsImpl.getSignedDomains(rsrcCtx, "signeddom1", null, null, Boolean.TRUE, false, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 503);
        }

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testGetSignedDomainsException404() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        DBService dbService = Mockito.mock(DBService.class);
        when(dbService.getDomain("signeddom1", true)).thenThrow(new ResourceException(404));
        zmsImpl.dbService = dbService;

        // now signed domains with unknown domain name

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        Response response = zmsImpl.getSignedDomains(rsrcCtx, "signeddom1", null, null, Boolean.TRUE, false, null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();

        assertNotNull(sdoms);
        List<SignedDomain> list = sdoms.getDomains();
        assertEquals(0, list.size());

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testReceiveSignedDomainDataDisabled() {

        // create multiple top level domains
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("SignedDom1Disabled",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // load the domain into cache and set the enabled to false

        zmsTestInitializer.getZms().getAthenzDomain("signeddom1disabled", true);
        ObjectStoreConnection conn = zmsTestInitializer.getZms().dbService.store.getConnection(true, false);
        zmsTestInitializer.getZms().dbService.getAthenzDomainFromCache(conn, "signeddom1disabled").getDomain().setEnabled(false);

        // get the domain which would return from cache

        Domain dom = new Domain().setName("signeddom1disabled").setModified(Timestamp.fromMillis(0));
        SignedDomain signedDomain = zmsTestInitializer.getZms().retrieveSignedDomainData(dom, false, false);
        assertFalse(signedDomain.getDomain().getEnabled());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "signeddom1disabled", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testReceiveSignedDomainDataAuditExpiryFields() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        Authority savedAuthority = zmsImpl.userAuthority;
        final String domainName = "signed-dom-fields";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAuditEnabled(true);
        dom1.setTokenExpiryMins(10);
        dom1.setRoleCertExpiryMins(20);
        dom1.setServiceCertExpiryMins(30);
        dom1.setDescription("test description");
        dom1.setCertDnsDomain("test dns domain");
        dom1.setOrg("org");
        dom1.setUserAuthorityFilter("OnShore-US");
        dom1.setMemberExpiryDays(40);
        dom1.setGroupExpiryDays(50);
        dom1.setServiceExpiryDays(60);

        Authority authority = Mockito.mock(Authority.class);
        when(authority.getDateAttribute("user.testadminuser", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.testadminuser", "OnShore-US")).thenReturn(true);
        Set<String> attrs = new HashSet<>();
        attrs.add("OnShore-US");
        attrs.add("elevated-clearance");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsImpl.userAuthority = authority;
        zmsImpl.dbService.zmsConfig.setUserAuthority(authority);

        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        // get the domain which would return from cache

        Domain dom = new Domain().setName(domainName).setModified(Timestamp.fromMillis(0));
        SignedDomain signedDomain = zmsImpl.retrieveSignedDomainData(dom, false, false);
        assertTrue(signedDomain.getDomain().getAuditEnabled());
        assertEquals(Integer.valueOf(10), signedDomain.getDomain().getTokenExpiryMins());
        assertEquals(Integer.valueOf(20), signedDomain.getDomain().getRoleCertExpiryMins());
        assertEquals(Integer.valueOf(30), signedDomain.getDomain().getServiceCertExpiryMins());
        assertEquals("test description", signedDomain.getDomain().getDescription());
        assertEquals("test dns domain", signedDomain.getDomain().getCertDnsDomain());
        assertEquals("org", signedDomain.getDomain().getOrg());
        assertEquals("OnShore-US", signedDomain.getDomain().getUserAuthorityFilter());
        assertEquals(Integer.valueOf(40), signedDomain.getDomain().getMemberExpiryDays());
        assertEquals(Integer.valueOf(50), signedDomain.getDomain().getGroupExpiryDays());
        assertEquals(Integer.valueOf(60), signedDomain.getDomain().getServiceExpiryDays());

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
        zmsImpl.userAuthority = savedAuthority;
        zmsImpl.dbService.zmsConfig.setUserAuthority(savedAuthority);
    }

    @Test
    public void testValidateTenancyObject() {

        Tenancy tenant = new Tenancy().setDomain("athenz").setService("sports.provider");
        assertTrue(zmsTestInitializer.getZms().validateTenancyObject(tenant, "athenz", "sports.provider"));
        assertFalse(zmsTestInitializer.getZms().validateTenancyObject(tenant, "athens", "sports.provider"));
        assertFalse(zmsTestInitializer.getZms().validateTenancyObject(tenant, "athenz", "sports.providers"));
    }

    @Test
    public void testPutTenantInvalidObject() {

        Tenancy tenant = new Tenancy().setDomain("sports").setService("athenz.provider");
        try {
            zmsTestInitializer.getZms().putTenant(zmsTestInitializer.getMockDomRsrcCtx(), "athenz", "provider", "weather", zmsTestInitializer.getAuditRef(), tenant);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }
    }

    @Test
    public void testPutTenantInvalidService() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("providerdomain2",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Tenancy tenant = new Tenancy().setDomain("sports").setService("providerdomain2.service");
        try {
            zmsTestInitializer.getZms().putTenant(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain2", "service", "sports", zmsTestInitializer.getAuditRef(), tenant);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenant() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("providerdomain",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Sports Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName("providerdomain", "api"));
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", "api", zmsTestInitializer.getAuditRef(), false, service);

        Tenancy tenant = new Tenancy().setDomain("sports").setService("providerdomain.api");
        zmsTestInitializer.getZms().putTenant(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", "api", "sports", zmsTestInitializer.getAuditRef(), tenant);

        assertPutTenantTests(zmsTestInitializer.getZms());

        // Verify domain dependency wasn't created as the provider isn't listed in the "sys.auth:role.service_providers role

        try {
            zmsTestInitializer.getZms().getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain.api");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"providerdomain.api is not a registered service provider\"}");
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutTenantDomainDependency() {
        ZMSImpl zms = zmsTestInitializer.zmsInit();
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("providerdomain",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zms.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "Sports Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zms.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName("providerdomain", "api"));
        zms.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", "api", zmsTestInitializer.getAuditRef(), false, service);

        makeServiceProviders(zms, zmsTestInitializer.getMockDomRsrcCtx(), Collections.singletonList("providerdomain.api"));
        // Swith to service provider context
        RsrcCtxWrapper serviceProviderCtx = zmsTestInitializer.contextWithMockPrincipal("putTenant", "providerdomain", "api");

        Tenancy tenant = new Tenancy().setDomain("sports").setService("providerdomain.api");
        zms.putTenant(serviceProviderCtx, "providerdomain", "api", "sports", zmsTestInitializer.getAuditRef(), tenant);

        assertPutTenantTests(zms);

        // Verify domain dependency was created

        DomainList dependentDomainList = zms.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain.api");
        assertEquals(dependentDomainList.getNames().size(), 1);
        assertEquals(dependentDomainList.getNames().get(0), "sports");

        // Delete tenant, verify domain dependency was removed

        zms.deleteTenant(serviceProviderCtx, "providerdomain", "api", "sports", zmsTestInitializer.getAuditRef());
        dependentDomainList = zms.getDependentDomainList(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain.api");
        assertEquals(dependentDomainList.getNames().size(), 0);

        zms.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "service_providers", zmsTestInitializer.getAuditRef());
        zms.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", zmsTestInitializer.getAuditRef());
        zms.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef());
    }

    private void assertPutTenantTests(ZMSImpl zms) {
        Role role = zms.getRole(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", "api.tenant.sports.admin", false, false, false);
        assertNotNull(role);
        assertEquals(role.getTrust(), "sports");

        Policy policy = zms.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomain", "api.tenant.sports.admin");
        assertNotNull(policy);
        assertEquals(policy.getAssertions().size(), 1);
        Assertion assertion = policy.getAssertions().get(0);
        assertEquals(assertion.getAction(), "*");
        assertEquals(assertion.getRole(), "providerdomain:role.api.tenant.sports.admin");
        assertEquals(assertion.getResource(), "providerdomain:service.api.tenant.sports.*");
    }

    @Test
    public void testDeleteTenant() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("providerdomaindelete",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain sportsDomain = zmsTestInitializer.createTopLevelDomainObject("sports",
                "sports domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), sportsDomain);

        ServiceIdentity service = new ServiceIdentity();
        service.setName(ResourceUtils.serviceResourceName("providerdomaindelete", "api"));
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api", zmsTestInitializer.getAuditRef(), false, service);

        Tenancy tenant = new Tenancy().setDomain("sports").setService("providerdomaindelete.api");
        zmsTestInitializer.getZms().putTenant(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api", "sports", zmsTestInitializer.getAuditRef(), tenant);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api.tenant.sports.admin", false, false, false);
        assertNotNull(role);

        Policy policy = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api.tenant.sports.admin");
        assertNotNull(policy);

        zmsTestInitializer.getZms().deleteTenant(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api", "sports", zmsTestInitializer.getAuditRef());

        try {
            zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api.tenant.sports.admin", false, false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        try {
            zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", "api.tenant.sports.admin");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sports", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteTenantInvalidService() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("providerdomaindelete2",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        try {
            zmsTestInitializer.getZms().deleteTenant(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete2", "api", "sports", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "providerdomaindelete2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidateTenantResourceGroupRolesObject() {

        List<TenantRoleAction> list = new ArrayList<>();
        list.add(new TenantRoleAction().setRole("role").setAction("action"));

        TenantResourceGroupRoles roles = new TenantResourceGroupRoles()
                .setTenant("tenant").setDomain("domain").setResourceGroup("resourcegroup")
                .setService("service").setRoles(list);

        assertTrue(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup"));

        assertFalse(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain1", "service",
                "tenant", "resourcegroup"));
        assertFalse(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain", "service1",
                "tenant", "resourcegroup"));
        assertFalse(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain", "service",
                "tenant1", "resourcegroup"));
        assertFalse(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup1"));

        list.clear();
        assertFalse(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup"));

        roles.setRoles(null);
        assertFalse(zmsTestInitializer.getZms().validateTenantResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup"));
    }

    @Test
    public void testValidateProviderResourceGroupRolesObject() {

        List<TenantRoleAction> list = new ArrayList<>();
        list.add(new TenantRoleAction().setRole("role").setAction("action"));

        ProviderResourceGroupRoles roles = new ProviderResourceGroupRoles()
                .setTenant("tenant").setDomain("domain").setResourceGroup("resourcegroup")
                .setService("service").setRoles(list);

        assertTrue(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup"));

        assertFalse(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain1", "service",
                "tenant", "resourcegroup"));
        assertFalse(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain", "service1",
                "tenant", "resourcegroup"));
        assertFalse(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain", "service",
                "tenant1", "resourcegroup"));
        assertFalse(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup1"));

        list.clear();
        assertFalse(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup"));

        roles.setRoles(null);
        assertFalse(zmsTestInitializer.getZms().validateProviderResourceGroupRolesObject(roles, "domain", "service",
                "tenant", "resourcegroup"));
    }

    @Test
    public void testTenancyIdenticalProviderTenantDomains() {

        List<TenantRoleAction> roleActions = new ArrayList<>();
        for (Struct.Field f : ZMSTestInitializer.TABLE_PROVIDER_ROLE_ACTIONS) {
            roleActions.add(new TenantRoleAction().setRole(f.name()).setAction(
                    (String) f.value()));
        }
        String tenantDomain = "identicaldomain";
        String providerDomain = "identicaldomain";
        String providerService  = "storage";
        String providerFullService = providerDomain + "." + providerService;
        String resourceGroup = "group1";

        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles()
                .setDomain(providerDomain)
                .setService(providerService)
                .setTenant(tenantDomain)
                .setRoles(roleActions).setResourceGroup(resourceGroup);

        try {
            zmsTestInitializer.getZms().putTenantResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, providerService,
                    tenantDomain, resourceGroup, zmsTestInitializer.getAuditRef(), tenantRoles);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Provider and tenant domains cannot be the same"));
        }

        Tenancy tenant = new Tenancy().setDomain(tenantDomain).setService(providerFullService);
        try {
            zmsTestInitializer.getZms().putTenant(zmsTestInitializer.getMockDomRsrcCtx(), providerDomain, providerService, tenantDomain,
                    zmsTestInitializer.getAuditRef(), tenant);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Provider and tenant domains cannot be the same"));
        }

        tenant = zmsTestInitializer.createTenantObject(tenantDomain, providerFullService);
        try {
            zmsTestInitializer.getZms().putTenancy(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerFullService, zmsTestInitializer.getAuditRef(), tenant);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Provider and tenant domains cannot be the same"));
        }

        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
                .setDomain(providerDomain).setService(providerService)
                .setTenant(tenantDomain).setRoles(roleActions)
                .setResourceGroup(resourceGroup);

        try {
            zmsTestInitializer.getZms().putProviderResourceGroupRoles(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomain, providerDomain,
                    providerService, resourceGroup, zmsTestInitializer.getAuditRef(), providerRoles);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Provider and tenant domains cannot be the same"));
        }
    }

    @Test
    public void testGetAuthorityInvalid() {
        assertNull(zmsTestInitializer.getZms().getAuthority("invalid.class"));
    }

    @Test
    public void testLoadAuditRefValidator(){
        System.setProperty(ZMSConsts.ZMS_PROP_AUDIT_REF_VALIDATOR_FACTORY_CLASS, "com.yahoo.athenz.zms.audit.MockAuditReferenceValidatorFactoryImpl");
        zmsTestInitializer.getZms().loadAuditRefValidator();
        assertNotNull(zmsTestInitializer.getZms().auditReferenceValidator);
        System.clearProperty(ZMSConsts.ZMS_PROP_AUDIT_REF_VALIDATOR_FACTORY_CLASS);
    }

    @Test
    public void testNullLoadAuditRefValidator(){
        System.setProperty(ZMSConsts.ZMS_PROP_AUDIT_REF_VALIDATOR_FACTORY_CLASS, "does.not.exist");
        try {
            zmsTestInitializer.getZms().loadAuditRefValidator();
        } catch (IllegalArgumentException e) {
            assertEquals(e.getMessage(), "Invalid audit reference factory class");
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_AUDIT_REF_VALIDATOR_FACTORY_CLASS);
    }

    @Test
    public void testDefaultValuesOnCreation() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        assertEquals(zmsImpl.virtualDomainLimit, 5);
        assertNull(zmsImpl.userDomainAliasPrefix);
        assertEquals(zmsImpl.signedPolicyTimeout, 1000 * 604800);
    }

    @Test
    public void testConfigOverridesOnCreation() {

        TestAuditLogger alogger = new TestAuditLogger();

        System.setProperty(ZMSConsts.ZMS_PROP_USER_DOMAIN_ALIAS, "xyz");
        System.setProperty(ZMSConsts.ZMS_PROP_SIGNED_POLICY_TIMEOUT, "86400");
        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "10");
        System.setProperty(ZMSConsts.ZMS_PROP_CORS_ORIGIN_LIST, "a.com,b.com");

        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        assertEquals(zmsImpl.virtualDomainLimit, 10);
        assertEquals(zmsImpl.userDomainAliasPrefix, "xyz.");
        assertEquals(zmsImpl.signedPolicyTimeout, 1000 * 86400);

        assertTrue(zmsImpl.isValidCORSOrigin("a.com"));

        System.clearProperty(ZMSConsts.ZMS_PROP_USER_DOMAIN_ALIAS);
        System.clearProperty(ZMSConsts.ZMS_PROP_SIGNED_POLICY_TIMEOUT);
        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
        System.clearProperty(ZMSConsts.ZMS_PROP_CORS_ORIGIN_LIST);
    }

    @Test
    public void testPostSubDomainSkipSystemAttributes() {

        final String domainName = "subdomain-with-system-attrs";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAzureSubscription("azure");
        dom1.setAccount("aws");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain dom1Res = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(dom1Res.getAccount(), "aws");
        assertEquals(dom1Res.getAzureSubscription(), "azure");

        SubDomain dom2 = zmsTestInitializer.createSubDomainObject("sub", domainName, "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        dom2.setAzureSubscription("azure");
        dom2.setAccount("aws");

        // system meta attributes are automatically skipped

        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), dom2);
        Domain dom2Res = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName + ".sub");
        assertNull(dom2Res.getAccount());
        assertNull(dom2Res.getAzureSubscription());

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "sub", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPrincipalDomain() {
        Principal principal = SimplePrincipal.create("sports", "api",
                "creds", 0, new PrincipalAuthority());
        ResourceContext ctx = zmsTestInitializer.createResourceContext(principal);

        assertEquals(zmsTestInitializer.getZms().getPrincipalDomain(ctx), "sports");
    }

    @Test
    public void testGetPrincipalDomainNull() {

        ResourceContext ctx = zmsTestInitializer.createResourceContext(null);
        assertNull(zmsTestInitializer.getZms().getPrincipalDomain(ctx));
    }

    private RoleSystemMeta createRoleSystemMetaObject(Boolean auditEnabled) {

        RoleSystemMeta meta = new RoleSystemMeta();

        if (auditEnabled != null) {
            meta.setAuditEnabled(auditEnabled);
        }
        return meta;
    }

    private GroupSystemMeta createGroupSystemMetaObject(Boolean auditEnabled) {

        GroupSystemMeta meta = new GroupSystemMeta();

        if (auditEnabled != null) {
            meta.setAuditEnabled(auditEnabled);
        }
        return meta;
    }

    private void setupPrincipalRoleSystemMetaDelete(ZMSImpl zmsImpl, final String principal,
                                                    final String domainName, final String attributeName) {

        Role role = zmsTestInitializer.createRoleObject("sys.auth", "metaroleadmin", null, principal, null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "metaroleadmin", zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = new Policy();
        policy.setName("metaroleadmin");

        Assertion assertion = new Assertion();
        assertion.setAction("delete");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("sys.auth:meta.role." + attributeName + "." + domainName);
        assertion.setRole("sys.auth:role.metaroleadmin");

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);

        policy.setAssertions(assertList);

        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "metaroleadmin", zmsTestInitializer.getAuditRef(), false, policy);
    }

    private void cleanupPrincipalRoleSystemMetaDelete(ZMSImpl zmsImpl) {

        zmsImpl.deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "metaroleadmin", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "metaroleadmin", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleSystemMeta() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("rolesystemmetadom1",
                "Role System Meta Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for Role System Meta test", "NewOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role role1 = zmsTestInitializer.createRoleObject("rolesystemmetadom1", "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "role1", zmsTestInitializer.getAuditRef(), false, role1);

        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "role1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Role resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "role1", true, false, false);

        assertNotNull(resRole1);
        assertTrue(resRole1.getAuditEnabled());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleSystemMetaMissingAuditRef() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("rolesystemmetadom1",
                "Role System Meta Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for Role System Meta test", "NewOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role role1 = zmsTestInitializer.createRoleObject("rolesystemmetadom1", "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "role1", zmsTestInitializer.getAuditRef(), false, role1);

        RoleSystemMeta rsm = createRoleSystemMetaObject(true);

        try {
            zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "role1", "auditenabled", null, rsm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutRoleSystemMetaThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        RoleSystemMeta rsm = new RoleSystemMeta();
        rsm.setAuditEnabled(false);

        try {
            zmsImpl.putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolesystemmetadom1", "role1", "auditenabled", null, rsm);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(404, e.getCode());
        }
    }

    @Test
    public void testIsAllowedSystemMetaDelete(){

        TestAuditLogger alogger = new TestAuditLogger();
        System.setProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT, "true");
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        assertFalse(zmsImpl.isAllowedSystemMetaDelete(zmsTestInitializer.getMockDomRsrcCtx().principal(), "mockdom1", "auditenabled", "role"));
        setupPrincipalRoleSystemMetaDelete(zmsImpl, zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), "mockdom1", "auditenabled");
        assertTrue(zmsImpl.isAllowedSystemMetaDelete(zmsTestInitializer.getMockDomRsrcCtx().principal(), "mockdom1", "auditenabled", "role"));
        cleanupPrincipalRoleSystemMetaDelete(zmsImpl);

        System.clearProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT);
    }

    private RoleMeta createRoleMetaObject(Boolean selfServe) {

        RoleMeta meta = new RoleMeta();

        if (selfServe != null) {
            meta.setSelfServe(selfServe);
        }
        return meta;
    }

    @Test
    public void testPutRoleMeta() {
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("rolemetadom1",
                "Role Meta Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("rolemetadom1", "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), false, role1);

        RoleMeta rm = createRoleMetaObject(true);
        rm.setMemberExpiryDays(45);
        rm.setCertExpiryMins(55);
        rm.setServiceExpiryDays(45);
        rm.setGroupExpiryDays(50);
        rm.setTokenExpiryMins(65);
        rm.setMemberReviewDays(70);
        rm.setServiceReviewDays(80);
        rm.setGroupReviewDays(90);
        rm.setSignAlgorithm("ec");
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm);

        Role resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", true, false, false);

        assertNotNull(resRole1);
        assertTrue(resRole1.getSelfServe());
        assertEquals(resRole1.getMemberExpiryDays(), Integer.valueOf(45));
        assertEquals(resRole1.getCertExpiryMins(), Integer.valueOf(55));
        assertEquals(resRole1.getTokenExpiryMins(), Integer.valueOf(65));
        assertEquals(resRole1.getServiceExpiryDays(), Integer.valueOf(45));
        assertEquals(resRole1.getGroupExpiryDays(), Integer.valueOf(50));
        assertEquals(resRole1.getMemberReviewDays(), Integer.valueOf(70));
        assertEquals(resRole1.getServiceReviewDays(), Integer.valueOf(80));
        assertEquals(resRole1.getGroupReviewDays(), Integer.valueOf(90));
        assertEquals(resRole1.getSignAlgorithm(), "ec");

        // if we pass a null for the expiry days (e.g. old client)
        // then we're not going to modify the value

        RoleMeta rm2 = createRoleMetaObject(false);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm2);

        resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", true, false, false);

        assertNotNull(resRole1);
        assertNull(resRole1.getSelfServe());
        assertEquals(resRole1.getMemberExpiryDays(), Integer.valueOf(45));
        assertEquals(resRole1.getServiceExpiryDays(), Integer.valueOf(45));
        assertEquals(resRole1.getGroupExpiryDays(), Integer.valueOf(50));
        assertEquals(resRole1.getCertExpiryMins(), Integer.valueOf(55));
        assertEquals(resRole1.getTokenExpiryMins(), Integer.valueOf(65));
        assertEquals(resRole1.getMemberReviewDays(), Integer.valueOf(70));
        assertEquals(resRole1.getServiceReviewDays(), Integer.valueOf(80));
        assertEquals(resRole1.getGroupReviewDays(), Integer.valueOf(90));

        // now let's reset to 0

        RoleMeta rm3 = createRoleMetaObject(false);
        rm3.setMemberExpiryDays(0);
        rm3.setServiceExpiryDays(0);
        rm3.setGroupExpiryDays(0);
        rm3.setCertExpiryMins(0);
        rm3.setTokenExpiryMins(85);
        rm3.setMemberReviewDays(0);
        rm3.setServiceReviewDays(0);
        rm3.setGroupReviewDays(0);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm3);

        resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", true, false, false);

        assertNotNull(resRole1);
        assertNull(resRole1.getSelfServe());
        assertNull(resRole1.getMemberExpiryDays());
        assertNull(resRole1.getServiceExpiryDays());
        assertNull(resRole1.getGroupExpiryDays());
        assertNull(resRole1.getCertExpiryMins());
        assertEquals(resRole1.getTokenExpiryMins(), Integer.valueOf(85));
        assertNull(resRole1.getMemberReviewDays());
        assertNull(resRole1.getServiceReviewDays());
        assertNull(resRole1.getGroupReviewDays());

        // invalid negative values

        RoleMeta rm4 = createRoleMetaObject(false);
        rm4.setMemberExpiryDays(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        rm4.setMemberExpiryDays(10);
        rm4.setServiceExpiryDays(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        rm4.setMemberExpiryDays(10);
        rm4.setServiceExpiryDays(10);
        rm4.setGroupExpiryDays(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        rm4.setMemberExpiryDays(10);
        rm4.setServiceExpiryDays(10);
        rm4.setGroupExpiryDays(10);
        rm4.setCertExpiryMins(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        rm4.setMemberExpiryDays(10);
        rm4.setServiceExpiryDays(10);
        rm4.setCertExpiryMins(10);
        rm4.setTokenExpiryMins(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        rm4.setMemberExpiryDays(10);
        rm4.setServiceExpiryDays(10);
        rm4.setCertExpiryMins(10);
        rm4.setTokenExpiryMins(10);
        rm4.setMemberReviewDays(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        rm4.setMemberExpiryDays(10);
        rm4.setServiceExpiryDays(10);
        rm4.setCertExpiryMins(10);
        rm4.setTokenExpiryMins(10);
        rm4.setMemberReviewDays(10);
        rm4.setServiceReviewDays(-10);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm4);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleMetaMissingAuditRef() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("rolemetadom1", "Role Meta Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for Role Meta test", "NewOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role role1 = zmsTestInitializer.createRoleObject("rolemetadom1", "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), false, role1);

        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        RoleMeta rm = createRoleMetaObject(true);
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", null, rm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testPutRoleMetaThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        RoleMeta rm = new RoleMeta();
        rm.setSelfServe(false);

        try {
            zmsImpl.putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "rolemetadom1", "role1", zmsTestInitializer.getAuditRef(), rm);
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(404, e.getCode());
        }
    }

    @Test
    public void testPutRoleMetaGroupMemberWithAuthorityFilter() {

        final String domainName = "put-role-meta-group-authority";
        final String groupName = "group1";
        final String roleName = "role1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Role Meta Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.getDateAttribute("user.john", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.john", "OnShore-US")).thenReturn(true);
        when(authority.getDateAttribute("user.jane", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.jane", "OnShore-US")).thenReturn(true);
        Set<String> attrs = new HashSet<>();
        attrs.add("OnShore-US");
        attrs.add("elevated-clearance");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        // let's add a role and set the user authority filter

        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        RoleMeta rm = new RoleMeta().setUserAuthorityFilter("OnShore-US");
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // now let's try to add a group which should be rejected since
        // the group does not have authority filter

        Membership mbr = zmsTestInitializer.generateMembership(roleName, ResourceUtils.groupResourceName(domainName, groupName));
        try {
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName,
                    ResourceUtils.groupResourceName(domainName, groupName), zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // now we're going to set the same filter on the group

        GroupMeta groupMeta = new GroupMeta().setUserAuthorityFilter("OnShore-US");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        // we should now be able to add the member successfully

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName,
                ResourceUtils.groupResourceName(domainName, groupName), zmsTestInitializer.getAuditRef(), false, mbr);

        // now we're going to set the expiry attribute set on the role but
        // it should be rejected since group does not have that expiry

        rm = new RoleMeta().setUserAuthorityFilter("OnShore-US").setUserAuthorityExpiration("elevated-clearance");
        try {
            zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains(ResourceUtils.groupResourceName(domainName, groupName)));
        }

        // now let's set the expiry flag on the group

        groupMeta = new GroupMeta().setUserAuthorityFilter("OnShore-US").setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        // our put role meta should work now

        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testIsAllowedPutMembershipAccess(){
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1",
                "Role Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null,"user.user1", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, role1);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        Role role = zmsTestInitializer.getZms().getRoleFromDomain("testrole1", domain);

        assertTrue(zmsTestInitializer.getZms().isAllowedPutMembershipAccess(zmsTestInitializer.getMockDomRestRsrcCtx().principal(), domain, role.getName()));

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=john";
        final Principal rsrcPrince = SimplePrincipal.create("user", "john", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        assertFalse(zmsTestInitializer.getZms().isAllowedPutMembershipAccess(rsrcPrince, domain, role.getName()));// some random user does not have access

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testIsAllowedPutRoleMetaAccess(){
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1",
                "Role Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null,"user.user1", "user.john");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, role1);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        Role role = zmsTestInitializer.getZms().getRoleFromDomain("testrole1", domain);

        assertTrue(zmsTestInitializer.getZms().isAllowedPutRoleMetaAccess(zmsTestInitializer.getMockDomRestRsrcCtx().principal(), domain, role.getName()));

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=john";
        final Principal rsrcPrince = SimplePrincipal.create("user", "john", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        assertFalse(zmsTestInitializer.getZms().isAllowedPutRoleMetaAccess(rsrcPrince, domain, role.getName())); // some random user does not have access

        // create policy that allows the user something other than "update" or "update_meta" - will still be denied
        Policy policy = zmsTestInitializer.createPolicyObject(domain.getName(), "testupdatemta", "testrole1",
                "update_somethingelse", role.getName(), AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain.getName(), "testupdatemta", zmsTestInitializer.getAuditRef(), false, policy);
        domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        assertFalse(zmsTestInitializer.getZms().isAllowedPutRoleMetaAccess(rsrcPrince, domain, role.getName()));

        // Finally create policy with "update_meta" which will allow access
        policy = zmsTestInitializer.createPolicyObject(domain.getName(), "testupdatemta", "testrole1",
                "update_meta", role.getName(), AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain.getName(), "testupdatemta", zmsTestInitializer.getAuditRef(), false, policy);
        domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);

        // Will now be allowed
        assertTrue(zmsTestInitializer.getZms().isAllowedPutRoleMetaAccess(rsrcPrince, domain, role.getName()));

        // Same thing with "update" instead of "update_meta"
        policy = zmsTestInitializer.createPolicyObject(domain.getName(), "testupdatemta", "testrole1",
                "update", role.getName(), AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domain.getName(), "testupdatemta", zmsTestInitializer.getAuditRef(), false, policy);
        domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        assertTrue(zmsTestInitializer.getZms().isAllowedPutRoleMetaAccess(rsrcPrince, domain, role.getName()));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testIsAllowedPutMembership() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1","Role Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null,"user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, role1);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        Role role = zmsTestInitializer.getZms().getRoleFromDomain("testrole1", domain);

        RoleMember roleMember = new RoleMember().setMemberName("user.user1");

        assertTrue(zmsTestInitializer.getZms().isAllowedPutMembership(zmsTestInitializer.getMockDomRestRsrcCtx().principal(), domain, role, roleMember));//admin allowed
        assertTrue(roleMember.getApproved());

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=bob";
        final Principal rsrcPrince = SimplePrincipal.create("user", "bob", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        roleMember = new RoleMember().setMemberName("user.bob");
        assertFalse(zmsTestInitializer.getZms().isAllowedPutMembership(rsrcPrince, domain, role, roleMember));//bob trying to add himself

        // without self-serve bob is not allowed to add dave
        roleMember = new RoleMember().setMemberName("user.dave");
        assertFalse(zmsTestInitializer.getZms().isAllowedPutMembership(rsrcPrince, domain, role, roleMember));//bob trying to add dave

        Role selfserverole = zmsTestInitializer.createRoleObject("testdomain1", "testrole2", null,"user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole2", zmsTestInitializer.getAuditRef(), false, selfserverole);

        RoleMeta rm = createRoleMetaObject(true);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole2",  zmsTestInitializer.getAuditRef(), rm);

        domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        role = zmsTestInitializer.getZms().getRoleFromDomain("testrole2", domain);

        roleMember = new RoleMember().setMemberName("user.bob");
        assertTrue(zmsTestInitializer.getZms().isAllowedPutMembership(rsrcPrince, domain, role, roleMember));//bob trying to add himself
        assertFalse(roleMember.getApproved());

        // with self-serve bob is now allowed to add dave
        roleMember.setMemberName("user.dave");
        assertTrue(zmsTestInitializer.getZms().isAllowedPutMembership(rsrcPrince, domain, role, roleMember));//bob trying to add dave
        assertFalse(roleMember.getApproved());

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for Role Meta test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject("testdomain1", "testrole3", null,"user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole3", zmsTestInitializer.getAuditRef(), false, auditedRole);

        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole3", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        domain = zmsTestInitializer.getZms().getAthenzDomain("testdomain1", false);
        role = zmsTestInitializer.getZms().getRoleFromDomain("testrole3", domain);

        roleMember = new RoleMember().setMemberName("user.user1");
        assertTrue(zmsTestInitializer.getZms().isAllowedPutMembership(zmsTestInitializer.getMockDomRestRsrcCtx().principal(), domain, role, roleMember));//admin allowed
        assertFalse(roleMember.getApproved());

        roleMember = new RoleMember().setMemberName("user.bob");
        assertFalse(zmsTestInitializer.getZms().isAllowedPutMembership(rsrcPrince, domain, role, roleMember));//bob trying to add himself not allowed

        roleMember = new RoleMember().setMemberName("user.dave");
        assertFalse(zmsTestInitializer.getZms().isAllowedPutMembership(rsrcPrince, domain, role, roleMember));//bob trying to add dave not allowed

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipSelfserveRole() {

        addMemberToSelfServeRoleWithUserIdentity();

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    private void addMemberToSelfServeRoleWithUserIdentity() {
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1", "Approval test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, role1);

        RoleMeta rm = createRoleMetaObject(true);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), rm);

        //switch to user.bob principal to test selfserve role membership
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=bob";
        final Principal rsrcPrince = SimplePrincipal.create("user", "bob", unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcPrince);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1", adminUnsignedCreds + ";s=signature",
                0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
    }

    private void addMemberToSelfServeGroupWithUserIdentity(final String domainName, final String groupName) {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMeta rm = new GroupMeta().setSelfServe(true);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);

        //switch to user.bob principal to test selfserve role membership
        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=bob";
        final Principal rsrcPrince = SimplePrincipal.create("user", "bob", unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcPrince);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1", adminUnsignedCreds + ";s=signature",
                0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
    }

    @Test
    public void testPutMembershipDecisionSelfserveRoleApprove() {

        addMemberToSelfServeRoleWithUserIdentity();

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }
        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);
        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", false, false, false);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertTrue(rmem.getApproved());
            }
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipDecisionSelfserveRoleReject() {

        addMemberToSelfServeRoleWithUserIdentity();

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }
        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", false, false, false);
        assertEquals(resrole.getRoleMembers().size(), 2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    private void setupPrincipalAuditedRoleApprovalByOrg(ZMSImpl zmsImpl, final String principal, final String org) {

        Role role = zmsTestInitializer.createRoleObject("sys.auth.audit.org", org, null, principal, null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.org", org, zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = new Policy();
        policy.setName(org);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("sys.auth.audit.org:audit." + org);
        assertion.setRole("sys.auth.audit.org:role." + org);

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);
        policy.setAssertions(assertList);

        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.org", org, zmsTestInitializer.getAuditRef(), false, policy);
    }

    private void setupPrincipalAuditedRoleApprovalByDomain(ZMSImpl zmsImpl, final String principal, final String domainName) {

        Role role = zmsTestInitializer.createRoleObject("sys.auth.audit.domain", domainName, null, principal, null);
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.domain", domainName, zmsTestInitializer.getAuditRef(), false, role);

        Policy policy = new Policy();
        policy.setName(domainName);

        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource("sys.auth.audit.domain:audit." + domainName);
        assertion.setRole("sys.auth.audit.domain:role." + domainName);

        List<Assertion> assertList = new ArrayList<>();
        assertList.add(assertion);
        policy.setAssertions(assertList);

        zmsImpl.putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.domain", domainName, zmsTestInitializer.getAuditRef(), false, policy);
    }

    @Test
    public void testPutMembershipDecisionReviewEnabledRoleApprove() {

        final String domainName = "review-enabled-domain";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval test Domain1",
                "testOrg", "user.user1");
        dom1.getAdminUsers().add("user.user2");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String roleName = "review-role";
        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        RoleMeta rm = new RoleMeta().setReviewEnabled(true);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // switch to user.user2 principal to add a member to a role

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=user2";
        final Principal rsrcPrince = SimplePrincipal.create("user", "user2",
                unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcPrince);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // verify the user is added with pending state

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 1);
        assertEquals(resrole.getRoleMembers().get(0).getMemberName(), "user.bob");
        assertFalse(resrole.getRoleMembers().get(0).getApproved());

        // now try as the admin himself to approve this user and it must
        // be rejected since it has to be done by some other admin

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("cannot approve his/her own request"));
        }

        // revert back to admin principal

        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        // approve the message which should be successful

        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        // verify the user is now active

        resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 1);
        assertEquals(resrole.getRoleMembers().get(0).getMemberName(), "user.bob");
        assertTrue(resrole.getRoleMembers().get(0).getApproved());

        // trying to approve the same user should return 404

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // now try to approve another use which should also return 404

        mbr.setMemberName("user.joe");
        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.joe", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    private void cleanupPrincipalAuditedRoleApprovalByOrg(ZMSImpl zmsImpl, final String org) {
        zmsImpl.deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.org", org, zmsTestInitializer.getAuditRef());
        zmsImpl.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.org", org, zmsTestInitializer.getAuditRef());
    }

    private void cleanupPrincipalAuditedRoleApprovalByDomain(ZMSImpl zmsImpl, final String domainName) {
        zmsImpl.deletePolicy(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.domain", domainName, zmsTestInitializer.getAuditRef());
        zmsImpl.deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth.audit.domain", domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipDecisionAuditEnabledRoleByOrg() {

        final String domainName = "testdomain1";
        final String roleName = "testrole1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testOrg");

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertTrue(rmem.getApproved());
            }
        }

        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipDecisionAuditEnabledRoleByDomain() {

        final String domainName = "testdomain1";
        final String roleName = "testrole1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }

        setupPrincipalAuditedRoleApprovalByDomain(zmsTestInitializer.getZms(), "user.fury", domainName);

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
        assertEquals(resrole.getRoleMembers().size(), 3);
        for (RoleMember rmem : resrole.getRoleMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertTrue(rmem.getApproved());
            }
        }

        cleanupPrincipalAuditedRoleApprovalByDomain(zmsTestInitializer.getZms(), domainName);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipDecisionAuditEnabledRoleInvalidUser() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1", "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.joe");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.joe", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testOrg");

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";

        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        // enable user authority check - joe and jane are the only
        // valid users in the system

        zmsTestInitializer.getZms().userAuthority = new TestUserPrincipalAuthority();

        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true);
        zmsTestInitializer.getZms().validateUserRoleMembers = dynamicConfigBoolean;

        // first let's approve user.joe which should be ok since user joe
        // is a valid user based on our test authority

        mbr = new Membership();
        mbr.setMemberName("user.joe");
        mbr.setActive(true);
        mbr.setApproved(true);
        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.joe", zmsTestInitializer.getAuditRef(), mbr);

        // now let's approve our bob user which is going to be rejected
        // since bob is not a valid user based on our test authority

        mbr.setMemberName("user.bob");

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        }catch (ResourceException ex) {
            assertEquals(ex.code, 400);
        }

        // now let's just reject user bob which should work
        // ok because we no longer validate users when we
        // are rejecting thus deleting role members

        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipDecisionReviewEnabledUnauthorized() {

        final String domainName = "review-enabled-domain-forbidden";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String roleName = "review-role";
        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, null, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        RoleMeta rm = new RoleMeta().setReviewEnabled(true);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // add a user to the role

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // verify the user is added with pending state

        Role resrole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, true);
        assertEquals(resrole.getRoleMembers().size(), 1);
        assertEquals(resrole.getRoleMembers().get(0).getMemberName(), "user.bob");
        assertFalse(resrole.getRoleMembers().get(0).getApproved());

        // now try as the second admin himself to approve this user and it must
        // be rejected since second admin is not authorized

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        // switch to user.user2 principal to add a member to a role

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=user2";
        final Principal rsrcPrince = SimplePrincipal.create("user", "user2",
                unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcPrince);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("not authorized to approve / reject members"));
        }

        // revert back to admin principal

        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutMembershipDecisionErrors() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1","Approval Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null,"user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.chris", zmsTestInitializer.getAuditRef(), mbr);//invalid member
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 400);
            assertTrue(r.getMessage().contains("putMembershipDecision: Member name in URI and Membership object do not match"));
        }

        mbr.setRoleName("invalidrole");
        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);//invalid role
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 400);
            assertTrue(r.getMessage().contains("putMembershipDecision: Role name in URI and Membership object do not match"));
        }

        mbr.setRoleName(null);
        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain2", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);//invalid domain name
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 400);
            assertTrue(r.getMessage().contains("Invalid rolename"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPendingDomainRoleMembersListByPrincipal() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1", "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), "testdomain1", "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "org", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 403);
        }

        // first request using specific principal

        DomainRoleMembership domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), "testdomain1");
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        // repeat the request using context principal

        Principal mockPrincipal = Mockito.mock(Principal.class);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(mockPrincipal);
        when(mockPrincipal.getDomain()).thenReturn("user");
        when(mockPrincipal.getFullName()).thenReturn("user.fury");
        domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, null);

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), "testdomain1");
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPendingDomainRoleMembersListByDomain() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1", "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), "testdomain1", "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "org", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 403);
        }

        // first request using specific principal

        DomainRoleMembership domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, "testdomain1");

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), "testdomain1");
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        // repeat using all domains
        domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, "*");

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), "testdomain1");
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        // repeat the request using context principal

        Principal mockPrincipal = Mockito.mock(Principal.class);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(mockPrincipal);
        when(mockPrincipal.getDomain()).thenReturn("user");
        when(mockPrincipal.getFullName()).thenReturn("user.fury");
        domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, null);

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), "testdomain1");
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleWithPendingMembers() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1","Pending Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject("testdomain1", "testrole1", null,"user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        Role resRole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole1", false, false, true);

        assertNotNull(resRole);
        assertEquals(resRole.getRoleMembers().size(), 3);

        for ( RoleMember rm : resRole.getRoleMembers()) {
            if ("user.bob".equals(rm.getMemberName())) {
                assertFalse(rm.getApproved());
            }
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidateRoleMemberPrincipals() {

        DynamicConfigBoolean validateUserRoleMembersBool = Mockito.mock(DynamicConfigBoolean.class);
        when(validateUserRoleMembersBool.get()).thenReturn(false);
        zmsTestInitializer.getZms().validateUserRoleMembers = validateUserRoleMembersBool;
        DynamicConfigBoolean validateServiceRoleMembersBool = Mockito.mock(DynamicConfigBoolean.class);
        when(validateServiceRoleMembersBool.get()).thenReturn(false);
        zmsTestInitializer.getZms().validateServiceRoleMembers = validateServiceRoleMembersBool;

        // if both are false then any invalid users are ok

        List<RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user").setPrincipalType(Principal.Type.SERVICE.getValue()));
        roleMembers.add(new RoleMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        roleMembers.add(new RoleMember().setMemberName("user.jane").setPrincipalType(Principal.Type.USER.getValue()));
        roleMembers.add(new RoleMember().setMemberName("coretech.api").setPrincipalType(Principal.Type.SERVICE.getValue()));
        roleMembers.add(new RoleMember().setMemberName("coretech.backend").setPrincipalType(Principal.Type.SERVICE.getValue()));

        Role role = new Role().setRoleMembers(roleMembers);
        zmsTestInitializer.getZms().validateRoleMemberPrincipals(role, null, false, "unittest");

        // enable user authority check

        zmsTestInitializer.getZms().userAuthority = new TestUserPrincipalAuthority();
        DynamicConfigBoolean validateUserRoleMembersBoolTrue = Mockito.mock(DynamicConfigBoolean.class);
        when(validateUserRoleMembersBoolTrue.get()).thenReturn(true);
        zmsTestInitializer.getZms().validateUserRoleMembers = validateUserRoleMembersBoolTrue;

        // include all valid principals

        roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe").setPrincipalType(Principal.Type.USER.getValue()));
        roleMembers.add(new RoleMember().setMemberName("user.jane").setPrincipalType(Principal.Type.USER.getValue()));
        role.setRoleMembers(roleMembers);

        zmsTestInitializer.getZms().validateRoleMemberPrincipals(role, null, false, "unittest");

        // add one more invalid user

        roleMembers.add(new RoleMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipals(role, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // do not allow any groups

        roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("user.joe").setPrincipalType(Principal.Type.USER.getValue()));
        roleMembers.add(new RoleMember().setMemberName("user.jane").setPrincipalType(Principal.Type.USER.getValue()));
        roleMembers.add(new RoleMember().setMemberName("coretech:group.dev-team").setPrincipalType(Principal.Type.GROUP.getValue()));
        role.setRoleMembers(roleMembers);
        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipals(role, null, true, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // unknown types are always rejected

        roleMembers = new ArrayList<>();
        roleMembers.add(new RoleMember().setMemberName("unknown").setPrincipalType(Principal.Type.UNKNOWN.getValue()));
        role.setRoleMembers(roleMembers);
        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipals(role, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }
    }

    @Test
    public void testValidateRoleMemberPrincipalUser() {

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = new TestUserPrincipalAuthority();
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true);
        zmsTestInitializer.getZms().validateUserRoleMembers = dynamicConfigBoolean;

        // valid users no exception

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.joe", Principal.Type.USER.getValue(), null, null, null, false, "unittest");
        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jane", Principal.Type.USER.getValue(), null, null, null, false, "unittest");

        // invalid user request error

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.john", Principal.Type.USER.getValue(), null, null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // non - user principals by default are accepted

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech.api", Principal.Type.SERVICE.getValue(),
                null, null, null, false, "unittest");

        // valid employee and contractor users

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.joe", Principal.Type.USER.getValue(), "employee",
                null, null, false, "unittest");
        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jane", Principal.Type.USER.getValue(), "employee",
                null, null, false, "unittest");
        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jack", Principal.Type.USER.getValue(), "contractor",
                null, null, false, "unittest");

        // valid multiple attribute users

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.joe", Principal.Type.USER.getValue(), "employee,local",
                null, null, false, "unittest");
        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jane", Principal.Type.USER.getValue(), "employee,local",
                null, null, false, "unittest");
        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jack", Principal.Type.USER.getValue(), "contractor,local",
                null, null, false, "unittest");

        // invalid employee type

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jack", Principal.Type.USER.getValue(), "employee",
                    null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // invalid multiple types

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.jack", Principal.Type.USER.getValue(), "local,employee",
                    null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testValidateRoleMemberPrincipalService() {

        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true);
        zmsTestInitializer.getZms().validateServiceRoleMembers = dynamicConfigBoolean;

        // wildcards are always valid with no exception

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("athenz.api*", Principal.Type.SERVICE.getValue(),
                null, null, null, false, "unittest");
        zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech.*", Principal.Type.SERVICE.getValue(),
                null, null, null, false, "unittest");

        // should get back invalid request since service does not exist

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech.api", Principal.Type.SERVICE.getValue(), "employee",
                    null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // invalid service request error

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech", Principal.Type.SERVICE.getValue(),
                    null, null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain1", "testorg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech2",
                "Test Domain2", "testorg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("coretech",
                "api", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "api", zmsTestInitializer.getAuditRef(), false, service1);

        // known service - no exception

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech.api", Principal.Type.SERVICE.getValue(),
                null, null,  null, false, "unittest");

        // unknown service - exception

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech.backend", Principal.Type.SERVICE.getValue(),
                    null, null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // include coretech in the skip domain list and try
        // the operation again

        System.setProperty(ZMSConsts.ZMS_PROP_VALIDATE_SERVICE_MEMBERS_SKIP_DOMAINS,
                "unix,coretech");
        zmsTestInitializer.getZms().loadConfigurationSettings();
        zmsTestInitializer.getZms().validateServiceRoleMembers = dynamicConfigBoolean;

        // coretech is now accepted

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech.backend", Principal.Type.SERVICE.getValue(),
                null, null, null, false, "unittest");

        // but coretech2 is rejected

        try {
            zmsTestInitializer.getZms().validateRoleMemberPrincipal("coretech2.backend", Principal.Type.SERVICE.getValue(),
                    null, null, null, false, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // user principals by default are accepted

        zmsTestInitializer.getZms().validateRoleMemberPrincipal("user.john", Principal.Type.USER.getValue(), null, null, null, false, "unittest");

        // reset our setting

        System.clearProperty(ZMSConsts.ZMS_PROP_VALIDATE_SERVICE_MEMBERS_SKIP_DOMAINS);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech2", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidateGroupMemberPrincipal() {

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = new TestUserPrincipalAuthority();

        // wildcards are always rejected

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("athenz.api*", Principal.Type.SERVICE.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("athenz.api*", Principal.Type.SERVICE.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("*", Principal.Type.SERVICE.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // should get back invalid request since service does not exist

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("coretech.api", Principal.Type.SERVICE.getValue(), "employee", "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // invalid service request error

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("coretech", Principal.Type.SERVICE.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("coretech", "Test Domain1", "testorg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ServiceIdentity service1 = zmsTestInitializer.createServiceObject("coretech",
                "api", "http://localhost", "/usr/bin/java", "root",
                "users", "host1");

        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "api", zmsTestInitializer.getAuditRef(), false, service1);

        // known service - no exception

        zmsTestInitializer.getZms().validateGroupMemberPrincipal("coretech.api", Principal.Type.SERVICE.getValue(), null,  "unittest");

        // unknown service - exception

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("coretech.backend", Principal.Type.SERVICE.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // known user principals are accepted

        zmsTestInitializer.getZms().validateGroupMemberPrincipal("user.joe", Principal.Type.USER.getValue(), null, "unittest");
        zmsTestInitializer.getZms().validateGroupMemberPrincipal("user.jane", Principal.Type.USER.getValue(), null, "unittest");

        // unknown users are rejected

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("user.john", Principal.Type.USER.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // groups and unknown types are rejected

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("user", Principal.Type.UNKNOWN.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        Group group = zmsTestInitializer.createGroupObject("coretech", "dev-team", "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "dev-team", zmsTestInitializer.getAuditRef(), false, group);

        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipal("coretech:group.dev-team", Principal.Type.GROUP.getValue(), null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // reset our setting

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateMembershipApprovalNotification() {

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("testdomain1","Role Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role selfserverole = zmsTestInitializer.createRoleObject("testdomain1", "testrole2", null,"user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole2", zmsTestInitializer.getAuditRef(), false, selfserverole);

        RoleMeta rm = createRoleMetaObject(true);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole2",  zmsTestInitializer.getAuditRef(), rm);

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        Membership membership = new Membership().setActive(false).setApproved(false)
                .setMemberName("user.fury").setRoleName("testrole2");

        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", "testrole2", "user.fury", "adding fury", false, membership);

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        List<Notification> expextedNotifications = Collections.singletonList(new Notification());
        expextedNotifications.get(0).addRecipient("user.user1");
        expextedNotifications.get(0).addDetails("requester", "user.fury");
        expextedNotifications.get(0).addDetails("reason", "adding fury");
        expextedNotifications.get(0).addDetails("role", "testrole2");
        expextedNotifications.get(0).addDetails("domain", "testdomain1");
        expextedNotifications.get(0).addDetails("member", "user.fury");
        expextedNotifications.get(0).setNotificationToEmailConverter(new PutRoleMembershipNotificationTask.PutMembershipNotificationToEmailConverter(new NotificationToEmailConverterCommon(null)));
        expextedNotifications.get(0).setNotificationToMetricConverter(new PutRoleMembershipNotificationTask.PutMembershipNotificationToMetricConverter());

        verify(zmsTestInitializer.getMockNotificationManager(),
                times(1)).sendNotifications(eq(expextedNotifications));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain1", zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetMemberDueDate() {
        assertEquals(zmsTestInitializer.getZms().getMemberDueDate(100, null), Timestamp.fromMillis(100));
        assertEquals(zmsTestInitializer.getZms().getMemberDueDate(100, Timestamp.fromMillis(50)), Timestamp.fromMillis(50));
        assertEquals(zmsTestInitializer.getZms().getMemberDueDate(100, Timestamp.fromMillis(150)), Timestamp.fromMillis(100));
    }

    @Test
    public void testMemberDueDateTimestamp() {
        assertEquals(zmsTestInitializer.getZms().memberDueDateTimestamp(null, null, Timestamp.fromMillis(100)), Timestamp.fromMillis(100));
        assertEquals(zmsTestInitializer.getZms().memberDueDateTimestamp(-1, 0, Timestamp.fromMillis(100)), Timestamp.fromMillis(100));
        assertEquals(zmsTestInitializer.getZms().memberDueDateTimestamp(-3, -2, Timestamp.fromMillis(100)), Timestamp.fromMillis(100));

        long ext50Millis = TimeUnit.MILLISECONDS.convert(50, TimeUnit.DAYS);
        long ext75Millis = TimeUnit.MILLISECONDS.convert(75, TimeUnit.DAYS);
        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);

        Timestamp stamp = zmsTestInitializer.getZms().memberDueDateTimestamp(100, 50, Timestamp.fromMillis(System.currentTimeMillis() + ext75Millis));
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext50Millis));

        stamp = zmsTestInitializer.getZms().memberDueDateTimestamp(75, null, Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis));
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext75Millis));
    }

    @Test
    public void testUpdateRoleMemberReview() {

        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);
        long ext125Millis = TimeUnit.MILLISECONDS.convert(125, TimeUnit.DAYS);
        long ext150Millis = TimeUnit.MILLISECONDS.convert(150, TimeUnit.DAYS);
        long ext175Millis = TimeUnit.MILLISECONDS.convert(175, TimeUnit.DAYS);

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.joe").setReviewReminder(null)
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api").setReviewReminder(null)
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api.group").setReviewReminder(null)
                .setPrincipalType(Principal.Type.GROUP.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend.group")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.GROUP.getValue()));

        Role role = new Role().setMemberReviewDays(125).setServiceReviewDays(150).setGroupReviewDays(175);
        MemberDueDays memberDueDays = new MemberDueDays(null, role, MemberDueDays.Type.REMINDER);
        zmsTestInitializer.getZms().updateRoleMemberReviewReminder(memberDueDays, members);

        Timestamp stamp = members.get(0).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext125Millis));

        stamp = members.get(1).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(2).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext150Millis));

        stamp = members.get(3).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(4).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext175Millis));

        stamp = members.get(5).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));
    }

    @Test
    public void testUpdateRoleMemberReviewNoUser() {

        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);
        long ext150Millis = TimeUnit.MILLISECONDS.convert(150, TimeUnit.DAYS);
        long ext175Millis = TimeUnit.MILLISECONDS.convert(175, TimeUnit.DAYS);

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.joe").setReviewReminder(null)
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api").setReviewReminder(null)
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api.group").setReviewReminder(null)
                .setPrincipalType(Principal.Type.GROUP.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend.group")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.GROUP.getValue()));

        Role role = new Role().setMemberReviewDays(0).setServiceReviewDays(150).setGroupReviewDays(175);
        MemberDueDays memberDueDays = new MemberDueDays(null, role, MemberDueDays.Type.REMINDER);

        zmsTestInitializer.getZms().updateRoleMemberReviewReminder(memberDueDays, members);

        assertNull(members.get(0).getReviewReminder());

        Timestamp stamp = members.get(1).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(2).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext150Millis));

        stamp = members.get(3).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(4).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext175Millis));

        stamp = members.get(5).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));
    }

    @Test
    public void testUpdateRoleMemberReviewNoService() {

        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);
        long ext125Millis = TimeUnit.MILLISECONDS.convert(125, TimeUnit.DAYS);

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.joe").setReviewReminder(null)
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api").setReviewReminder(null)
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api.group").setReviewReminder(null)
                .setPrincipalType(Principal.Type.GROUP.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend.group")
                .setReviewReminder(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.GROUP.getValue()));

        Role role = new Role().setMemberReviewDays(125).setServiceReviewDays(0).setGroupReviewDays(175);
        MemberDueDays memberDueDays = new MemberDueDays(null, role, MemberDueDays.Type.REMINDER);
        zmsTestInitializer.getZms().updateRoleMemberReviewReminder(memberDueDays, members);

        Timestamp stamp = members.get(0).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext125Millis));

        stamp = members.get(1).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        assertNull(members.get(2).getReviewReminder());

        stamp = members.get(3).getReviewReminder();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));
    }

    @Test
    public void testUpdateRoleMemberExpiration() {

        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);
        long ext125Millis = TimeUnit.MILLISECONDS.convert(125, TimeUnit.DAYS);
        long ext150Millis = TimeUnit.MILLISECONDS.convert(150, TimeUnit.DAYS);

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.joe").setExpiration(null)
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api").setExpiration(null)
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz:group.dev-team").setExpiration(null)
                .setPrincipalType(Principal.Type.GROUP.getValue()));
        members.add(new RoleMember().setMemberName("athenz:group.ops-team")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.GROUP.getValue()));

        // for user members we have 50/125 setup while for service members 75/150

        Role role = new Role().setMemberExpiryDays(125).setServiceExpiryDays(150).setGroupExpiryDays(125);
        Domain domain = new Domain().setMemberExpiryDays(50).setServiceExpiryDays(75).setGroupExpiryDays(100);
        MemberDueDays memberDueDays = new MemberDueDays(domain, role, MemberDueDays.Type.EXPIRY);

        zmsTestInitializer.getZms().updateRoleMemberExpiration(memberDueDays, members);

        Timestamp stamp = members.get(0).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext125Millis));

        stamp = members.get(1).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(2).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext150Millis));

        stamp = members.get(3).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(4).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext125Millis));

        stamp = members.get(5).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));
    }

    @Test
    public void testUpdateRoleMemberExpirationNoUser() {

        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);
        long ext150Millis = TimeUnit.MILLISECONDS.convert(150, TimeUnit.DAYS);

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.joe").setExpiration(null)
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api").setExpiration(null)
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz:group.dev-team").setExpiration(null)
                .setPrincipalType(Principal.Type.GROUP.getValue()));
        members.add(new RoleMember().setMemberName("athenz:group.ops-team")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.GROUP.getValue()));

        // for user members we have 0 setup while for service members 75/150

        Role role = new Role().setMemberExpiryDays(0).setServiceExpiryDays(150).setGroupExpiryDays(0);
        Domain domain = new Domain().setMemberExpiryDays(0).setServiceExpiryDays(75).setGroupExpiryDays(0);
        MemberDueDays memberDueDays = new MemberDueDays(domain, role, MemberDueDays.Type.EXPIRY);

        zmsTestInitializer.getZms().updateRoleMemberExpiration(memberDueDays, members);

        assertNull(members.get(0).getExpiration());

        Timestamp stamp = members.get(1).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        stamp = members.get(2).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext150Millis));

        stamp = members.get(3).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        assertNull(members.get(4).getExpiration());

        stamp = members.get(5).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));
    }

    @Test
    public void testUpdateRoleMemberExpirationNoService() {

        long ext100Millis = TimeUnit.MILLISECONDS.convert(100, TimeUnit.DAYS);
        long ext125Millis = TimeUnit.MILLISECONDS.convert(125, TimeUnit.DAYS);

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.joe").setExpiration(null)
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("athenz.api").setExpiration(null)
                .setPrincipalType(Principal.Type.SERVICE.getValue()));
        members.add(new RoleMember().setMemberName("athenz.backend")
                .setExpiration(Timestamp.fromMillis(System.currentTimeMillis() + ext100Millis))
                .setPrincipalType(Principal.Type.SERVICE.getValue()));

        // for user members we have 50/125 setup while for service members 0

        Role role = new Role().setMemberExpiryDays(125).setServiceExpiryDays(0).setGroupExpiryDays(0);
        Domain domain = new Domain().setMemberExpiryDays(50).setServiceExpiryDays(0).setGroupExpiryDays(0);
        MemberDueDays memberDueDays = new MemberDueDays(domain, role, MemberDueDays.Type.EXPIRY);

        zmsTestInitializer.getZms().updateRoleMemberExpiration(memberDueDays, members);

        Timestamp stamp = members.get(0).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext125Millis));

        stamp = members.get(1).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));

        assertNull(members.get(2).getExpiration());

        stamp = members.get(3).getExpiration();
        assertTrue(ZMSTestUtils.validateDueDate(stamp.millis(), ext100Millis));
    }

    @Test
    public void testRemoveMatchedAssertionNoMatch() {

        List<Assertion> assertions = new ArrayList<>();
        List<Assertion> matchedAssertions = new ArrayList<>();

        Assertion assertion = new Assertion().setAction("action").setResource("resource")
                .setRole("role").setEffect(AssertionEffect.ALLOW);
        assertions.add(assertion);

        Assertion checkAssertion = new Assertion().setAction("action").setResource("resource")
                .setRole("role1").setEffect(AssertionEffect.ALLOW);

        assertFalse(zmsTestInitializer.getZms().dbService.removeMatchedAssertion(checkAssertion, assertions, matchedAssertions));

        // match the role but not the affect

        checkAssertion.setRole("role");
        checkAssertion.setEffect(AssertionEffect.DENY);

        assertFalse(zmsTestInitializer.getZms().dbService.removeMatchedAssertion(checkAssertion, assertions, matchedAssertions));

        // full match

        checkAssertion.setEffect(AssertionEffect.ALLOW);
        assertTrue(zmsTestInitializer.getZms().dbService.removeMatchedAssertion(checkAssertion, assertions, matchedAssertions));
    }

    @Test
    public void testIsUserDomainPrincipal() {

        // default no additional user domains

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertTrue(ZMSUtils.isUserDomainPrincipal("user.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("unix.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("ldap.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("x509.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));

        // now let's set the addls to empty - no changes

        System.setProperty(ZMSConsts.ZMS_PROP_ADDL_USER_CHECK_DOMAINS, "");
        zmsImpl = zmsTestInitializer.zmsInit();
        assertTrue(ZMSUtils.isUserDomainPrincipal("user.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("unix.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("ldap.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("x509.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));

        // now let's add one of the domains to the list

        System.setProperty(ZMSConsts.ZMS_PROP_ADDL_USER_CHECK_DOMAINS, "unix");
        zmsImpl = zmsTestInitializer.zmsInit();
        assertTrue(ZMSUtils.isUserDomainPrincipal("user.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertTrue(ZMSUtils.isUserDomainPrincipal("unix.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("ldap.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("x509.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));

        // now let's set two domains in the list

        System.setProperty(ZMSConsts.ZMS_PROP_ADDL_USER_CHECK_DOMAINS, "unix,ldap");
        zmsImpl = zmsTestInitializer.zmsInit();
        assertTrue(ZMSUtils.isUserDomainPrincipal("user.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertTrue(ZMSUtils.isUserDomainPrincipal("unix.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertTrue(ZMSUtils.isUserDomainPrincipal("ldap.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));
        assertFalse(ZMSUtils.isUserDomainPrincipal("x509.joe", zmsImpl.userDomainPrefix, zmsImpl.addlUserCheckDomainPrefixList));

        System.clearProperty(ZMSConsts.ZMS_PROP_ADDL_USER_CHECK_DOMAINS);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testPutRoleReviewEnabledMembers() {

        final String domainName = "role-review-enabled";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null, "user.john", "user.jane");
        role1.setReviewEnabled(true);

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Set review enabled flag using role meta api"));
        }

        // now create a role review enabled with no members

        Role role2 = zmsTestInitializer.createRoleObject(domainName, "role2", null, null, null);
        role2.setReviewEnabled(true);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", zmsTestInitializer.getAuditRef(), false, role2);

        Role resRole2 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", false, false, false);
        assertNotNull(resRole2);
        assertTrue(resRole2.getReviewEnabled());

        // we should not be able to modify a review enabled role

        Role role2a = zmsTestInitializer.createRoleObject(domainName, "role2", null, "user.john", "user.jane");
        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role2", zmsTestInitializer.getAuditRef(), false, role2a);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Can not update auditEnabled and/or reviewEnabled roles"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleReviewExpiration() {

        final String domainName = "role-review-dom";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Timestamp tenDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(10, TimeUnit.DAYS));
        Timestamp sixtyDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(60, TimeUnit.DAYS));

        Timestamp fortyFiveDaysLowerBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(45, TimeUnit.DAYS));
        Timestamp fortyFiveDaysUpperBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(45, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        Timestamp fiftyDaysLowerBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(50, TimeUnit.DAYS));
        Timestamp fiftyDaysUpperBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(50, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        Timestamp fiftyFiveDaysLowerBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(55, TimeUnit.DAYS));
        Timestamp fiftyFiveDaysUpperBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(55, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        Membership mbr = zmsTestInitializer.generateMembership("role1", "user.doe", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);

        mbr = zmsTestInitializer.generateMembership("role1", domainName + ":group.group1", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", domainName + ":group.group1", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = zmsTestInitializer.generateMembership("role1", "sys.auth.zms", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "sys.auth.zms", zmsTestInitializer.getAuditRef(), false, mbr);

        RoleMeta rm = createRoleMetaObject(true);
        rm.setMemberExpiryDays(45);
        rm.setServiceExpiryDays(50);
        rm.setGroupExpiryDays(55);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), rm);

        Role inputRole = new Role().setName("role1");
        List<RoleMember> inputMembers = new ArrayList<>();
        inputRole.setRoleMembers(inputMembers);
        inputMembers.add(new RoleMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new RoleMember().setMemberName("user.doe").setActive(true)
                .setExpiration(sixtyDaysExpiry));
        inputMembers.add(new RoleMember().setMemberName(domainName + ":group.group1").setActive(true)
                .setExpiration(sixtyDaysExpiry));
        inputMembers.add(new RoleMember().setMemberName("sys.auth.zms").setActive(true)
                .setExpiration(sixtyDaysExpiry));
        zmsTestInitializer.getZms().putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, inputRole);

        Role resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", false, false, false);

        int userChecked = 0;
        for (RoleMember roleMember : resRole1.getRoleMembers()) {
            switch (roleMember.getMemberName()) {
                case "user.jane":
                case "user.doe":
                    userChecked += 1;
                    assertTrue(roleMember.getExpiration().toDate().after(fortyFiveDaysLowerBoundExpiry.toDate()) && roleMember.getExpiration().toDate().before(fortyFiveDaysUpperBoundExpiry.toDate()));
                    assertTrue(roleMember.getApproved());
                    break;
                case "sys.auth.zms":
                    userChecked += 1;
                    assertTrue(roleMember.getExpiration().toDate().after(fiftyDaysLowerBoundExpiry.toDate()) && roleMember.getExpiration().toDate().before(fiftyDaysUpperBoundExpiry.toDate()));
                    assertTrue(roleMember.getApproved());
                    break;
                case domainName + ":group.group1":
                    userChecked += 1;
                    assertTrue(roleMember.getExpiration().toDate().after(fiftyFiveDaysLowerBoundExpiry.toDate()) && roleMember.getExpiration().toDate().before(fiftyFiveDaysUpperBoundExpiry.toDate()));
                    assertTrue(roleMember.getApproved());
                    break;
            }
        }
        assertEquals(userChecked, 4);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleReviewReviewReminder() {

        final String domainName = "role-review-reminder";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Timestamp tenDaysReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(10, TimeUnit.DAYS));
        Timestamp sixtyDaysReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(60, TimeUnit.DAYS));

        Timestamp fortyFiveDaysLowerBoundReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(45, TimeUnit.DAYS));
        Timestamp fortyFiveDaysUpperBoundReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(45, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        Timestamp fiftyDaysLowerBoundReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(50, TimeUnit.DAYS));
        Timestamp fiftyDaysUpperBoundReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(50, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        Timestamp fiftyFiveDaysLowerBoundReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(55, TimeUnit.DAYS));
        Timestamp fiftyFiveDaysUpperBoundReminder = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(55, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        Membership mbr = zmsTestInitializer.generateMembership("role1", "user.doe", tenDaysReminder);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);

        mbr = zmsTestInitializer.generateMembership("role1", domainName + ":group.group1", tenDaysReminder);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", domainName + ":group.group1", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = zmsTestInitializer.generateMembership("role1", "sys.auth.zms", tenDaysReminder);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "sys.auth.zms", zmsTestInitializer.getAuditRef(), false, mbr);

        RoleMeta rm = createRoleMetaObject(true);
        rm.setMemberReviewDays(45);
        rm.setServiceReviewDays(50);
        rm.setGroupReviewDays(55);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), rm);

        Role inputRole = new Role().setName("role1");
        List<RoleMember> inputMembers = new ArrayList<>();
        inputRole.setRoleMembers(inputMembers);
        inputMembers.add(new RoleMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new RoleMember().setMemberName("user.doe").setActive(true)
                .setReviewReminder(sixtyDaysReminder));
        inputMembers.add(new RoleMember().setMemberName(domainName + ":group.group1").setActive(true)
                .setReviewReminder(sixtyDaysReminder));
        inputMembers.add(new RoleMember().setMemberName("sys.auth.zms").setActive(true)
                .setReviewReminder(sixtyDaysReminder));
        zmsTestInitializer.getZms().putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, inputRole);

        Role resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", false, false, false);

        int userChecked = 0;
        for (RoleMember roleMember : resRole1.getRoleMembers()) {
            switch (roleMember.getMemberName()) {
                case "user.jane":
                case "user.doe":
                    userChecked += 1;
                    assertTrue(roleMember.getReviewReminder().toDate().after(fortyFiveDaysLowerBoundReminder.toDate()) && roleMember.getReviewReminder().toDate().before(fortyFiveDaysUpperBoundReminder.toDate()));
                    assertTrue(roleMember.getApproved());
                    break;
                case "sys.auth.zms":
                    userChecked += 1;
                    assertTrue(roleMember.getReviewReminder().toDate().after(fiftyDaysLowerBoundReminder.toDate()) && roleMember.getReviewReminder().toDate().before(fiftyDaysUpperBoundReminder.toDate()));
                    assertTrue(roleMember.getApproved());
                    break;
                case domainName + ":group.group1":
                    userChecked += 1;
                    assertTrue(roleMember.getReviewReminder().toDate().after(fiftyFiveDaysLowerBoundReminder.toDate()) && roleMember.getReviewReminder().toDate().before(fiftyFiveDaysUpperBoundReminder.toDate()));
                    assertTrue(roleMember.getApproved());
                    break;
            }
        }
        assertEquals(userChecked, 4);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleReviewNoChanges() {

        final String domainName = "role-review-no-changes";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Timestamp tenDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(10, TimeUnit.DAYS));
        Timestamp twentyDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(20, TimeUnit.DAYS));

        Membership mbr = zmsTestInitializer.generateMembership("role1", "user.doe", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = zmsTestInitializer.generateMembership("role1", "user.user1", null);
        mbr.setReviewReminder(tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.user1", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = zmsTestInitializer.generateMembership("role1", "user.user2", null);
        mbr.setReviewReminder(tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.user2", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = zmsTestInitializer.generateMembership("role1", "sys.auth.zms", tenDaysExpiry);
        mbr.setReviewReminder(tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "sys.auth.zms", zmsTestInitializer.getAuditRef(), false, mbr);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);

        mbr = zmsTestInitializer.generateMembership("role1", domainName + ":group.group1", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", domainName + ":group.group1", zmsTestInitializer.getAuditRef(), false, mbr);

        Role inputRole = new Role().setName("role1");
        List<RoleMember> inputMembers = new ArrayList<>();
        inputRole.setRoleMembers(inputMembers);
        inputMembers.add(new RoleMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new RoleMember().setMemberName("user.doe").setActive(true)
                .setExpiration(twentyDaysExpiry));
        inputMembers.add(new RoleMember().setMemberName("user.jane").setActive(true)
                .setExpiration(tenDaysExpiry));
        inputMembers.add(new RoleMember().setMemberName("user.user1").setActive(true)
                .setReviewReminder(twentyDaysExpiry));
        inputMembers.add(new RoleMember().setMemberName("user.user2").setActive(true));
        inputMembers.add(new RoleMember().setMemberName("sys.auth.zms").setActive(true)
                .setReviewReminder(twentyDaysExpiry));
        inputMembers.add(new RoleMember().setMemberName(domainName + ":group.group1").setActive(true)
                .setReviewReminder(twentyDaysExpiry));

        zmsTestInitializer.getZms().putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, inputRole);

        Role resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", false, false, false);

        // john should be deleted and all others should stay as before - no changes

        int userChecked = 0;
        for (RoleMember roleMember : resRole1.getRoleMembers()) {
            switch (roleMember.getMemberName()) {
                case "user.jane":
                    assertTrue(roleMember.getApproved());
                    assertNull(roleMember.getExpiration());
                    assertNull(roleMember.getReviewReminder());
                    userChecked += 1;
                    break;
                case "user.doe":
                case domainName + ":group.group1":
                    assertTrue(roleMember.getApproved());
                    assertEquals(roleMember.getExpiration(), tenDaysExpiry);
                    assertNull(roleMember.getReviewReminder());
                    userChecked += 1;
                    break;
                case "user.user1":
                case "user.user2":
                    assertTrue(roleMember.getApproved());
                    assertEquals(roleMember.getReviewReminder(), tenDaysExpiry);
                    assertNull(roleMember.getExpiration());
                    userChecked += 1;
                    break;
                case "sys.auth.zms":
                    assertTrue(roleMember.getApproved());
                    assertEquals(roleMember.getReviewReminder(), tenDaysExpiry);
                    assertEquals(roleMember.getExpiration(), tenDaysExpiry);
                    userChecked += 1;
                    break;
                case "user.john":
                    fail();
                    break;
            }
        }
        assertEquals(userChecked, 6);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleReviewError() {

        final String domainName = "role-review-error";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Timestamp tenDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(10, TimeUnit.DAYS));
        Timestamp sixtyDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(60, TimeUnit.DAYS));

        Membership mbr = zmsTestInitializer.generateMembership("role1", "user.doe", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        RoleMeta rm = createRoleMetaObject(true);
        rm.setMemberExpiryDays(45);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), rm);

        Role inputRole = new Role().setName("role2");
        List<RoleMember> inputMembers = new ArrayList<>();
        inputRole.setRoleMembers(inputMembers);
        inputMembers.add(new RoleMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new RoleMember().setMemberName("user.doe").setActive(true).setExpiration(sixtyDaysExpiry));

        try {
            zmsTestInitializer.getZms().putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, inputRole);
            fail();
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 400);
        }

        inputRole.setName("role1");
        try {
            zmsTestInitializer.getZms().putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), "role-review-dom1", "role1", zmsTestInitializer.getAuditRef(), false, inputRole);
            fail();
        } catch (ResourceException re) {
            assertEquals(re.getCode(), 404);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleReviewAuditEnabled() {

        final String domainName = "role-review-audit-enabled";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "role1", null,
                "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, role1);

        Timestamp tenDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(10, TimeUnit.DAYS));
        Timestamp sixtyDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(60, TimeUnit.DAYS));
        Timestamp fortyFiveDaysLowerBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(45, TimeUnit.DAYS));

        Membership mbr = zmsTestInitializer.generateMembership("role1", "user.doe", tenDaysExpiry);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        RoleMeta rm = createRoleMetaObject(true);
        rm.setMemberExpiryDays(45);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), rm);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for Role review test", "NewOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Role inputRole = new Role().setName("role1");
        List<RoleMember> inputMembers = new ArrayList<>();
        inputRole.setRoleMembers(inputMembers);
        inputMembers.add(new RoleMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new RoleMember().setMemberName("user.doe").setActive(true).setExpiration(sixtyDaysExpiry));
        zmsTestInitializer.getZms().putRoleReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", zmsTestInitializer.getAuditRef(), false, inputRole);

        Role resRole1 = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "role1", false, false, true);

        Timestamp fortyFiveDaysUpperBoundExpiry = Timestamp.fromMillis(System.currentTimeMillis() +
                TimeUnit.MILLISECONDS.convert(45, TimeUnit.DAYS) + TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES));

        int userChecked = 0;
        for (RoleMember roleMember : resRole1.getRoleMembers()) {
            if (roleMember.getMemberName().equals("user.jane")) {
                userChecked += 1;
                assertTrue(roleMember.getExpiration().toDate().after(fortyFiveDaysLowerBoundExpiry.toDate())
                        && roleMember.getExpiration().toDate().before(fortyFiveDaysUpperBoundExpiry.toDate()));
                assertTrue(roleMember.getApproved());
            }

            // 2 records for user.doe - one approved before making the domain auditEnabled with
            //expiry date = now + 10 and another pending as part of putRoleReview with expiry date = now + 45

            if (roleMember.getMemberName().equals("user.doe")) {
                userChecked += 1;
                if (roleMember.getApproved() == Boolean.TRUE) {
                    assertEquals(roleMember.getExpiration(), tenDaysExpiry);
                } else {
                    assertTrue(roleMember.getExpiration().toDate().after(fortyFiveDaysLowerBoundExpiry.toDate())
                            && roleMember.getExpiration().toDate().before(fortyFiveDaysUpperBoundExpiry.toDate()));
                }

            }
        }
        assertEquals(userChecked, 3);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testLoadServerPrivateKey() {

        // first we try with ec private key only

        System.setProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY, "src/test/resources/unit_test_zms_private_ec.pem");
        System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_RSA_KEY);
        System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_KEY);

        zmsTestInitializer.getZms().loadPrivateKeyStore();
        assertNotNull(zmsTestInitializer.getZms().privateECKey);
        assertEquals(zmsTestInitializer.getZms().privateKey, zmsTestInitializer.getZms().privateECKey);
        assertNull(zmsTestInitializer.getZms().privateRSAKey);

        // now let's try the rsa key

        System.setProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_RSA_KEY, "src/test/resources/unit_test_zms_private.pem");
        System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY);
        System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_KEY);

        zmsTestInitializer.getZms().loadPrivateKeyStore();
        assertNotNull(zmsTestInitializer.getZms().privateRSAKey);
        assertEquals(zmsTestInitializer.getZms().privateKey, zmsTestInitializer.getZms().privateRSAKey);
        assertNull(zmsTestInitializer.getZms().privateECKey);

        // now back to our regular key setup

        System.setProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_KEY, "src/test/resources/unit_test_zms_private.pem");
        System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_EC_KEY);
        System.clearProperty(FilePrivateKeyStore.ATHENZ_PROP_PRIVATE_RSA_KEY);

        zmsTestInitializer.getZms().loadPrivateKeyStore();
        assertNotNull(zmsTestInitializer.getZms().privateKey);
        assertNull(zmsTestInitializer.getZms().privateECKey);
        assertNull(zmsTestInitializer.getZms().privateRSAKey);
    }

    @Test
    public void testLoadInvalidClasses() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        System.setProperty(ZMSConsts.ZMS_PROP_METRIC_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadMetricObject();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid metric class"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_METRIC_FACTORY_CLASS);

        System.setProperty(ZMS_PROP_AUTH_HISTORY_STORE_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadAuthHistoryStore();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid auth history store"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_AUTH_HISTORY_STORE_FACTORY_CLASS);

        System.setProperty(ZMSConsts.ZMS_PROP_OBJECT_STORE_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadObjectStore();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid object store"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_OBJECT_STORE_FACTORY_CLASS);

        System.setProperty(ZMSConsts.ZMS_PROP_PRIVATE_KEY_STORE_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadPrivateKeyStore();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid private key store"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_PRIVATE_KEY_STORE_FACTORY_CLASS);

        System.setProperty(ZMSConsts.ZMS_PROP_AUDIT_LOGGER_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadAuditLogger();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid audit logger class"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_AUDIT_LOGGER_FACTORY_CLASS);

        assertNull(zmsImpl.getAuthority("invalid.class"));

        System.setProperty(ZMSConsts.ZMS_PROP_AUTHORITY_CLASSES, "invalid.class");
        try {
            zmsImpl.loadAuthorities();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid authority"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_AUTHORITY_CLASSES);

        System.setProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadStatusChecker();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid status checker"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_STATUS_CHECKER_FACTORY_CLASS);

        System.setProperty(ZMSConsts.ZMS_PROP_DOMAIN_META_STORE_FACTORY_CLASS, "invalid.class");
        try {
            zmsImpl.loadDomainMetaStore();
            fail();
        } catch (Exception ex) {
            assertTrue(ex.getMessage().contains("Invalid metastore factory"));
        }
        System.clearProperty(ZMSConsts.ZMS_PROP_DOMAIN_META_STORE_FACTORY_CLASS);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testInvalidConfigValues() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        System.setProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT, "-10");
        System.setProperty(ZMSConsts.ZMS_PROP_SIGNED_POLICY_TIMEOUT, "-10");

        zmsImpl.loadConfigurationSettings();

        assertEquals(zmsImpl.virtualDomainLimit, 5);
        assertEquals(zmsImpl.signedPolicyTimeout, 604800000);

        System.clearProperty(ZMSConsts.ZMS_PROP_VIRTUAL_DOMAIN_LIMIT);
        System.clearProperty(ZMSConsts.ZMS_PROP_SIGNED_POLICY_TIMEOUT);

        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testLoadAuthorities() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        assertNull(zmsImpl.userAuthority);
        assertNull(zmsImpl.principalAuthority);

        // set the authority class properties

        System.setProperty(ZMSConsts.ZMS_PROP_AUTHORITY_CLASSES, ZMSConsts.ZMS_PRINCIPAL_AUTHORITY_CLASS);
        System.setProperty(ZMSConsts.ZMS_PROP_PRINCIPAL_AUTHORITY_CLASS, ZMSConsts.ZMS_PRINCIPAL_AUTHORITY_CLASS);
        System.setProperty(ZMSConsts.ZMS_PROP_USER_AUTHORITY_CLASS, ZMSConsts.ZMS_PRINCIPAL_AUTHORITY_CLASS);

        zmsImpl.loadAuthorities();

        assertNotNull(zmsImpl.userAuthority);
        assertNotNull(zmsImpl.principalAuthority);

        System.clearProperty(ZMSConsts.ZMS_PROP_AUTHORITY_CLASSES);
        System.clearProperty(ZMSConsts.ZMS_PROP_PRINCIPAL_AUTHORITY_CLASS);
        System.clearProperty(ZMSConsts.ZMS_PROP_USER_AUTHORITY_CLASS);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testAutoApplyTemplate() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        System.setProperty(ZMSConsts.ZMS_AUTO_UPDATE_TEMPLATE_FEATURE_FLAG, "true");
        try {
            zmsImpl.autoApplyTemplates();
        } catch (Exception e) {
            fail();
        }
        System.clearProperty(ZMSConsts.ZMS_AUTO_UPDATE_TEMPLATE_FEATURE_FLAG);
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testLoadPublicKeysInvalidService() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        // delete all public keys from zms service

        ServiceIdentity serviceRes = zmsImpl.getServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "zms");
        List<PublicKeyEntry> keyList = serviceRes.getPublicKeys();
        for (PublicKeyEntry entry : keyList) {
            zmsTestInitializer.getZms().deletePublicKeyEntry(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "zms", entry.getId(), zmsTestInitializer.getAuditRef());
        }

        // delete all public keys and load again

        zmsImpl.serverPublicKeyMap.clear();
        zmsTestInitializer.loadServerPublicKeys(zmsImpl);

        assertFalse(zmsImpl.serverPublicKeyMap.isEmpty());

        // now verify without the zms service

        zmsImpl.deleteServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "sys.auth", "zms", zmsTestInitializer.getAuditRef());

        // delete all public keys and load again

        zmsImpl.serverPublicKeyMap.clear();
        zmsTestInitializer.loadServerPublicKeys(zmsImpl);

        assertFalse(zmsImpl.serverPublicKeyMap.isEmpty());
        zmsImpl.objectStore.clearConnections();
    }

    @Test
    public void testAddDefaultAdminMembers() {

        final String domainName = "add-default-domain-admins";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role adminRole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", false, false, false);
        assertEquals(adminRole.getRoleMembers().size(), 1);

        List<String> admins = new ArrayList<>();
        admins.add(zmsTestInitializer.getAdminUser());
        admins.add("user.default");

        DefaultAdmins addDefaultAdmins = new DefaultAdmins().setAdmins(admins);
        zmsTestInitializer.getZms().addDefaultAdminMembers(zmsTestInitializer.getMockDomRsrcCtx(), domainName, adminRole, addDefaultAdmins, zmsTestInitializer.getAuditRef(), "unittest");

        adminRole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", false, false, false);
        assertEquals(adminRole.getRoleMembers().size(), 2);
        boolean newAdminFound = false;
        for (RoleMember roleMember : adminRole.getRoleMembers()) {
            if (roleMember.getMemberName().equals("user.default")) {
                newAdminFound = true;
                break;
            }
        }
        assertTrue(newAdminFound);

        // now let's delete the default admin user

        admins = new ArrayList<>();
        admins.add("user.default");
        admins.add("user.unknown");
        DefaultAdmins deleteDefaultAdmins = new DefaultAdmins().setAdmins(admins);

        zmsTestInitializer.getZms().removeAdminMembers(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Collections.singletonList(adminRole),
                adminRole.getName(), deleteDefaultAdmins, zmsTestInitializer.getAuditRef(), "unittest");

        // verify we're back to a single admin role member

        adminRole = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", false, false, false);
        assertEquals(adminRole.getRoleMembers().size(), 1);
        assertEquals(adminRole.getRoleMembers().get(0).getMemberName(), zmsTestInitializer.getAdminUser());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetJWSDomain() throws JsonProcessingException, ParseException, JOSEException {

        final String domainName = "jws-domain";

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setMemberPurgeExpiryDays(90);
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        Response response = zmsImpl.getJWSDomain(ctx, domainName, null, null);
        JWSDomain jwsDomain = (JWSDomain) response.getEntity();
        DomainData domainData = getDomainData(jwsDomain);

        assertNotNull(domainData);
        assertEquals(domainData.getName(), "jws-domain");
        assertEquals(domainData.getMemberPurgeExpiryDays(), 90);

        Map<String, String> header = jwsDomain.getHeader();
        assertEquals(header.get("kid"), "0");

        // now we're going to ask for the same domain with the tag
        // and make sure we get back 304

        EntityTag tag = response.getEntityTag();
        response = zmsImpl.getJWSDomain(ctx, domainName, Boolean.FALSE, tag.toString());
        assertEquals(response.getStatus(), ResourceException.NOT_MODIFIED);

        // pass a timestamp a minute back and make sure we
        // get back the domain

        Timestamp tstamp = Timestamp.fromMillis(System.currentTimeMillis() - 3600);
        response = zmsImpl.getJWSDomain(ctx, domainName, false, tstamp.toString());
        jwsDomain = (JWSDomain) response.getEntity();
        domainData = getDomainData(jwsDomain);

        assertNotNull(domainData);
        assertEquals(domainData.getName(), "jws-domain");
        assertEquals(domainData.getMemberPurgeExpiryDays(), 90);

        // any invalid data is also treated as no etag

        response = zmsImpl.getJWSDomain(ctx, domainName, null, "unknown-date");
        jwsDomain = (JWSDomain) response.getEntity();
        domainData = getDomainData(jwsDomain);

        assertNotNull(domainData);
        assertEquals(domainData.getName(), "jws-domain");
        assertEquals(domainData.getMemberPurgeExpiryDays(), 90);

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testGetJWSDomainP1363Signature() throws JsonProcessingException, ParseException, JOSEException {

        final String domainName = "jws-domain-p1363";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Response response = zmsTestInitializer.getZms().getJWSDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, null);
        JWSDomain jwsDomain = (JWSDomain) response.getEntity();

        JWSObject jwsObject = new JWSObject(Base64URL.from(jwsDomain.getProtectedHeader()),
                Base64URL.from(jwsDomain.getPayload()), Base64URL.from(jwsDomain.getSignature()));

        JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) Crypto.extractPublicKey(zmsTestInitializer.getZms().privateKey.getKey()));
        assertTrue(jwsObject.verify(verifier));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetJWSDomainError() {

        // not found

        try {
            zmsTestInitializer.getZms().getJWSDomain(zmsTestInitializer.getMockDomRsrcCtx(), "unknown", Boolean.TRUE, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ResourceException.NOT_FOUND, ex.getCode());
        }

        // null data causing exception which is caught
        // and we return null back as result

        ServerPrivateKey pkey = zmsTestInitializer.getZms().privateKey;
        zmsTestInitializer.getZms().privateKey = null;
        assertNull(zmsTestInitializer.getZms().signJwsDomain(null, null));
        zmsTestInitializer.getZms().privateKey = pkey;
    }

    @Test
    public void testValidateIntegerValue() {

        // valid values

        zmsTestInitializer.getZms().validateIntegerValue(10, "positive");
        zmsTestInitializer.getZms().validateIntegerValue(0, "zero");
        zmsTestInitializer.getZms().validateIntegerValue(null, "null");

        // invalid value

        try {
            zmsTestInitializer.getZms().validateIntegerValue(-1, "negative");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }
    }

    @Test
    public void testIsAllowedDeletePendingMembership() {

        final String domainName = "test-domain";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "testrole1", null, "user.user1", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", zmsTestInitializer.getAuditRef(), false, role1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "Policy1", "testrole1",
                "UPDATE", domainName + ":role.*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        assertTrue(zmsTestInitializer.getZms().isAllowedDeletePendingMembership(zmsTestInitializer.getMockDomRsrcCtx().principal(), domainName,
                "testrole1", "user.pending"));

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=jane";
        Principal rsrcPrince = SimplePrincipal.create("user", "jane", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        assertTrue(zmsTestInitializer.getZms().isAllowedDeletePendingMembership(rsrcPrince, domainName,
                "testrole1", "user.pending"));

        unsignedCreds = "v=U1;d=user;n=john";
        rsrcPrince = SimplePrincipal.create("user", "john", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        // this time false since john is not authorized

        assertFalse(zmsTestInitializer.getZms().isAllowedDeletePendingMembership(rsrcPrince, domainName,
                "testrole1", "user.pending"));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePendingMembershipAdminRequest() {

        final String domainName = "delete-pending";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "delete pending membership",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), domainName, "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "org", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject(domainName, "testrole1", null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // first request using admin principal

        DomainRoleMembership domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=jane";
        Principal rsrcPrince = SimplePrincipal.create("user", "jane", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        ResourceContext ctx = zmsTestInitializer.createResourceContext(rsrcPrince);

        // first try to delete the pending request without proper authorization

        try {
            zmsTestInitializer.getZms().deletePendingMembership(ctx, domainName, "testrole1", "user.bob", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        // repeat the request using context principal

        zmsTestInitializer.getZms().deletePendingMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", "user.bob", zmsTestInitializer.getAuditRef());

        // check the list to see there are no pending requests

        domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);
        assertNotNull(domainRoleMembership);
        assertTrue(domainRoleMembership.getDomainRoleMembersList().isEmpty());

        // delete some unknown member in the same role as admin

        try {
            zmsTestInitializer.getZms().deletePendingMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", "user.bob2", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // delete some member in an unknown domain

        try {
            zmsTestInitializer.getZms().deletePendingMembership(zmsTestInitializer.getMockDomRsrcCtx(), "unkwown-domain", "testrole1", "user.bob2", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePendingMembershipSelfServeRequest() {

        final String domainName = "delete-pending-self-serve";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "delete pending membership",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), domainName, "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "org", zmsTestInitializer.getAuditRef(), meta);

        Role auditedRole = zmsTestInitializer.createRoleObject(domainName, "testrole1", null, "user.john", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", zmsTestInitializer.getAuditRef(), false, auditedRole);
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
        RoleMeta rm = new RoleMeta().setSelfServe(true);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", zmsTestInitializer.getAuditRef(), rm);

        // user.joe is going to add user.bob in the self serve role

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=joe";
        Principal rsrcPrince = SimplePrincipal.create("user", "joe", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        ResourceContext ctxJoe = zmsTestInitializer.createResourceContext(rsrcPrince);

        Membership mbr = new Membership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putMembership(ctxJoe, domainName, "testrole1", "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // first request using admin principal

        DomainRoleMembership domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);

        assertNotNull(domainRoleMembership);
        assertNotNull(domainRoleMembership.getDomainRoleMembersList());
        assertEquals(domainRoleMembership.getDomainRoleMembersList().size(), 1);
        for (DomainRoleMembers drm : domainRoleMembership.getDomainRoleMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainRoleMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (MemberRole mr : mem.getMemberRoles()) {
                    assertNotNull(mr);
                    assertEquals(mr.getRoleName(), "testrole1");
                }
            }
        }

        // first try to delete the pending request without proper authorization

        unsignedCreds = "v=U1;d=user;n=jane";
        rsrcPrince = SimplePrincipal.create("user", "jane", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        ResourceContext ctxJane = zmsTestInitializer.createResourceContext(rsrcPrince);

        try {
            zmsTestInitializer.getZms().deletePendingMembership(ctxJane, domainName, "testrole1", "user.bob", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        // repeat the request using joe principal

        zmsTestInitializer.getZms().deletePendingMembership(ctxJoe, domainName, "testrole1", "user.bob", zmsTestInitializer.getAuditRef());

        // check the list to see there are no pending requests

        domainRoleMembership = zmsTestInitializer.getZms().getPendingDomainRoleMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);
        assertNotNull(domainRoleMembership);
        assertTrue(domainRoleMembership.getDomainRoleMembersList().isEmpty());

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetDomainTemplateDetailsList() {

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        final String domainName = "test-domain";
        List<String> adminUsers = new ArrayList<>();
        adminUsers.add("user.test");
        List<String> solutionTemplate = new ArrayList<>();
        solutionTemplate.add("user_provisioning");

        zmsImpl.dbService.makeDomain(zmsTestInitializer.getMockDomRsrcCtx(),
                ZMSTestUtils.makeDomainObject(domainName, "Test Domain", "org", true, null, 0, null, 0),
                adminUsers, solutionTemplate, zmsTestInitializer.getAuditRef());

        assertNotNull(zmsImpl.getDomainTemplateDetailsList(zmsTestInitializer.getMockDomRsrcCtx(), domainName));
        zmsImpl.dbService.executeDeleteDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                zmsTestInitializer.getAuditRef(), "unit-test");
    }

    @Test
    public void testGetServerTemplateDetailsList() {
        DomainTemplateDetailsList serverTemplateDetailsList = zmsTestInitializer.getZms().getServerTemplateDetailsList(zmsTestInitializer.getMockDomRsrcCtx());
        assertEquals(serverTemplateDetailsList.getMetaData().size(), 10);
        assertEquals(serverTemplateDetailsList.getMetaData().get(6).getDescription(), "Vipng template");
        assertEquals(serverTemplateDetailsList.getMetaData().get(6).getLatestVersion().intValue(), 10);
        assertEquals(serverTemplateDetailsList.getMetaData().get(6).getTemplateName(), "vipng");
    }

    @Test
    public void testEnforcedUserAuthorityFilter() {

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        // null authority, filter or empty filter

        zmsTestInitializer.getZms().userAuthority = null;
        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter("validFilter", null));
        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter(null, "validFilter"));
        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter("validFilter", "validFilter"));
        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter(null, null));

        zmsTestInitializer.getZms().userAuthority = Mockito.mock(Authority.class);

        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter(null, null));
        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter("", null));
        assertNull(zmsTestInitializer.getZms().enforcedUserAuthorityFilter(null, ""));

        // valid filter

        assertEquals("validFilter", zmsTestInitializer.getZms().enforcedUserAuthorityFilter("validFilter", null));
        assertEquals("validFilter", zmsTestInitializer.getZms().enforcedUserAuthorityFilter(null, "validFilter"));
        assertEquals("validFilter", zmsTestInitializer.getZms().enforcedUserAuthorityFilter("validFilter", ""));
        assertEquals("validFilter", zmsTestInitializer.getZms().enforcedUserAuthorityFilter("", "validFilter"));
        assertEquals("validFilter1,validFilter2", zmsTestInitializer.getZms().enforcedUserAuthorityFilter("validFilter1", "validFilter2"));
        assertEquals("validFilter,validFilter", zmsTestInitializer.getZms().enforcedUserAuthorityFilter("validFilter", "validFilter"));

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testGetUserAuthorityExpiryAttr() {

        Role role = new Role().setUserAuthorityExpiration("elevated-clearance");

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = null;

        // with authority null we always get null

        assertNull(zmsTestInitializer.getZms().getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration()));

        zmsTestInitializer.getZms().userAuthority = Mockito.mock(Authority.class);

        assertEquals("elevated-clearance", zmsTestInitializer.getZms().getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration()));

        role.setUserAuthorityExpiration("");
        assertNull(zmsTestInitializer.getZms().getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration()));

        role.setUserAuthorityExpiration(null);
        assertNull(zmsTestInitializer.getZms().getUserAuthorityExpiryAttr(role.getUserAuthorityExpiration()));

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testGetUserAuthorityExpiry() {

        Role role = new Role().setUserAuthorityExpiration("elevated-clearance");

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = null;

        // with authority null we always get null

        assertNull(zmsTestInitializer.getZms().getUserAuthorityExpiry("user.john", role.getUserAuthorityExpiration(), "unit-test"));

        Authority authority = Mockito.mock(Authority.class);
        when(authority.getDateAttribute("user.john", "elevated-clearance"))
                .thenReturn(new Date());
        when(authority.getDateAttribute("user.joe", "elevated-clearance"))
                .thenReturn(null);
        zmsTestInitializer.getZms().userAuthority = authority;

        assertNotNull(zmsTestInitializer.getZms().getUserAuthorityExpiry("user.john", role.getUserAuthorityExpiration(), "unit-test"));

        try {
            zmsTestInitializer.getZms().getUserAuthorityExpiry("user.joe", role.getUserAuthorityExpiration(), "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("User does not have required user authority expiry configured"));
        }

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testUpdateRoleMemberUserAuthorityExpiry() {

        Role role = new Role().setUserAuthorityExpiration("elevated-clearance");

        List<RoleMember> members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.joe").setPrincipalType(Principal.Type.USER.getValue()));
        role.setRoleMembers(members);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = null;

        // with authority null we always get no changes

        zmsTestInitializer.getZms().updateRoleMemberUserAuthorityExpiry(role, "unit-test");
        assertNull(role.getRoleMembers().get(0).getExpiration());
        assertNull(role.getRoleMembers().get(1).getExpiration());

        Authority authority = Mockito.mock(Authority.class);
        when(authority.getDateAttribute("user.john", "elevated-clearance"))
                .thenReturn(new Date());
        when(authority.getDateAttribute("user.jane", "elevated-clearance"))
                .thenReturn(new Date());
        when(authority.getDateAttribute("user.joe", "elevated-clearance"))
                .thenReturn(null);
        zmsTestInitializer.getZms().userAuthority = authority;

        // with one valid and one invalid we should get an exception

        try {
            zmsTestInitializer.getZms().updateRoleMemberUserAuthorityExpiry(role, "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid member: user.joe"));
        }

        // let's have one valid user and one service

        members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("sports.api").setPrincipalType(Principal.Type.SERVICE.getValue()));
        role.setRoleMembers(members);

        // the user will have an expiration while service is skipped

        zmsTestInitializer.getZms().updateRoleMemberUserAuthorityExpiry(role, "unit-test");
        assertNotNull(role.getRoleMembers().get(0).getExpiration());
        assertNull(role.getRoleMembers().get(1).getExpiration());

        // now let's have only user members

        members = new ArrayList<>();
        members.add(new RoleMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        members.add(new RoleMember().setMemberName("user.jane").setPrincipalType(Principal.Type.USER.getValue()));
        role.setRoleMembers(members);

        zmsTestInitializer.getZms().updateRoleMemberUserAuthorityExpiry(role, "unit-test");
        assertNotNull(role.getRoleMembers().get(0).getExpiration());
        assertNotNull(role.getRoleMembers().get(1).getExpiration());

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testValidateRoleUserAuthorityAttributes() {

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = null;

        // with authority null we always get exceptions if we have
        // not empty values specified

        zmsTestInitializer.getZms().validateUserAuthorityAttributes(null, null, "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes(null, "", "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("", null, "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("", "", "unit-test");

        try {
            zmsTestInitializer.getZms().validateUserAuthorityAttributes("attr1", null, "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("User Authority filter specified without a valid user authority"));
        }

        try {
            zmsTestInitializer.getZms().validateUserAuthorityAttributes(null, "attr1", "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("User Authority expiry specified without a valid user authority"));
        }

        Authority authority = Mockito.mock(Authority.class);
        Set<String> booleanAttrSet = new HashSet<>();
        booleanAttrSet.add("elevated-clearance");
        booleanAttrSet.add("full-time-employee");
        when(authority.booleanAttributesSupported()).thenReturn(booleanAttrSet);
        Set<String> dateAttrSet = new HashSet<>();
        dateAttrSet.add("term-date");
        when(authority.dateAttributesSupported()).thenReturn(dateAttrSet);
        zmsTestInitializer.getZms().userAuthority = authority;

        // valid values

        zmsTestInitializer.getZms().validateUserAuthorityAttributes("elevated-clearance", null, "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("elevated-clearance", "", "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("elevated-clearance,full-time-employee", null, "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("full-time-employee,elevated-clearance", "term-date", "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("", "term-date", "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes(null, "term-date", "unit-test");

        zmsTestInitializer.getZms().validateUserAuthorityAttributes(null, null, "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes(null, "", "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("", null, "unit-test");
        zmsTestInitializer.getZms().validateUserAuthorityAttributes("", "", "unit-test");

        // invalid values

        try {
            zmsTestInitializer.getZms().validateUserAuthorityAttributes("elevated-clearance,contractor", null, "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("contractor is not a valid user authority attribute"));
        }

        try {
            zmsTestInitializer.getZms().validateUserAuthorityAttributes("elevated-clearance", "hire-date", "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("hire-date is not a valid user authority date attribute"));
        }

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testSetRoleMemberExpiration() {

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = null;

        // with authority null we always get no changes

        Authority authority = Mockito.mock(Authority.class);
        Date testDate = new Date();
        when(authority.getDateAttribute("user.john", "elevated-clearance"))
                .thenReturn(testDate);
        when(authority.getDateAttribute("user.jane", "elevated-clearance"))
                .thenReturn(testDate);
        when(authority.getDateAttribute("user.joe", "elevated-clearance"))
                .thenReturn(null);
        Set<String> dateAttrSet = new HashSet<>();
        dateAttrSet.add("elevated-clearance");
        when(authority.dateAttributesSupported()).thenReturn(dateAttrSet);

        zmsTestInitializer.getZms().userAuthority = authority;

        // add a role with an elevated clearance option

        final String domainName = "userexpirydomain";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String roleName = "audit-role";
        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, null);
        role.setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);

        // add a valid member who should get the expiry date

        Membership mbr = new Membership().setMemberName("user.john");
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.john", zmsTestInitializer.getAuditRef(), false, mbr);

        Membership mbrResult = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.john", null);
        assertNotNull(mbrResult);
        assertEquals(mbrResult.getMemberName(), "user.john");
        assertNotNull(mbrResult.getExpiration());
        assertEquals(mbrResult.getExpiration().millis(), testDate.getTime());

        // user with no expiry

        mbr = new Membership().setMemberName("user.joe");
        try {
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "user.joe", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("User does not have required user authority expiry configured"));
        }

        // service user should be added ok since service user is not processed
        // by user authority

        mbr = new Membership().setMemberName("userexpirydomain.api");
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "userexpirydomain.api", zmsTestInitializer.getAuditRef(), false, mbr);
        mbrResult = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, "userexpirydomain.api", null);
        assertNotNull(mbrResult);

        // add a role with group expiry days set

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);
        final int groupExpiryDays = 10;
        final String roleName1 = "role-group-member-expiry";
        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName1, null, null);
        role1.setGroupExpiryDays(groupExpiryDays);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, zmsTestInitializer.getAuditRef(), false, role1);

        Membership mbr1 = new Membership().setMemberName(group1.name);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, group1.name, zmsTestInitializer.getAuditRef(), false, mbr1);

        mbrResult = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, group1.name, null);
        long days = ((mbrResult.getExpiration().millis() - testDate.getTime()) / (60*60*24*1000));
        assertNotNull(mbrResult);
        assertEquals(mbrResult.getMemberName(), group1.name);
        assertNotNull(mbrResult.getExpiration());
        assertEquals(days, groupExpiryDays);

        RoleMeta rm = new RoleMeta().setGroupExpiryDays(1);
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, zmsTestInitializer.getAuditRef(), rm);
        mbrResult = zmsTestInitializer.getZms().getMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, group1.name, null);
        days = ((mbrResult.getExpiration().millis() - testDate.getTime()) / (60*60*24*1000));
        assertNotNull(mbrResult);
        assertEquals(mbrResult.getMemberName(), group1.name);
        assertNotNull(mbrResult.getExpiration());
        assertEquals(days, 1);

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testSetGroupMemberExpiration() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        Authority savedAuthority = zmsImpl.userAuthority;
        zmsImpl.userAuthority = null;

        // with authority null we always get no changes

        Authority authority = Mockito.mock(Authority.class);
        Date testDate = new Date();
        when(authority.getDateAttribute("user.john2", "elevated-clearance"))
                .thenReturn(testDate);
        when(authority.getDateAttribute("user.jane2", "elevated-clearance"))
                .thenReturn(testDate);
        when(authority.getDateAttribute("user.joe2", "elevated-clearance"))
                .thenReturn(null);
        when(authority.isValidUser(anyString()))
                .thenReturn(true);
        Set<String> dateAttrSet = new HashSet<>();
        dateAttrSet.add("elevated-clearance");
        when(authority.dateAttributesSupported()).thenReturn(dateAttrSet);

        zmsImpl.userAuthority = authority;

        // add a group with an elevated clearance option

        final String domainName = "userexpirydomain";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain2", "testOrg2", "user.user2");
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        final String groupName = "audit-group2";
        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, null);
        group.setUserAuthorityExpiration("elevated-clearance");
        group.setSelfServe(true);
        zmsImpl.putGroup(ctx, domainName, groupName, auditRef, false, group);

        // add a valid member who should get the expiry date

        GroupMembership mbr = new GroupMembership().setMemberName("user.john2");
        zmsImpl.putGroupMembership(ctx, domainName, groupName, "user.john2", auditRef, false, mbr);

        GroupMembership mbrResult = zmsImpl.getGroupMembership(ctx, domainName, groupName, "user.john2", null);
        assertNotNull(mbrResult);
        assertEquals(mbrResult.getMemberName(), "user.john2");
        assertNotNull(mbrResult.getExpiration());
        assertEquals(mbrResult.getExpiration().millis(), testDate.getTime());

        // user with no expiry

        mbr = new GroupMembership().setMemberName("user.joe2");
        try {
            zmsImpl.putGroupMembership(ctx, domainName, groupName, "user.joe2", auditRef, false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("User does not have required user authority expiry configured"));
        }

        // First add service
        ServiceIdentity serviceIdentity = new ServiceIdentity().setName("userexpirydomain.api");
        zmsImpl.putServiceIdentity(ctx, domainName, "api", auditRef, false, serviceIdentity);

        // service user should be added ok since service user is not processed
        // by user authority

        mbr = new GroupMembership().setMemberName("userexpirydomain.api");
        zmsImpl.putGroupMembership(ctx, domainName, groupName, "userexpirydomain.api", auditRef, false, mbr);
        mbrResult = zmsImpl.getGroupMembership(ctx, domainName, groupName, "userexpirydomain.api", null);
        assertNotNull(mbrResult);

        zmsImpl.userAuthority = savedAuthority;
        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testSetGroupMemberExpirationGroupRejected() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        GroupMember groupMember = new GroupMember().setMemberName("dev-group")
                .setPrincipalType(Principal.Type.GROUP.getValue());
        try {
            zmsImpl.setGroupMemberExpiration(null, null, groupMember, null, "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("Group member can't be of type group"));
        }
    }

    @DataProvider(name = "delegatedRoles")
    public static Object[][] getDelegatedRoles() {
        String domainName = "test_domain";

        Role role1 = new Role();
        String memberName = "member";
        RoleMember roleMember = new RoleMember().setMemberName(memberName);

        Role role2 = new Role();
        role2.setMembers(Collections.singletonList(memberName));
        role2.setRoleMembers(Collections.singletonList(roleMember));

        Role role3 = new Role();
        role3.setRoleMembers(Collections.singletonList(roleMember));

        Role role4 = new Role();
        role4.setRoleMembers(Collections.singletonList(roleMember));
        role4.setTrust("trust");

        Role role5 = new Role();
        role5.setMembers(Collections.singletonList(memberName));
        role5.setTrust("trust");

        Role role6 = new Role();
        role6.setTrust("trust");

        Role role7 = new Role();
        role7.setTrust("trust-notfound");

        return new Object[][] {
                {domainName, role1, false},
                {domainName, role2, true},
                {domainName, role3, false},
                {domainName, role4, true},
                {domainName, role5, true},
                {"trust", role6, true},
                {"test_domain", role6, false},
                {"test_domain", role7, true}
        };
    }

    @Test(dataProvider = "delegatedRoles")
    public void testValidateRoleStructure(String domainName, Role role, boolean expectedFailure) {

        final String trustDomainName = "trust";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(trustDomainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        try {
            zmsTestInitializer.getZms().validateRoleStructure(role, domainName, "unittest");
            if (expectedFailure) {
                fail();
            }
        } catch (ResourceException e) {
            if (expectedFailure) {
                assertEquals(e.getCode(), 400);
            } else {
                fail("should not have failed with ResourceException");
            }
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), trustDomainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testRecordMetricsUnauthenticated() {
        ZMSImpl.metric = Mockito.mock(Metric.class);
        RsrcCtxWrapper ctx = (RsrcCtxWrapper) zmsTestInitializer.getZms().newResourceContext(null, zmsTestInitializer.getMockServletRequest(), zmsTestInitializer.getMockServletResponse(), "someApiMethod");
        String testDomain = "testDomain";
        int httpStatus = 200;
        ctx.setRequestDomain(testDomain);
        zmsTestInitializer.getZms().recordMetrics(ctx, httpStatus);
        verify(ZMSImpl.metric,
                times(1)).increment (
                eq("zms_api"),
                eq(testDomain),
                eq(null),
                eq("GET"),
                eq(httpStatus),
                eq("someapimethod"));
        verify(ZMSImpl.metric,
                times(1)).stopTiming (
                eq(ctx.getTimerMetric()),
                eq(testDomain),
                eq(null),
                eq("GET"),
                eq(httpStatus),
                eq("someapimethod_timing"));
        verify(ZMSImpl.metric,
                times(1)).startTiming (
                eq("zms_api_latency"),
                eq(null),
                eq(null),
                eq("GET"),
                eq("someapimethod"));
    }

    @Test
    public void testRecordMetricsAuthenticated() {
        ZMSImpl.metric = Mockito.mock(Metric.class);
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        String testDomain = "testDomain";
        int httpStatus = 200;
        when(ctx.getRequestDomain()).thenReturn(testDomain);
        zmsTestInitializer.getZms().recordMetrics(ctx, httpStatus);
        verify(ZMSImpl.metric,
                times(1)).increment (
                eq("zms_api"),
                eq(testDomain),
                eq("user"),
                eq("GET"),
                eq(httpStatus),
                eq("someApiMethod"));
        verify(ZMSImpl.metric,
                times(1)).stopTiming (
                eq(ctx.getTimerMetric()),
                eq(testDomain),
                eq("user"),
                eq("GET"), eq(httpStatus), eq("someApiMethod_timing"));
    }

    @Test
    public void testRecordMetricsNoCtx() {
        int httpStatus = 200;
        ZMSImpl.metric = Mockito.mock(Metric.class);
        zmsTestInitializer.getZms().recordMetrics(null, httpStatus);
        verify(ZMSImpl.metric,
                times(1)).increment (
                eq("zms_api"),
                eq(null),
                eq(null),
                eq(null),
                eq(httpStatus),
                eq(null));
        verify(ZMSImpl.metric,
                times(1)).stopTiming (
                eq(null),
                eq(null),
                eq(null),
                eq(null),
                eq(httpStatus),
                eq(null));
    }

    @Test
    public void testGetGroupWithAttributes() {

        final String domainName = "put-domain-group1";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", "user.joe", "user.jane");
        group1.setSelfServe(true);
        group1.setMemberExpiryDays(30);
        group1.setServiceExpiryDays(35);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);

        Group group1a = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", false, false);
        assertNotNull(group1a);

        assertEquals(group1a.getName(), domainName + ":group.group1");
        List<GroupMember> members = group1a.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkGroupMember(checkList, members);
        assertTrue(group1a.getSelfServe());
        assertEquals(group1a.getMemberExpiryDays(), Integer.valueOf(30));
        assertEquals(group1a.getServiceExpiryDays(), Integer.valueOf(35));
        // get unknown group

        try {
            zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "uknown-group", false, false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateGroup() {

        final String domainName = "create-group";
        final String groupName = "group1";

        TestAuditLogger alogger = new TestAuditLogger();
        List<String> aLogMsgs = alogger.getLogMsgList();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName()).thenReturn("posttopleveldomain").thenReturn("putgroup");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsImpl.putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Group group1a = zmsImpl.getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, true, false);
        assertNotNull(group1a);
        assertNotNull(group1a.getAuditLog());
        assertEquals(group1a.getAuditLog().size(), 2);
        assertEquals(group1a.getName(), domainName + ":group." + groupName);
        assertNull(group1a.getAuditEnabled());
        assertNull(group1a.getReviewEnabled());

        // check audit log msg for putRole
        boolean foundError = false;
        System.err.println("testCreateGroup: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putgroup)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"name\": \"" + groupName + "\", \"added-members\": [");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // delete member of the role
        //
        List<GroupMember> listrm = group1.getGroupMembers();
        for (GroupMember rmemb: listrm) {
            if (rmemb.getMemberName().equals("user.jane")) {
                listrm.remove(rmemb);
                break;
            }
        }

        aLogMsgs.clear();
        zmsImpl.putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        foundError = false;
        System.err.println("testCreateGroup: Now Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putgroup)")) {
                continue;
            }
            assertTrue(msg.contains("CLIENT-IP=(" + ZMSTestInitializer.MOCKCLIENTADDR + ")"), msg);
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("\"name\": \"" + groupName + "\", \"deleted-members\": [{\"member\": \"user.jane\", \"approved\": true, \"system-disabled\": 0}], \"added-members\": []");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateGroupDBFailure() {

        final String domainName = "create-group-db-failure";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // put the db in read-only mode

        zmsTestInitializer.setDatabaseReadOnlyMode(true);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", "user.joe", "user.jane");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.GONE);
        }

        // remove read-only mode

        zmsTestInitializer.setDatabaseReadOnlyMode(false);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateGroupInvalidMembers() {

        final String domainName = "create-group-invalid-member-failure";
        final String groupName = "dev-team";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // add group members with another group as member

        Group group2 = zmsTestInitializer.createGroupObject(domainName, "group2", "user.joe", domainName  + ":group.dev-team");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group2", zmsTestInitializer.getAuditRef(), false, group2);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // add group with invalid service names

        group2 = zmsTestInitializer.createGroupObject(domainName, "group2", "user.joe", domainName  + ".api");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group2", zmsTestInitializer.getAuditRef(), false, group2);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // now create the service and retry the operation again

        ServiceIdentity service = zmsTestInitializer.createServiceObject(domainName, "api", "http://localhost", "/usr/bin/java",
                "root", "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "api", zmsTestInitializer.getAuditRef(), false, service);

        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group2", zmsTestInitializer.getAuditRef(), false, group2);

        // now try to add a wildcard which should be rejected

        Group group3 = zmsTestInitializer.createGroupObject(domainName, "group3", "user.joe", "*");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group3", zmsTestInitializer.getAuditRef(), false, group3);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // wildcard with service name

        group3 = zmsTestInitializer.createGroupObject(domainName, "group3", "user.joe", domainName + ".api*");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group3", zmsTestInitializer.getAuditRef(), false, group3);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateDuplicateMemberGroup() {

        final String domainName = "dup-member-group";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Group group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        assertEquals(group.getName(), domainName + ":group.group1".toLowerCase());
        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals("user.joe", members.get(0).getMemberName());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupUpdate() {

        final String domainName = "update-group";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Group group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        assertEquals(group.getName(), domainName + ":group.group1".toLowerCase());
        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.john");
        zmsTestInitializer.checkGroupMember(checkList, members);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupExceptions() {

        final String domainName = "put-group-exc";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // inconsistent group name

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "different-group", zmsTestInitializer.getAuditRef(), false, group1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // unknown domain

        try {
            group1 = zmsTestInitializer.createGroupObject("unknown-domain", groupName, "user.joe", "user.jane");
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), "unknown-domain", groupName, zmsTestInitializer.getAuditRef(), false, group1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // review enabled with members

        group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        group1.setReviewEnabled(true);
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedUserMemberGroup() {

        final  String domainName = "norm-user-member-group";
        final String groupName = "group1";
        final String groupName2 = "group2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ArrayList<GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user.joe"));
        groupMembers.add(new GroupMember().setMemberName("user.joe"));
        groupMembers.add(new GroupMember().setMemberName("user.joe"));
        groupMembers.add(new GroupMember().setMemberName("user.jane"));

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, groupMembers);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Group group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        assertEquals(group.getName(), domainName + ":group.group1".toLowerCase());
        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkGroupMember(checkList, members);

        // create a group with no members

        Group group2 = zmsTestInitializer.createGroupObject(domainName, groupName2, null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, false, false);
        assertNotNull(group);
        assertTrue(group.getGroupMembers().isEmpty());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedServiceMemberGroup() {

        final String domainName = "norm-svc-member-group";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("coretech", "storage",
                "http://localhost", "/usr/bin/java", "root", "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef(), false, service);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        SubDomain subDom3 = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), subDom3);

        SubDomain subDom4 = zmsTestInitializer.createSubDomainObject("dom1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), subDom4);

        service = zmsTestInitializer.createServiceObject("user.user1.dom1", "api",
                "http://localhost", "/usr/bin/java", "root", "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.dom1", "api", zmsTestInitializer.getAuditRef(), false, service);

        ArrayList<GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("coretech.storage"));
        groupMembers.add(new GroupMember().setMemberName("coretech.storage"));
        groupMembers.add(new GroupMember().setMemberName("user.user1.dom1.api"));

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, groupMembers);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Group group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        assertEquals(group.getName(), domainName + ":group.Group1".toLowerCase());
        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("coretech.storage");
        checkList.add("user.user1.dom1.api");
        zmsTestInitializer.checkGroupMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "dom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUpdateGroup() {

        final String domainName = "update-group";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ArrayList<GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user.user1"));
        groupMembers.add(new GroupMember().setMemberName("user.user2"));
        groupMembers.add(new GroupMember().setMemberName("user.user3"));

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, groupMembers);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // now let's update our group with new members

        groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user.user3"));
        groupMembers.add(new GroupMember().setMemberName("user.user4"));
        groupMembers.add(new GroupMember().setMemberName("user.user5"));

        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // now let's get the group and verify our update

        Group group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        assertEquals(group.getName(), domainName + ":group.Group1".toLowerCase());
        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 3);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.user3");
        checkList.add("user.user4");
        checkList.add("user.user5");
        zmsTestInitializer.checkGroupMember(checkList, members);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUpdateReviewEnabledRole() {

        final String domainName = "update-review-group";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, null);
        group1.setReviewEnabled(true);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // now let's update our group with new members

        group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.user1", "user.user2");
        try {
            zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("reviewEnabled groups"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateNormalizedCombinedMemberGroup() {

        final String domainName = "norm-combined-member-group";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("coretech", "storage",
                "http://localhost", "/usr/bin/java", "root", "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef(), false, service);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        SubDomain subDom3 = zmsTestInitializer.createSubDomainObject("user1", "user",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", zmsTestInitializer.getAuditRef(), subDom3);

        SubDomain subDom4 = zmsTestInitializer.createSubDomainObject("dom1", "user.user1",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", zmsTestInitializer.getAuditRef(), subDom4);

        service = zmsTestInitializer.createServiceObject("user.user1.dom1", "api",
                "http://localhost", "/usr/bin/java", "root", "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1.dom1", "api", zmsTestInitializer.getAuditRef(), false, service);

        ArrayList<GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user.joe"));
        groupMembers.add(new GroupMember().setMemberName("user.joe"));
        groupMembers.add(new GroupMember().setMemberName("user.joe"));
        groupMembers.add(new GroupMember().setMemberName("user.jane"));
        groupMembers.add(new GroupMember().setMemberName("coretech.storage"));
        groupMembers.add(new GroupMember().setMemberName("coretech.storage"));
        groupMembers.add(new GroupMember().setMemberName("user.user1.dom1.api"));

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, groupMembers);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Group group = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        assertEquals(group.getName(), domainName + ":group.group1".toLowerCase());
        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 4);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("coretech.storage");
        checkList.add("user.user1.dom1.api");
        zmsTestInitializer.checkGroupMember(checkList, members);

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", "dom1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user", "user1", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteGroup() {

        final String domainName1 = "delete-group1";
        final String domainName2 = "delete-group2";
        final String groupName1 = "group1";
        final String groupName2 = "group2";
        final String roleName1 = "role1";
        final String roleName2 = "role2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        Group group1 = zmsTestInitializer.createGroupObject(domainName1, groupName1, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject(domainName1, groupName2, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        // add group2 as a member to roles in 2 different domains

        Role role1 = zmsTestInitializer.createRoleObject(domainName1, roleName1, null, "user.john",
                ResourceUtils.groupResourceName(domainName1, groupName2));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName1, zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName2, roleName2, null, "user.john",
                ResourceUtils.groupResourceName(domainName1, groupName2));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, roleName2, zmsTestInitializer.getAuditRef(), false, role2);

        Groups groupList = zmsTestInitializer.getZms().getGroups(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, false, null, null);
        assertNotNull(groupList);

        assertEquals(groupList.getList().size(), 2);

        // now delete group 1 which should be good since it's not part
        // of any roles

        zmsTestInitializer.getZms().deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName1, zmsTestInitializer.getAuditRef());

        groupList = zmsTestInitializer.getZms().getGroups(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, false, null, null);

        assertNotNull(groupList);

        assertEquals(groupList.getList().size(), 1);
        assertEquals(groupList.getList().get(0).getName(), domainName1 + ":group.group2");

        // now delete group2 which should be rejected since it's
        // included in 2 roles

        try {
            zmsTestInitializer.getZms().deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName2, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains(ResourceUtils.roleResourceName(domainName1, roleName1)));
            assertTrue(ex.getMessage().contains(ResourceUtils.roleResourceName(domainName2, roleName2)));
        }

        // delete one of the roles

        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName1, zmsTestInitializer.getAuditRef());

        // we should still fail since it's still included in one other role

        try {
            zmsTestInitializer.getZms().deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName2, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertFalse(ex.getMessage().contains(ResourceUtils.roleResourceName(domainName1, roleName1)));
            assertTrue(ex.getMessage().contains(ResourceUtils.roleResourceName(domainName2, roleName2)));
        }

        // delete the second role and now we should be able to delete the group

        zmsTestInitializer.getZms().deleteRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, roleName2, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName2, zmsTestInitializer.getAuditRef());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetGroups() {

        final String domainName = "get-groups";
        final String groupName1 = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName1, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Groups groupList = zmsTestInitializer.getZms().getGroups(zmsTestInitializer.getMockDomRsrcCtx(), domainName, true, null, null);

        assertNotNull(groupList);

        assertEquals(groupList.getList().size(), 1);

        Group group = groupList.list.get(0);
        assertEquals(group.getName(), domainName + ":group.group1");
        assertEquals(group.getGroupMembers().size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkGroupMember(checkList, group.getGroupMembers());

        // get groups on unknown domain

        try {
            zmsTestInitializer.getZms().getGroups(zmsTestInitializer.getMockDomRsrcCtx(), "unknown-domain", true, null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteGroupMissingAuditRef() {

        final String domainName = "delete-group-missing-ref";
        final String groupName = "group1";

        TopLevelDomain dom = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom);

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        try {
            zmsTestInitializer.getZms().deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, null);
            fail("requesterror not thrown by deleteGroup.");
        } catch (ResourceException ex) {
            assertEquals(400, ex.getCode());
            assertTrue(ex.getMessage().contains("Audit reference required"));
        } finally {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        }
    }

    @Test
    public void testDeleteGroupThrowException() {

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        final String domainName = "DomainName1";
        final String groupName = "GroupName1";
        try {
            zmsImpl.deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(),domainName, groupName, zmsTestInitializer.getAuditRef());
            fail("notfounderror not thrown.");
        } catch (ResourceException e) {
            assertEquals(e.getCode(), 404);
        }
    }

    @Test
    public void testConvertToLowerGroupMember() {

        AthenzObject.GROUP_MEMBER.convertToLowerCase(null);

        List<GroupMember> list = new ArrayList<>();
        list.add(new GroupMember().setGroupName("GroupA").setMemberName("MemberA").setDomainName("Domain"));
        AthenzObject.GROUP_MEMBER.convertToLowerCase(list);

        GroupMember member = list.get(0);
        assertEquals(member.getMemberName(), "membera");
        assertEquals(member.getGroupName(), "groupa");
        assertEquals(member.getDomainName(), "domain");

        list = new ArrayList<>();
        list.add(new GroupMember().setGroupName("GroupA").setDomainName("Domain"));
        AthenzObject.GROUP_MEMBER.convertToLowerCase(list);

        member = list.get(0);
        assertNull(member.getMemberName());
        assertEquals(member.getGroupName(), "groupa");
        assertEquals(member.getDomainName(), "domain");
    }

    @Test
    public void testConvertToLowerGroupMembership() {

        GroupMembership member = new GroupMembership().setGroupName("GroupA").setMemberName("MemberA");
        AthenzObject.GROUP_MEMBERSHIP.convertToLowerCase(member);

        assertEquals(member.getMemberName(), "membera");
        assertEquals(member.getGroupName(), "groupa");

        member = new GroupMembership().setMemberName("MemberA");
        AthenzObject.GROUP_MEMBERSHIP.convertToLowerCase(member);

        assertEquals(member.getMemberName(), "membera");
        assertNull(member.getGroupName());
    }

    @Test
    public void testConvertToLowerGroupMeta() {

        GroupMeta meta = new GroupMeta().setNotifyRoles("rolesA,rolesB");
        AthenzObject.GROUP_META.convertToLowerCase(meta);

        assertEquals(meta.getNotifyRoles(), "rolesa,rolesb");

        meta = new GroupMeta();
        AthenzObject.GROUP_META.convertToLowerCase(meta);

        assertNull(meta.getNotifyRoles());
    }

    @Test
    public void testIsConsistentGroupName() {

        Group group = new Group();

        group.setName("domain1:group.group1");
        assertTrue(zmsTestInitializer.getZms().isConsistentGroupName("domain1", "group1", group));

        // local name behavior

        group.setName("group1");
        assertTrue(zmsTestInitializer.getZms().isConsistentGroupName("domain1", "group1", group));
        assertEquals(group.getName(), "domain1:group.group1");

        // inconsistent behavior

        group.setName("domain1:group.group1");
        assertFalse(zmsTestInitializer.getZms().isConsistentGroupName("domain1", "group2", group));

        group.setName("role1");
        assertFalse(zmsTestInitializer.getZms().isConsistentGroupName("domain1", "group2", group));
    }

    @Test
    public void testNormalizeGroupMembersNull() {
        Group group = new Group();
        zmsTestInitializer.getZms().normalizeGroupMembers(group);
        assertTrue(group.getGroupMembers().isEmpty());
    }

    @Test
    public void testValidateGroupMemberPrincipals() {

        // invalid users are always rejected

        List<GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user").setPrincipalType(Principal.Type.SERVICE.getValue()));
        groupMembers.add(new GroupMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        groupMembers.add(new GroupMember().setMemberName("user.jane").setPrincipalType(Principal.Type.USER.getValue()));
        groupMembers.add(new GroupMember().setMemberName("coretech.api").setPrincipalType(Principal.Type.SERVICE.getValue()));
        groupMembers.add(new GroupMember().setMemberName("coretech.backend").setPrincipalType(Principal.Type.SERVICE.getValue()));

        Group group = new Group().setGroupMembers(groupMembers);
        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipals(group, null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // set our user authority

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = new TestUserPrincipalAuthority();

        // include all valid principals

        groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user.joe").setPrincipalType(Principal.Type.USER.getValue()));
        groupMembers.add(new GroupMember().setMemberName("user.jane").setPrincipalType(Principal.Type.USER.getValue()));
        groupMembers.add(new GroupMember().setMemberName("sys.auth.zms").setPrincipalType(Principal.Type.SERVICE.getValue()));
        group.setGroupMembers(groupMembers);

        zmsTestInitializer.getZms().validateGroupMemberPrincipals(group, null, "unittest");

        // add one more invalid user

        groupMembers.add(new GroupMember().setMemberName("user.john").setPrincipalType(Principal.Type.USER.getValue()));
        try {
            zmsTestInitializer.getZms().validateGroupMemberPrincipals(group, null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testUpdateGroupMemberUserAuthorityExpiry() {

        Group group = new Group().setUserAuthorityExpiration("elevated-clearance");

        List<GroupMember> members = new ArrayList<>();
        members.add(new GroupMember().setMemberName("user.john"));
        members.add(new GroupMember().setMemberName("user.joe"));
        group.setGroupMembers(members);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = null;

        // with authority null we always get no changes

        zmsTestInitializer.getZms().updateGroupMemberUserAuthorityExpiry(group, "unit-test");
        assertNull(group.getGroupMembers().get(0).getExpiration());
        assertNull(group.getGroupMembers().get(1).getExpiration());

        Authority authority = Mockito.mock(Authority.class);
        when(authority.getDateAttribute("user.john", "elevated-clearance"))
                .thenReturn(new Date());
        when(authority.getDateAttribute("user.jane", "elevated-clearance"))
                .thenReturn(new Date());
        when(authority.getDateAttribute("user.joe", "elevated-clearance"))
                .thenReturn(null);
        zmsTestInitializer.getZms().userAuthority = authority;

        // with one valid and one invalid we should get an exception

        try {
            zmsTestInitializer.getZms().updateGroupMemberUserAuthorityExpiry(group, "unit-test");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid member: user.joe"));
        }

        // let's have one valid user and one service

        members = new ArrayList<>();
        members.add(new GroupMember().setMemberName("user.john"));
        members.add(new GroupMember().setMemberName("sports.api"));
        group.setGroupMembers(members);

        // the user will have an expiration while service is skipped

        zmsTestInitializer.getZms().updateGroupMemberUserAuthorityExpiry(group, "unit-test");
        assertNotNull(group.getGroupMembers().get(0).getExpiration());
        assertNull(group.getGroupMembers().get(1).getExpiration());

        // now let's have only user members

        members = new ArrayList<>();
        members.add(new GroupMember().setMemberName("user.john"));
        members.add(new GroupMember().setMemberName("user.jane"));
        group.setGroupMembers(members);

        zmsTestInitializer.getZms().updateGroupMemberUserAuthorityExpiry(group, "unit-test");
        assertNotNull(group.getGroupMembers().get(0).getExpiration());
        assertNotNull(group.getGroupMembers().get(1).getExpiration());

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testGetGroupMembership() {

        final String domainName = "get-group-mbr";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // inconsistent group name

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMembership mbr = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", null);
        assertNotNull(mbr);
        assertTrue(mbr.getIsMember());
        assertTrue(mbr.getApproved());
        assertEquals(mbr.getGroupName(), domainName + ":group." + groupName);
        assertEquals(mbr.getMemberName(), "user.joe");

        mbr = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.jane", null);
        assertNotNull(mbr);
        assertTrue(mbr.getIsMember());
        assertTrue(mbr.getApproved());
        assertEquals(mbr.getGroupName(), domainName + ":group." + groupName);
        assertEquals(mbr.getMemberName(), "user.jane");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(),domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembership() {

        final String domainName = "put-group-mbr";
        final String groupName = "group1";

        when(zmsTestInitializer.getMockDomRsrcCtx().getApiName())
                .thenReturn("putserviceidentity")
                .thenReturn("posttopleveldomain").thenReturn("posttopleveldomain") // called twice in domain api
                .thenReturn("posttopleveldomain").thenReturn("posttopleveldomain") // called twice in domain api
                .thenReturn("putserviceidentity").thenReturn("putserviceidentity").thenReturn("putserviceidentity")
                .thenReturn("putserviceidentity").thenReturn("putserviceidentity")
                .thenReturn("postsubdomain").thenReturn("postsubdomain") // called twice in domain api
                .thenReturn("putgroup").thenReturn("putgroup").thenReturn("putgroup").thenReturn("putgroup") // called 4 times in group api
                .thenReturn("putgroupmembership");

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject("coretech", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        ServiceIdentity service = zmsTestInitializer.createServiceObject("coretech", "storage",
                "http://localhost", "/usr/bin/java", "root", "users", "host1");
        zmsTestInitializer.getZms().putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef(), false, service);

        SubDomain subDom2 = zmsTestInitializer.createSubDomainObject("storage", "coretech", "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef(), subDom2);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsImpl.putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.doe");
        zmsImpl.putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        // check audit log msg for putGroup
        boolean foundError = false;
        List<String> aLogMsgs = alogger.getLogMsgList();
        System.err.println("testPutGroupMembership: Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putgroupmembership)")) {
                continue;
            }
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("{\"member\": \"user.doe\", \"approved\": true, \"system-disabled\": 0}");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        aLogMsgs.clear();
        mbr = zmsTestInitializer.generateGroupMembership(groupName, "coretech.storage");
        zmsImpl.putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "coretech.storage", zmsTestInitializer.getAuditRef(), false, mbr);

        Group group = zmsImpl.getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertNotNull(group);

        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 4);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("user.doe");
        checkList.add("coretech.storage");
        zmsTestInitializer.checkGroupMember(checkList, members);

        foundError = false;
        System.err.println("testGroupPutMembership: now Number of lines: " + aLogMsgs.size());
        for (String msg: aLogMsgs) {
            if (!msg.contains("WHAT-api=(putgroupmembership)")) {
                continue;
            }
            int index = msg.indexOf("WHAT-details=(");
            assertTrue(index != -1, msg);
            int index2 = msg.indexOf("{\"member\": \"coretech.storage\", \"approved\": true, \"system-disabled\": 0}");
            assertTrue(index2 > index, msg);
            foundError = true;
            break;
        }
        assertTrue(foundError);

        // enable user validation for the test

        zmsImpl.userAuthority = new TestUserPrincipalAuthority();
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true);
        zmsImpl.validateUserRoleMembers = dynamicConfigBoolean;

        // valid users no exception

        mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.joe");
        zmsImpl.putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef(), false, mbr);

        // invalid user with exception

        mbr = zmsTestInitializer.generateGroupMembership("group1", "user.john");
        try {
            zmsImpl.putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.john", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", "storage", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), "coretech", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipWithElevatedClearance() {

        final String domainName = "put-group-mbr-expiry";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Date joeDate = new Date();
        Date janeDate = new Date();
        Date bobDate = new Date();

        Set<String> attrSet = new HashSet<>();
        attrSet.add("ElevatedClearance");

        Authority mockAuthority = Mockito.mock(Authority.class);

        when(mockAuthority.isValidUser(anyString())).thenReturn(true);
        when(mockAuthority.getDateAttribute("user.joe", "ElevatedClearance")).thenReturn(joeDate);
        when(mockAuthority.getDateAttribute("user.jane", "ElevatedClearance")).thenReturn(janeDate);
        when(mockAuthority.getDateAttribute("user.bob", "ElevatedClearance")).thenReturn(bobDate);
        when(mockAuthority.getDateAttribute("user.dave", "ElevatedClearance")).thenReturn(null);
        when(mockAuthority.dateAttributesSupported()).thenReturn(attrSet);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;
        zmsTestInitializer.getZms().userAuthority = mockAuthority;

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        group1.setUserAuthorityExpiration("ElevatedClearance");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMembership mbr = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", null);
        assertNotNull(mbr);
        assertEquals(mbr.getExpiration().millis(), joeDate.getTime());

        mbr = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.jane", null);
        assertNotNull(mbr);
        assertEquals(mbr.getExpiration().millis(), janeDate.getTime());

        mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.bob");
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);
        mbr = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", null);
        assertNotNull(mbr);
        assertEquals(mbr.getExpiration().millis(), bobDate.getTime());

        mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.dave");
        try {
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.dave", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("does not have required user authority expiry configured"));
        }

        mbr = zmsTestInitializer.generateGroupMembership(groupName, "sys.auth.zms");
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "sys.auth.zms", zmsTestInitializer.getAuditRef(), false, mbr);
        mbr = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "sys.auth.zms", null);
        assertNotNull(mbr);

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipForbidden() {

        final String domainName = "put-group-mbr-403";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.doe");
        // this should be rejected since user.user1 is not domain admin
        try {
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipInvalidMembers() {

        final String domainName = "put-group-mbr-400";
        final String groupName1 = "group1";
        final String groupName2 = "group2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName1, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject(domainName, groupName2, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName2, ResourceUtils.groupResourceName(domainName, "group2"));
        // this should be rejected since groups are not allowed
        try {
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2,
                    ResourceUtils.groupResourceName(domainName, "group2"), zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // services with wildcard are not allowed either

        mbr = zmsTestInitializer.generateGroupMembership(groupName2, domainName + ".*");
        try {
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, domainName + ".*", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipSelfServe() {

        final String domainName = "put-group-mbr-self-serve";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        group1.setSelfServe(true);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.doe");

        // since we have admin mismatch it should be added as pending
        // since self-serve flag is on

        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        GroupMembership mbr1 = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", null);
        assertNotNull(mbr1);
        assertFalse(mbr1.getApproved());

        // now we're going to delete our pending group membership
        // this should be allowed since the user itself is the requestor

        zmsTestInitializer.getZms().deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", null);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteGroupMembershipForbidden() {

        final String domainName = "del-group-mbr-403";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        group1.setSelfServe(true);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.doe");

        // since we have admin mismatch it should be added as pending
        // since self-serve flag is on

        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        // first deleting an invalid domain should return 404

        try {
            zmsTestInitializer.getZms().deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), "unknown-domain", groupName, "user.doe", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // now we're going to add with a different user as admin
        // which should be rejected

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        try {
            zmsTestInitializer.getZms().deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", null);
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipExceptions() {

        final String domainName = "put-group-mbr-ex";
        final String groupName = "group1";
        final String groupName2 = "group2";

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsImpl.putGroup(ctx, domainName, groupName, auditRef, false, group1);

        // member mismatch

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.doe");
        try {
            zmsImpl.putGroupMembership(ctx, domainName, groupName, "user.joe", auditRef, false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // groupname mismatch

        try {
            zmsImpl.putGroupMembership(ctx, domainName, "invalid-group", "user.doe", auditRef, false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // invalid group

        mbr = zmsTestInitializer.generateGroupMembership("invalid-group", "user.doe");
        try {
            zmsImpl.putGroupMembership(ctx, domainName, "invalid-group", "user.doe", auditRef, false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testPutGroupMembershipDecisionAuditEnabledGroupByDomain() {

        final String domainName = "group-dec-by-domain";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        Group resgroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, true);
        assertEquals(resgroup.getGroupMembers().size(), 3);
        for (GroupMember rmem : resgroup.getGroupMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }

        setupPrincipalAuditedRoleApprovalByDomain(zmsTestInitializer.getZms(), "user.fury", domainName);

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        //revert back to admin principal
        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        // used with the zmsTestInitializer.getMockDomRestRsrcCtx()
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        resgroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertEquals(resgroup.getGroupMembers().size(), 3);
        for (GroupMember rmem : resgroup.getGroupMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertTrue(rmem.getApproved());
            }
        }

        cleanupPrincipalAuditedRoleApprovalByDomain(zmsTestInitializer.getZms(), domainName);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipDecisionAuditEnabledGroupInvalidUser() {

        final String domainName = "group-mbr-dec-invalid";
        final String groupName = "testgroup1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval Test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.joe");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testOrg");

        Authority auditAdminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String auditAdminUnsignedCreds = "v=U1;d=user;n=fury";

        final Principal rsrcAuditAdminPrince = SimplePrincipal.create("user", "fury",
                auditAdminUnsignedCreds + ";s=signature", 0, auditAdminPrincipalAuthority);
        assertNotNull(rsrcAuditAdminPrince);
        ((SimplePrincipal) rsrcAuditAdminPrince).setUnsignedCreds(auditAdminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAuditAdminPrince);

        // enable user authority check - joe and jane are the only
        // valid users in the system

        zmsTestInitializer.getZms().userAuthority = new TestUserPrincipalAuthority();
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true);
        zmsTestInitializer.getZms().validateUserRoleMembers = dynamicConfigBoolean;

        // first let's approve user.joe which should be ok since user joe
        // is a valid user based on our test authority

        mbr = new GroupMembership();
        mbr.setMemberName("user.joe");
        mbr.setActive(true);
        mbr.setApproved(true);
        zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef(), mbr);

        // now let's approve our bob user which is going to be rejected
        // since bob is not a valid user based on our test authority

        mbr.setMemberName("user.bob");

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        }catch (ResourceException ex) {
            assertEquals(ex.code, 400);
        }

        // now let's just reject user bob which should work
        // ok because we no longer validate users when we
        // are rejecting thus deleting group members

        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipDecisionReviewEnabledUnauthorized() {

        final String domainName = "group-review-enabled-domain-forbidden";
        final String groupName = "review-group";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval test Domain1",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, null, null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMeta rm = new GroupMeta().setReviewEnabled(true);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);

        // add a user to the group

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // verify the user is added with pending state

        Group resgroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, true);
        assertEquals(resgroup.getGroupMembers().size(), 1);
        assertEquals(resgroup.getGroupMembers().get(0).getMemberName(), "user.bob");
        assertFalse(resgroup.getGroupMembers().get(0).getApproved());

        // now try as the second admin himself to approve this user and it must
        // be rejected since second admin is not authorized

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        // switch to user.user2 principal to add a member to a group

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=user2";
        final Principal rsrcPrince = SimplePrincipal.create("user", "user2",
                unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcPrince);

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("not authorized to approve / reject members"));
        }

        // revert back to admin principal

        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipDecisionErrors() {

        final String domainName = "put-group-dec-errors";
        final String groupName = "testgroup1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,"Approval Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName,"user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.chris", zmsTestInitializer.getAuditRef(), mbr);//invalid member
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 400);
            assertTrue(r.getMessage().contains("putGroupMembershipDecision: Member name in URI and GroupMembership object do not match"));
        }

        mbr.setGroupName("invalidgroup");
        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);//invalid group
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 400);
            assertTrue(r.getMessage().contains("putGroupMembershipDecision: Group name in URI and GroupMembership object do not match"));
        }

        mbr.setGroupName(null);
        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), "testdomain2", groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);//invalid domain name
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 400);
            assertTrue(r.getMessage().contains("Invalid groupname"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupSystemMetaErrors() {

        final String domainName1 = "put-group-sys-meta-errors1";
        final String domainName2 = "put-group-sys-meta-errors2";
        final String groupName = "testgroup1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Approval Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testOrg",true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName1, groupName,"user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);

        // invalid field name

        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        try {
            zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName, "unknown-field", zmsTestInitializer.getAuditRef(), rsm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("unknown group system meta attribute"));
        }

        // invalid domain name

        try {
            zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), "invalid-domain", groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // domain without audit enabled flag

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Approval Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        try {
            zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("auditEnabled flag not set for domain"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteGroupMembership() {

        final String domainName = "del-group-mbr";
        final String groupName = "group1";

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1",
                "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(ctx, zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsImpl.putGroup(ctx, domainName, groupName, auditRef, false, group1);
        zmsImpl.deleteGroupMembership(ctx, domainName, groupName, "user.joe", auditRef);

        Group group = zmsImpl.getGroup(ctx, domainName, groupName, false, false);
        assertNotNull(group);

        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);

        boolean found = false;
        for (GroupMember member: members) {
            if (member.getMemberName().equalsIgnoreCase("user.joe")) {
                fail("delete user.joe failed");
            }
            if (member.getMemberName().equalsIgnoreCase("user.jane")) {
                found = true;
            }
        }
        if (!found) {
            fail("user.jane not found");
        }

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testDeleteGroupMembershipInvalidGroup() {

        String domainName = "del-mbr-invalid-group";
        String groupName = "group1";

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        // Tests the deleteGroupMembership() condition: if (group == null)...

        try {
            Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName,
                    "user.joe", "user.jane");
            zmsImpl.putGroup(ctx, domainName, groupName, auditRef, false, group1);

            // Should fail b/c trying to find a non-existent group.

            final String wrongGroupName = "group2";
            zmsImpl.deleteGroupMembership(ctx, domainName, wrongGroupName, "user.joe", auditRef);
            fail("notfounderror not thrown.");

        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testDeleteGroupMembershipSelf() {

        ZMSImpl zmsImpl = zmsTestInitializer.getZms();
        RsrcCtxWrapper ctx = zmsTestInitializer.getMockDomRsrcCtx();
        final String auditRef = zmsTestInitializer.getAuditRef();

        final String domainName = "del-group-mbr-self";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsImpl.postTopLevelDomain(ctx, auditRef, dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsImpl.putGroup(ctx, domainName, groupName, auditRef, false, group1);

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal principal1 = principalAuthority.authenticate("v=U1;d=user;n=joe;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx1 = zmsTestInitializer.createResourceContext(principal1);

        // now let's try to delete ourselves which should work

        zmsImpl.deleteGroupMembership(rsrcCtx1, domainName, groupName, "user.joe", auditRef);

        // now try to delete the other user which should be rejected

        try {
            zmsImpl.deleteGroupMembership(rsrcCtx1, domainName, groupName, "user.jane", auditRef);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.FORBIDDEN);
        }

        // now verify the results

        Group group = zmsImpl.getGroup(ctx, domainName, groupName, false, false);
        assertNotNull(group);

        List<GroupMember> members = group.getGroupMembers();
        assertNotNull(members);
        assertEquals(members.size(), 1);
        assertEquals(members.get(0).getMemberName(), "user.jane");

        zmsImpl.deleteTopLevelDomain(ctx, domainName, auditRef);
    }

    @Test
    public void testIsAllowedDeletePendingGroupMembership() {

        final String domainName = "allowed-del-pending-mbr";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Group Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.user1", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "testrole1", null, "user.user1", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "testrole1", zmsTestInitializer.getAuditRef(), false, role1);

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "Policy1", "testrole1",
                "UPDATE", domainName + ":group.*", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "Policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        assertTrue(zmsTestInitializer.getZms().isAllowedDeletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx().principal(), domainName,
                groupName, "user.pending"));

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=jane";
        Principal rsrcPrince = SimplePrincipal.create("user", "jane", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        assertTrue(zmsTestInitializer.getZms().isAllowedDeletePendingGroupMembership(rsrcPrince, domainName, groupName, "user.pending"));

        unsignedCreds = "v=U1;d=user;n=john";
        rsrcPrince = SimplePrincipal.create("user", "john", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);

        // this time false since john is not authorized

        assertFalse(zmsTestInitializer.getZms().isAllowedDeletePendingGroupMembership(rsrcPrince, domainName,
                groupName, "user.pending"));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGPendingDomainGroupMembersListInvalidPrincipal() {

        try {
            zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.unknwon", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }
    }

    @Test
    public void testDeletePendingGroupMembershipAdminRequest() {

        final String domainName = "delete-pending-admin";
        final String groupName = "testgroup1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "delete pending membership",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), domainName, "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "org", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // first request using admin principal

        DomainGroupMembership domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=jane";
        Principal rsrcPrince = SimplePrincipal.create("user", "jane", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        ResourceContext ctx = zmsTestInitializer.createResourceContext(rsrcPrince);

        // first try to delete the pending request without proper authorization

        try {
            zmsTestInitializer.getZms().deletePendingGroupMembership(ctx, domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        // repeat the request using context principal

        zmsTestInitializer.getZms().deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef());

        // check the list to see there are no pending requests

        domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);
        assertNotNull(domainGroupMembership);
        assertTrue(domainGroupMembership.getDomainGroupMembersList().isEmpty());

        // delete some unknown member in the same group as admin

        try {
            zmsTestInitializer.getZms().deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob2", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // delete some member in an unknown domain

        try {
            zmsTestInitializer.getZms().deletePendingGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), "unkwown-domain", groupName, "user.bob2", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeletePendingGroupMembershipSelfServeRequest() {

        final String domainName = "delete-pending-self-serve";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "delete pending membership",
                "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, false, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupMeta rm = new GroupMeta().setSelfServe(true);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);

        // user.joe is going to add user.bob in the self serve group

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=joe";
        Principal rsrcPrince = SimplePrincipal.create("user", "joe", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        ResourceContext ctxJoe = zmsTestInitializer.createResourceContext(rsrcPrince);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(ctxJoe, domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // first request using admin principal

        DomainGroupMembership domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", null);

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        // first try to delete the pending request without proper authorization

        unsignedCreds = "v=U1;d=user;n=jane";
        rsrcPrince = SimplePrincipal.create("user", "jane", unsignedCreds + ";s=signature",0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        ResourceContext ctxJane = zmsTestInitializer.createResourceContext(rsrcPrince);

        try {
            zmsTestInitializer.getZms().deletePendingGroupMembership(ctxJane, domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        // repeat the request using joe principal

        zmsTestInitializer.getZms().deletePendingGroupMembership(ctxJoe, domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef());

        // check the list to see there are no pending requests

        domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.user1", null);
        assertNotNull(domainGroupMembership);
        assertTrue(domainGroupMembership.getDomainGroupMembersList().isEmpty());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPendingDomainGroupMembersListByPrincipal() {

        final String domainName = "pend-dom-grp-mbr-list";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), domainName, "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "org", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
        GroupMeta rm = new GroupMeta().setSelfServe(true);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 403);
        }

        // first request using specific principal

        DomainGroupMembership domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), "user.fury", null);

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        // repeat the request using context principal

        Principal mockPrincipal = Mockito.mock(Principal.class);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(mockPrincipal);
        when(mockPrincipal.getDomain()).thenReturn("user");
        when(mockPrincipal.getFullName()).thenReturn("user.fury");
        domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, null);

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPendingDomainGroupMembersListByDomain() {

        final String domainName = "pend-dom-grp-mbr-list";
        final String groupName = "group2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        setupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "user.fury", "testorg");

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for approval test", "testorg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.setupPrincipalSystemMetaDelete(zmsTestInitializer.getZms(), zmsTestInitializer.getMockDomRsrcCtx().principal().getFullName(), domainName, "org");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "org", zmsTestInitializer.getAuditRef(), meta);

        Group auditedGroup = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, auditedGroup);
        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
        GroupMeta rm = new GroupMeta().setSelfServe(true);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException r) {
            assertEquals(r.code, 403);
        }

        // first request using specific principal

        DomainGroupMembership domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, domainName);

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        // repeat the request using context principal

        Principal mockPrincipal = Mockito.mock(Principal.class);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(mockPrincipal);
        when(mockPrincipal.getDomain()).thenReturn("user");
        when(mockPrincipal.getFullName()).thenReturn("user.fury");
        domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, null);

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        domainGroupMembership = zmsTestInitializer.getZms().getPendingDomainGroupMembersList(zmsTestInitializer.getMockDomRsrcCtx(), null, "*");

        assertNotNull(domainGroupMembership);
        assertNotNull(domainGroupMembership.getDomainGroupMembersList());
        assertEquals(domainGroupMembership.getDomainGroupMembersList().size(), 1);
        for (DomainGroupMembers drm : domainGroupMembership.getDomainGroupMembersList()) {
            assertEquals(drm.getDomainName(), domainName);
            assertNotNull(drm.getMembers());
            for (DomainGroupMember mem : drm.getMembers()) {
                assertNotNull(mem);
                assertEquals(mem.getMemberName(), "user.bob");
                for (GroupMember mr : mem.getMemberGroups()) {
                    assertNotNull(mr);
                    assertEquals(mr.getGroupName(), groupName);
                }
            }
        }

        zmsTestInitializer.cleanupPrincipalSystemMetaDelete(zmsTestInitializer.getZms());
        cleanupPrincipalAuditedRoleApprovalByOrg(zmsTestInitializer.getZms(), "testOrg");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupReview() {

        final String domainName = "group-review-dom";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        Group inputGroup = new Group().setName(groupName);
        List<GroupMember> inputMembers = new ArrayList<>();
        inputGroup.setGroupMembers(inputMembers);
        inputMembers.add(new GroupMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new GroupMember().setMemberName("user.jane").setActive(true));
        zmsTestInitializer.getZms().putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, inputGroup);

        Group resGroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertEquals(resGroup.getGroupMembers().size(), 1);
        assertEquals(resGroup.getGroupMembers().get(0).getMemberName(), "user.jane");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupReviewNoChanges() {

        final String domainName = "group-review-no-changes";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, "group1", "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, group1);

        Timestamp tenDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(10, TimeUnit.DAYS));
        Timestamp twentyDaysExpiry = Timestamp.fromMillis(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(20, TimeUnit.DAYS));

        GroupMembership mbr = zmsTestInitializer.generateGroupMembership("group1", "user.doe", tenDaysExpiry);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);

        mbr = zmsTestInitializer.generateGroupMembership("group1", "sys.auth.zms", tenDaysExpiry);
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", "sys.auth.zms", zmsTestInitializer.getAuditRef(), false, mbr);

        Group inputGroup = new Group().setName("group1");
        List<GroupMember> inputMembers = new ArrayList<>();
        inputGroup.setGroupMembers(inputMembers);
        inputMembers.add(new GroupMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new GroupMember().setMemberName("user.doe").setActive(true)
                .setExpiration(twentyDaysExpiry));
        inputMembers.add(new GroupMember().setMemberName("user.jane").setActive(true)
                .setExpiration(tenDaysExpiry));
        inputMembers.add(new GroupMember().setMemberName("sys.auth.zms").setActive(true)
                .setExpiration(twentyDaysExpiry));

        zmsTestInitializer.getZms().putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", zmsTestInitializer.getAuditRef(), false, inputGroup);

        Group resGroup1 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "group1", false, false);

        // john should be deleted and all others should stay as before - no changes

        int userChecked = 0;
        for (GroupMember groupMember : resGroup1.getGroupMembers()) {
            switch (groupMember.getMemberName()) {
                case "user.jane":
                    assertTrue(groupMember.getApproved());
                    assertNull(groupMember.getExpiration());
                    userChecked += 1;
                    break;
                case "user.doe":
                case "sys.auth.zms":
                    assertTrue(groupMember.getApproved());
                    assertEquals(groupMember.getExpiration(), tenDaysExpiry);
                    userChecked += 1;
                    break;
                case "user.john":
                    fail();
                    break;
            }
        }
        assertEquals(userChecked, 3);
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupReviewError() {

        final String domainName = "group-review-dom-err";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Role review Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        Group inputGroup = new Group().setName(groupName);
        List<GroupMember> inputMembers = new ArrayList<>();
        inputGroup.setGroupMembers(inputMembers);
        inputMembers.add(new GroupMember().setMemberName("user.john").setActive(false));
        inputMembers.add(new GroupMember().setMemberName("user.joe").setActive(true));
        zmsTestInitializer.getZms().putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, inputGroup);

        // This operation will be no-op as the changes were already implemented.
        zmsTestInitializer.getZms().putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, inputGroup);

        inputGroup.setName("group2");
        try {
            zmsTestInitializer.getZms().putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, inputGroup);
            fail();
        } catch (ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }

        inputGroup.setName(groupName);
        try {
            zmsTestInitializer.getZms().putGroupReview(zmsTestInitializer.getMockDomRsrcCtx(), "invalid-domain", groupName, zmsTestInitializer.getAuditRef(), false, inputGroup);
            fail();
        } catch (ResourceException re) {
            assertEquals(re.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetPrincipalGroups() {

        final String domainName1 = "principal-groups-dom1";
        final String groupName1 = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName1, groupName1, "user.john", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        final String domainName2 = "principal-groups-dom2";
        final String groupName2 = "group2";

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        Group group2 = zmsTestInitializer.createGroupObject(domainName2, groupName2, "user.john", "user.user1");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        DomainGroupMember dgm = zmsTestInitializer.getZms().getPrincipalGroups(zmsTestInitializer.getMockDomRsrcCtx(), "user.john", domainName1);
        assertNotNull(dgm);
        List<GroupMember> memberGroups = dgm.getMemberGroups();
        assertEquals(memberGroups.size(), 1);
        assertEquals(memberGroups.get(0).getGroupName(), groupName1);
        assertEquals(memberGroups.get(0).getDomainName(), domainName1);

        dgm = zmsTestInitializer.getZms().getPrincipalGroups(zmsTestInitializer.getMockDomRsrcCtx(), "user.john", null);
        assertNotNull(dgm);
        memberGroups = dgm.getMemberGroups();
        assertEquals(memberGroups.size(), 2);

        dgm = zmsTestInitializer.getZms().getPrincipalGroups(zmsTestInitializer.getMockDomRsrcCtx(), null, domainName1);
        assertNotNull(dgm);
        assertTrue(dgm.getMemberGroups().isEmpty());

        dgm = zmsTestInitializer.getZms().getPrincipalGroups(zmsTestInitializer.getMockDomRsrcCtx(), null, domainName2);
        assertNotNull(dgm);
        memberGroups = dgm.getMemberGroups();
        assertEquals(memberGroups.size(), 1);
        assertEquals(memberGroups.get(0).getGroupName(), groupName2);
        assertEquals(memberGroups.get(0).getDomainName(), domainName2);
    }

    @Test
    public void testVerifyAuthorizedServiceGroupPrefixOperation() {

        // our test resource json includes the following
        // group-prefix use case
        //        "coretech.updater": {
        //            "allowedOperations": [
        //               {
        //                 "name":"putgroupmembership",
        //                  "items": {
        //                      "group-prefix" : [
        //                          "reader.org.",
        //                          "writer.domain."
        //                      ]
        //                  }
        //              }
        //            ]

        zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation(null, "putgroupmembership", "group1");

        // Try passing along operationItem key + value to see if verification works

        zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.updater", "putgroupmembership", "reader.org.group1");
        zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.updater", "putgroupmembership", "writer.domain.group1");

        // try with restricted operation. Currently, putmembership only allow single operation item.
        zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.newsvc", "putgroupmembership", "platforms_deployer");
        zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.newsvc", "putgroupmembership", "platforms_different_deployer");

        // Third, try with restriction operation, with not-specified operation item.

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.updater", "putgroupmembership", "platforms_deployer_new");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.updater", "putgroupmembership", "reader.org1.group1");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }

        try {
            zmsTestInitializer.getZms().verifyAuthorizedServiceGroupOperation("coretech.newsvc", "putgroupmembership", "platforms_deployer_new");
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 403);
        }
    }

    @Test
    public void testPutGroupMembershipDecisionSelfserveGroupApprove() {

        final String domainName = "self-service-group-approve";
        final String groupName = "group1";

        addMemberToSelfServeGroupWithUserIdentity(domainName, groupName);

        Group resGroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, true);
        assertEquals(resGroup.getGroupMembers().size(), 3);
        for (GroupMember rmem : resGroup.getGroupMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }
        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);
        zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        resGroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertEquals(resGroup.getGroupMembers().size(), 3);
        for (GroupMember rmem : resGroup.getGroupMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertTrue(rmem.getApproved());
            }
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipDecisionSelfserveRoleReject() {

        final String domainName = "self-service-group-reject";
        final String groupName = "group1";

        addMemberToSelfServeGroupWithUserIdentity(domainName, groupName);

        Group resGroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, true);
        assertEquals(resGroup.getGroupMembers().size(), 3);
        for (GroupMember rmem : resGroup.getGroupMembers()) {
            if ("user.bob".equals(rmem.getMemberName())) {
                assertFalse(rmem.getApproved());
            }
        }
        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);
        zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        resGroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, false);
        assertEquals(resGroup.getGroupMembers().size(), 2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipDecisionReviewEnabledGroupApprove() {

        final String domainName = "review-enabled-domain";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Approval test Domain1",
                "testOrg", "user.user1");
        dom1.getAdminUsers().add("user.user2");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        final String groupName = "review-group";
        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, null, null);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupMeta rm = new GroupMeta().setReviewEnabled(true);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);

        // switch to user.user2 principal to add a member to a group

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String unsignedCreds = "v=U1;d=user;n=user2";
        final Principal rsrcPrince = SimplePrincipal.create("user", "user2",
                unsignedCreds + ";s=signature", 0, principalAuthority);
        assertNotNull(rsrcPrince);
        ((SimplePrincipal) rsrcPrince).setUnsignedCreds(unsignedCreds);
        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcPrince);

        GroupMembership mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), false, mbr);

        // verify the user is added with pending state

        Group resgroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, true);
        assertEquals(resgroup.getGroupMembers().size(), 1);
        assertEquals(resgroup.getGroupMembers().get(0).getMemberName(), "user.bob");
        assertFalse(resgroup.getGroupMembers().get(0).getApproved());

        // now try as the admin himself to approve this user and it must
        // be rejected since it has to be done by some other admin

        mbr = new GroupMembership();
        mbr.setMemberName("user.bob");
        mbr.setActive(true);
        mbr.setApproved(true);

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("cannot approve his/her own request"));
        }

        // revert back to admin principal

        Authority adminPrincipalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        String adminUnsignedCreds = "v=U1;d=user;n=user1";
        final Principal rsrcAdminPrince = SimplePrincipal.create("user", "user1",
                adminUnsignedCreds + ";s=signature", 0, adminPrincipalAuthority);
        assertNotNull(rsrcAdminPrince);
        ((SimplePrincipal) rsrcAdminPrince).setUnsignedCreds(adminUnsignedCreds);

        when(zmsTestInitializer.getMockDomRestRsrcCtx().principal()).thenReturn(rsrcAdminPrince);
        when(zmsTestInitializer.getMockDomRsrcCtx().principal()).thenReturn(rsrcAdminPrince);

        // approve the message which should be successful

        zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);

        // verify the user is now active

        resgroup = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, false, true);
        assertEquals(resgroup.getGroupMembers().size(), 1);
        assertEquals(resgroup.getGroupMembers().get(0).getMemberName(), "user.bob");
        assertTrue(resgroup.getGroupMembers().get(0).getApproved());

        // trying to approve the same user should return 404

        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.bob", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        // now try to approve another use which should also return 404

        mbr.setMemberName("user.joe");
        try {
            zmsTestInitializer.getZms().putGroupMembershipDecision(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef(), mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMeta() {

        final String domainName = "put-group-meta";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Group Meta Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.getDateAttribute("user.john", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.john", "OnShore-US")).thenReturn(true);
        when(authority.getDateAttribute("user.jane", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.jane", "OnShore-US")).thenReturn(true);
        Set<String> attrs = new HashSet<>();
        attrs.add("OnShore-US");
        attrs.add("elevated-clearance");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        GroupMeta groupMeta = new GroupMeta();
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        Group resGroup1 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, true, false);
        assertNotNull(resGroup1);
        assertNull(resGroup1.getSelfServe());
        assertNull(resGroup1.getReviewEnabled());
        assertNull(resGroup1.getNotifyRoles());
        assertNull(resGroup1.getUserAuthorityExpiration());
        assertNull(resGroup1.getUserAuthorityFilter());

        groupMeta = new GroupMeta()
                .setSelfServe(true)
                .setNotifyRoles("role1")
                .setReviewEnabled(false)
                .setUserAuthorityExpiration("elevated-clearance")
                .setUserAuthorityFilter("OnShore-US")
                .setMemberExpiryDays(45)
                .setServiceExpiryDays(45);
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        resGroup1 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, true, false);
        assertNotNull(resGroup1);
        assertTrue(resGroup1.getSelfServe());
        assertNull(resGroup1.getReviewEnabled());
        assertEquals(resGroup1.getNotifyRoles(), "role1");
        assertEquals(resGroup1.getUserAuthorityExpiration(), "elevated-clearance");
        assertEquals(resGroup1.getUserAuthorityFilter(), "OnShore-US");
        assertEquals(resGroup1.getMemberExpiryDays(), Integer.valueOf(45));
        assertEquals(resGroup1.getServiceExpiryDays(), Integer.valueOf(45));

        groupMeta = new GroupMeta().setNotifyRoles("role2,role3");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        resGroup1 = zmsTestInitializer.getZms().getGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, true, false);
        assertNotNull(resGroup1);
        assertNull(resGroup1.getSelfServe()); // default value is false is not specified
        assertNull(resGroup1.getReviewEnabled());
        assertEquals(resGroup1.getNotifyRoles(), "role2,role3");
        assertEquals(resGroup1.getUserAuthorityExpiration(), "elevated-clearance");
        assertEquals(resGroup1.getUserAuthorityFilter(), "OnShore-US");

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMetaMissingAuditRef() {

        final String domainName = "put-group-meta-missing-auditref";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Group Meta Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = zmsTestInitializer.createDomainMetaObject("Domain Meta for Group Meta test", "NewOrg",
                true, true, "12345", 1001);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        GroupSystemMeta rsm = createGroupSystemMetaObject(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        GroupMeta rm = new GroupMeta().setSelfServe(true);
        try {
            zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, null, rm);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Audit reference required"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMetaThrowException() {

        final String domainName = "put-group-meta-exc";
        final String groupName = "group1";

        TestAuditLogger alogger = new TestAuditLogger();
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);
        GroupMeta rm = new GroupMeta();
        rm.setSelfServe(false);

        try {
            zmsImpl.putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), rm);
            fail("notfounderror not thrown.");
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }
    }

    @Test
    public void testPutGroupMetaUserAuthorityFilterSet() {

        final String domainName = "put-group-meta-on-shore";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Group Meta Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.isAttributeSet("user.john", "OnShore-US")).thenReturn(true);
        when(authority.isAttributeSet("user.jane", "OnShore-US")).thenReturn(false);
        when(authority.isAttributeSet("user.joe", "OnShore-US")).thenReturn(true);
        when(authority.isAttributeSet("user.doe", "OnShore-US")).thenReturn(false);
        Set<String> attrs = new HashSet<>();
        attrs.add("OnShore-US");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        GroupMeta groupMeta = new GroupMeta().setUserAuthorityFilter("OnShore-US");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        // john should be active but jane should be disabled

        GroupMembership groupMembership = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.john", null);
        assertNotNull(groupMembership);
        assertTrue(groupMembership.getIsMember());
        assertNull(groupMembership.getSystemDisabled());

        groupMembership = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.jane", null);
        assertNotNull(groupMembership);
        assertTrue(groupMembership.getIsMember());
        assertEquals(groupMembership.getSystemDisabled().intValue(), 1);

        // we should be able to add joe but not doe

        groupMembership = new GroupMembership().setGroupName(groupName).setMemberName("user.joe");
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef(), false, groupMembership);

        groupMembership = new GroupMembership().setGroupName(groupName).setMemberName("user.doe");
        try {
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, groupMembership);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // now let's remove our flag

        groupMeta = new GroupMeta().setUserAuthorityFilter("");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        // jane should be back to 0 for system disabled flag

        groupMembership = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.jane", null);
        assertNotNull(groupMembership);
        assertTrue(groupMembership.getIsMember());
        assertNull(groupMembership.getSystemDisabled());

        // and we're able to add doe now

        groupMembership = new GroupMembership().setGroupName(groupName).setMemberName("user.doe");
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, groupMembership);

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMetaUserAuthorityFilterExpirySet() {

        final String domainName = "put-group-meta-elevated-clearance";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Group Meta Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Timestamp timestmp = Timestamp.fromMillis(System.currentTimeMillis() + 100000);
        Date date = timestmp.toDate();
        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.getDateAttribute("user.john", "elevated-clearance")).thenReturn(date);
        when(authority.getDateAttribute("user.jane", "elevated-clearance")).thenReturn(null);
        when(authority.getDateAttribute("user.joe", "elevated-clearance")).thenReturn(date);
        when(authority.getDateAttribute("user.doe", "elevated-clearance")).thenReturn(null);
        Set<String> attrs = new HashSet<>();
        attrs.add("elevated-clearance");
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        GroupMeta groupMeta = new GroupMeta().setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        // john should be active but jane should be expired

        GroupMembership groupMembership = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.john", null);
        assertNotNull(groupMembership);
        assertTrue(groupMembership.getIsMember());
        assertEquals(groupMembership.getExpiration(), timestmp);

        groupMembership = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.jane", null);
        assertNotNull(groupMembership);
        assertFalse(groupMembership.getIsMember());
        assertTrue(groupMembership.getExpiration().millis() <= System.currentTimeMillis());

        // we should be able to add joe but not doe

        groupMembership = new GroupMembership().setGroupName(groupName).setMemberName("user.joe");
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef(), false, groupMembership);

        groupMembership = new GroupMembership().setGroupName(groupName).setMemberName("user.doe");
        try {
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, groupMembership);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // now let's remove our flag

        groupMeta = new GroupMeta().setUserAuthorityExpiration("");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), groupMeta);

        // jane should be still be inactive since we don't remove
        // expiration flags from users

        groupMembership = zmsTestInitializer.getZms().getGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.jane", null);
        assertNotNull(groupMembership);
        assertFalse(groupMembership.getIsMember());
        assertTrue(groupMembership.getExpiration().millis() <= System.currentTimeMillis());

        // and we're able to add doe now

        groupMembership = new GroupMembership().setGroupName(groupName).setMemberName("user.doe");
        zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, groupMembership);

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutGroupMembershipDBFailure() {

        final String domainName = "create-group-mbr-db-failure";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // put the db in read-only mode

        zmsTestInitializer.setDatabaseReadOnlyMode(true);

        // add a new member

        try {
            GroupMembership mbr = zmsTestInitializer.generateGroupMembership(groupName, "user.doe");
            zmsTestInitializer.getZms().putGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex)  {
            assertEquals(ex.getCode(), ResourceException.GONE);
        }

        // delete an existing member

        try {
            zmsTestInitializer.getZms().deleteGroupMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "user.joe", zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex)  {
            assertEquals(ex.getCode(), ResourceException.GONE);
        }

        // remove read-only mode

        zmsTestInitializer.setDatabaseReadOnlyMode(false);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteGroupDBFailure() {

        final String domainName = "del-group-db-failure";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // put the db in read-only mode

        zmsTestInitializer.setDatabaseReadOnlyMode(true);

        // add a new member

        try {
            zmsTestInitializer.getZms().deleteGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex)  {
            assertEquals(ex.getCode(), ResourceException.GONE);
        }

        // remove read-only mode

        zmsTestInitializer.setDatabaseReadOnlyMode(false);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUpdateRoleWithGroupMembers() {

        final String domainName = "update-role";
        final String roleName = "role1";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        ArrayList<GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(new GroupMember().setMemberName("user.user1"));
        groupMembers.add(new GroupMember().setMemberName("user.user2"));
        groupMembers.add(new GroupMember().setMemberName("user.user3"));

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName, groupMembers);
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group1);

        // now let's create a role with user members only

        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.user1", "user.user2");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        // now let's update our role with group member - first with invalid

        role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.user1", ResourceUtils.groupResourceName(domainName, "dev-team"));
        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // now let's update our role with correct group member

        role1 = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.user1", ResourceUtils.groupResourceName(domainName, groupName));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role1);

        // now let's get our role object

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);
        List<String> checkList = new ArrayList<>();
        checkList.add("user.user1");
        checkList.add(ResourceUtils.groupResourceName(domainName, groupName));
        zmsTestInitializer.checkRoleMember(checkList, members);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidateGroupMemberAuthorityAttributesFailures() {

        final String domainName = "group-member-attr";
        final String roleName = "role1";
        final String groupName = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // invalid group that doesn't exist

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john",
                ResourceUtils.groupResourceName(domainName, groupName));

        try {
            zmsTestInitializer.getZms().validateGroupMemberAuthorityAttributes(role, "OnShore-US", "elevated-clearance", "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Invalid group member"));
        }

        // now let's add the group to make it valid

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        try {
            zmsTestInitializer.getZms().validateGroupMemberAuthorityAttributes(role, "OnShore-US", "elevated-clearance", "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("does not have same user authority filter"));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testValidateGroupPrincipalFailures() {

        final String domainName = "val-group-principal";
        final String groupName = "group1";

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.getDateAttribute("user.john", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.john", "OnShore-US")).thenReturn(true);
        when(authority.getDateAttribute("user.jane", "elevated-clearance")).thenReturn(new Date());
        when(authority.isAttributeSet("user.jane", "OnShore-US")).thenReturn(true);
        Set<String> attrs = new HashSet<>();
        attrs.add("OnShore-US");
        attrs.add("elevated-clearance");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        // both null is good

        zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), null, null, null, "unittest");

        // with user authority we have failure

        try {
            zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), "OnShore-US",
                    null, null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("does not have same user authority filter"));
        }

        GroupMeta gm = new GroupMeta().setUserAuthorityFilter("OnShore-US");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);

        // now without user expiry we have success

        zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), "OnShore-US",
                null, null, "unittest");

        // with expiry it's failure

        try {
            zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), "OnShore-US",
                    "elevated-clearance", null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("does not have same user authority expiration"));
        }

        // now we set the expiry on group as well

        gm = new GroupMeta().setUserAuthorityFilter("OnShore-US").setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);

        // now we have success

        zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), "OnShore-US",
                "elevated-clearance", null, "unittest");

        // with different values we have failures again

        try {
            zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), "OnShore-UK",
                    null, null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("does not have same user authority filter"));
        }

        try {
            zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), "OnShore-US",
                    "elevated-l2-clearance", null, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("does not have same user authority expiration"));
        }

        // if we ask for the audit enabled flag we should get failure

        try {
            zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), null, null, true, "unittest");
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("must be audit enabled"));
        }

        // if we pass false then we're good

        zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), null, null, false, "unittest");

        // now let's set the group as audit enabled and try again

        GroupSystemMeta gsm = new GroupSystemMeta().setAuditEnabled(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), gsm);

        zmsTestInitializer.getZms().validateGroupPrincipal(ResourceUtils.groupResourceName(domainName, groupName), null, null, true, "unittest");

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutRoleSystemMetaWithGroups() {

        final String domainName = "role-system-audit-enabled";
        final String roleName1 = "role1";
        final String groupName1 = "group1";
        final String groupName2 = "group2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Role System Meta Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = new DomainMeta().setAuditEnabled(true);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName1, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject(domainName, groupName2, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName1, null, "user.john",
                ResourceUtils.groupResourceName(domainName, groupName1));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, zmsTestInitializer.getAuditRef(), false, role1);

        // if we try to put the audit enabled flag on the role
        // it should be rejected since the group doesn't have audit flag

        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        try {
            zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("must have audit flag enabled"));
        }

        // now let's set the audit enabled flag on the group

        GroupSystemMeta gsm = new GroupSystemMeta().setAuditEnabled(true);
        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName1, "auditenabled", zmsTestInitializer.getAuditRef(), gsm);

        // now let's try our set system role meta operation

        zmsTestInitializer.getZms().putRoleSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);

        // now we're going to add group2 as a member which should be rejected
        // since it's not audit enabled

        Membership mbr = new Membership().setMemberName(ResourceUtils.groupResourceName(domainName, groupName2));
        try {
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1,
                    ResourceUtils.groupResourceName(domainName, groupName2), zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("must be audit enabled"));
        }

        // now let's add the audit flag on the group and our put membership should work

        zmsTestInitializer.getZms().putGroupSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, "auditenabled", zmsTestInitializer.getAuditRef(), gsm);
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1,
                ResourceUtils.groupResourceName(domainName, groupName2), zmsTestInitializer.getAuditRef(), false, mbr);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGroupUserAuthorityFilterRemoveRejection() {

        final String domainName = "reject-group-filter-remove";
        final String groupName = "group1";
        final String roleName = "role1";

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.isAttributeSet("user.john", "OnShore-US")).thenReturn(true);
        Set<String> attrs = new HashSet<>();
        attrs.add("OnShore-US");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");

        dom1.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        GroupMeta gm = new GroupMeta().setUserAuthorityFilter("OnShore-US");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", ResourceUtils.groupResourceName(domainName, groupName));
        role.setUserAuthorityFilter("OnShore-US");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);

        // now we're going to try to remove the user authority filter
        // from the group and it should be rejected since the role
        // has the filter set on the group

        gm = new GroupMeta().setUserAuthorityFilter("");
        try {
            zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("role filter requirements"));
        }

        // now let's remove the filter from the role

        RoleMeta rm = new RoleMeta().setUserAuthorityFilter("");
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // now our group meta should work

        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGroupUserAuthorityExpiryRemoveRejection2() {

        final String domainName = "reject-group-expiry-remove";
        final String groupName = "group1";
        final String roleName = "role1";

        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);
        when(authority.isValidUser(anyString())).thenReturn(true);
        when(authority.getDateAttribute("user.john", "elevated-clearance")).thenReturn(new Date());
        when(authority.getDateAttribute("user.jane", "elevated-clearance")).thenReturn(new Date());
        Set<String> attrs = new HashSet<>();
        attrs.add("elevated-clearance");
        when(authority.booleanAttributesSupported()).thenReturn(attrs);
        when(authority.dateAttributesSupported()).thenReturn(attrs);
        zmsTestInitializer.getZms().userAuthority = authority;
        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(authority);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");

        dom1.setAuditEnabled(true);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.john", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);

        GroupMeta gm = new GroupMeta().setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", ResourceUtils.groupResourceName(domainName, groupName));
        role.setUserAuthorityExpiration("elevated-clearance");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);

        // now we're going to try to remove the user authority expiration
        // from the group and it should be rejected since the role
        // has the expiration set on the group

        gm = new GroupMeta().setUserAuthorityExpiration("");
        try {
            zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("role expiration requirements"));
        }

        // now let's remove the expiration from the role

        RoleMeta rm = new RoleMeta().setUserAuthorityExpiration("");
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // now our group meta should work

        zmsTestInitializer.getZms().putGroupMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName, zmsTestInitializer.getAuditRef(), gm);

        zmsTestInitializer.getZms().dbService.zmsConfig.setUserAuthority(savedAuthority);
        zmsTestInitializer.getZms().userAuthority = savedAuthority;
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteDomainWithGroupConsistency() {

        final String domainName1 = "delete-group1";
        final String domainName2 = "delete-group2";
        final String domainName3 = "delete-group3";
        final String groupName1 = "group1";
        final String groupName2 = "group2";
        final String groupName3 = "group3";
        final String roleName1 = "role1";
        final String roleName2 = "role2";
        final String roleName3 = "role3";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);

        TopLevelDomain dom3 = zmsTestInitializer.createTopLevelDomainObject(domainName3, "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom3);

        Group group1 = zmsTestInitializer.createGroupObject(domainName1, groupName1, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Group group2 = zmsTestInitializer.createGroupObject(domainName1, groupName2, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        Group group3 = zmsTestInitializer.createGroupObject(domainName3, groupName3, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, groupName3, zmsTestInitializer.getAuditRef(), false, group3);

        // add group2 as a member to roles in 2 different domains

        Role role1 = zmsTestInitializer.createRoleObject(domainName1, roleName1, null, "user.john",
                ResourceUtils.groupResourceName(domainName1, groupName2));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, roleName1, zmsTestInitializer.getAuditRef(), false, role1);

        Role role2 = zmsTestInitializer.createRoleObject(domainName2, roleName2, null, "user.john",
                ResourceUtils.groupResourceName(domainName1, groupName2));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, roleName2, zmsTestInitializer.getAuditRef(), false, role2);

        Role role3 = zmsTestInitializer.createRoleObject(domainName3, roleName3, null, "user.john",
                ResourceUtils.groupResourceName(domainName3, groupName3));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, roleName3, zmsTestInitializer.getAuditRef(), false, role3);

        // we should be able to delete domain3 without any issues since
        // group3 is included in the same domain only

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName3, zmsTestInitializer.getAuditRef());

        // we should not able to delete domain1 since the group from domain1
        // is included in both domain1 and domain2. our error message should
        // only include reference from domain2

        try {
            zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
            fail();
        } catch (ResourceException ex) {
            assertFalse(ex.getMessage().contains(ResourceUtils.roleResourceName(domainName1, roleName1)));
            assertTrue(ex.getMessage().contains(ResourceUtils.roleResourceName(domainName2, roleName2)));
        }

        // after we delete domain2 we can delete domain1 successfully

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testZMSGroupMemberFetcher() {

        final String domainName1 = "group-fetcher";
        final String groupName1 = "group1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName1, groupName1, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        // first failure case

        assertNull(zmsTestInitializer.getZms().groupMemberFetcher.getGroupMembers("group-fetcher:group.group2"));

        // now valid case

        List<GroupMember> members = zmsTestInitializer.getZms().groupMemberFetcher.getGroupMembers("group-fetcher:group.group1");
        assertNotNull(members);
        assertEquals(members.size(), 2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetRoleWithGroupMembers() {

        final String domainName = "role-with-group";
        final String roleName1 = "role1";
        final String roleName2 = "role2";
        final String groupName1 = "dev-team";
        final String groupName2 = "pe-team";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role1 = zmsTestInitializer.createRoleObject(domainName, roleName1, null, "user.joe", "user.jane");
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, zmsTestInitializer.getAuditRef(), false, role1);

        Role role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, false, true, false);
        assertNotNull(role);

        List<RoleMember> members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 2);

        List<String> checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        zmsTestInitializer.checkRoleMember(checkList, members);

        // now let's create a group with 2 new members and it to the role

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName1, "user.joey", "user.moe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        Membership mbr = new Membership().setMemberName(ResourceUtils.groupResourceName(domainName, groupName1));
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1,
                ResourceUtils.groupResourceName(domainName, groupName1), zmsTestInitializer.getAuditRef(), false, mbr);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, false, true, false);
        assertNotNull(role);

        members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 4);

        checkList = new ArrayList<>();
        checkList.add("user.joe");
        checkList.add("user.jane");
        checkList.add("user.joey");
        checkList.add("user.moe");
        zmsTestInitializer.checkRoleMember(checkList, members);

        // now we're going to add another group with the same users from role and group1

        Group group2 = zmsTestInitializer.createGroupObject(domainName, groupName2, "user.joey", "user.joe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName2, zmsTestInitializer.getAuditRef(), false, group2);

        mbr = new Membership().setMemberName(ResourceUtils.groupResourceName(domainName, groupName2));
        zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1,
                ResourceUtils.groupResourceName(domainName, groupName2), zmsTestInitializer.getAuditRef(), false, mbr);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName1, false, true, false);
        assertNotNull(role);

        members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 6);

        // make sure joe and joey are listed twice

        int joeCount = 0;
        int joeyCount = 0;
        for (RoleMember roleMember : members) {
            switch (roleMember.getMemberName()) {
                case "user.joe":
                    joeCount += 1;
                    break;
                case "user.joey":
                    joeyCount += 1;
                    break;
            }
        }
        assertEquals(2, joeCount);
        assertEquals(2, joeyCount);

        // now let's create a role member where the group has an expiry

        Role role2 = zmsTestInitializer.createRoleObject(domainName, roleName2, null, "user.joe", "user.jane");
        role2.getRoleMembers().add(new RoleMember()
                .setMemberName(ResourceUtils.groupResourceName(domainName, groupName2))
                .setExpiration(Timestamp.fromCurrentTime()));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName2, zmsTestInitializer.getAuditRef(), false, role2);

        role = zmsTestInitializer.getZms().getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName2, false, true, false);
        assertNotNull(role);

        members = role.getRoleMembers();
        assertNotNull(members);
        assertEquals(members.size(), 4);

        // make sure joe is listed twice once with expiry and one
        // without expiry

        joeCount = 0;
        int joeCountWithExpiry = 0;
        for (RoleMember roleMember : members) {
            if ("user.joe".equals(roleMember.getMemberName())) {
                if (roleMember.getExpiration() == null) {
                    joeCount += 1;
                } else {
                    joeCountWithExpiry += 1;
                }
            }
        }
        assertEquals(1, joeCount);
        assertEquals(1, joeCountWithExpiry);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testAdminRoleGroupRestriction() {

        final String domainName = "role-with-group";
        final String groupName1 = "dev-team";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Group group1 = zmsTestInitializer.createGroupObject(domainName, groupName1, "user.joey", "user.moe");
        zmsTestInitializer.getZms().putGroup(zmsTestInitializer.getMockDomRsrcCtx(), domainName, groupName1, zmsTestInitializer.getAuditRef(), false, group1);

        // we're not allowed to create top level domain with group members

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain2", "testOrg",
                "user.user1");
        dom2.getAdminUsers().add(ResourceUtils.groupResourceName(domainName, groupName1));

        try {
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // we should be not be allowed to update admin role

        Role role1 = zmsTestInitializer.createRoleObject(domainName, "admin", null, "user.joe",
                ResourceUtils.groupResourceName(domainName, groupName1));

        try {
            zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", zmsTestInitializer.getAuditRef(), false, role1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        // we should not be allowed to add groups to the admin role

        Membership mbr = new Membership().setMemberName(ResourceUtils.groupResourceName(domainName, groupName1));
        try {
            zmsTestInitializer.getZms().putMembership(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin",
                    ResourceUtils.groupResourceName(domainName, groupName1), zmsTestInitializer.getAuditRef(), false, mbr);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testAzureSubscriptionUniquenessCheck() {

        final String domainName1 = "azure-sub-unique1";
        final String domainName2 = "azure-sub-unique2";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain1", "testOrg", "user.user1");
        dom1.setAzureSubscription("azure1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // create another domai with the same subscription which should be rejected

        TopLevelDomain dom2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain1", "testOrg", "user.user1");
        dom2.setAzureSubscription("azure1");
        try {
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom2);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
            assertTrue(ex.getMessage().contains("Subscription Id: azure1 is already assigned to domain: " + domainName1));
        }

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testCreateTopLevelDomainNegativeProductId(){

        final String domainName = "negative-product-id";

        TestAuditLogger alogger = new TestAuditLogger();
        System.setProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT, "true");
        ZMSImpl zmsImpl = zmsTestInitializer.getZmsImpl(alogger);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", "user.user1");
        dom1.setYpmId(-11001);

        try {
            zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("Product Id must be a positive integer"));
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_PRODUCT_ID_SUPPORT);
    }

    @Test
    public void testCreateTopLevelDomainWithTemplate() {

        final String domainName = "domain-with-template";
        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysNetwork = zmsTestInitializer.createSubDomainObject("network", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysNetwork);

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1",
                "testOrg", "user.user1");
        DomainTemplateList templateList = new DomainTemplateList();
        List<String> templates = new ArrayList<>();
        templates.add("vipng");
        templateList.setTemplateNames(templates);
        dom1.setTemplates(templateList);

        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        Domain domain = zmsImpl.getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);

        Role role = zmsImpl.getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                "vip_admin", false, false, false);
        assertNotNull(role);

        Policy policy = zmsImpl.getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "vip_admin");
        assertNotNull(policy);

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "network", zmsTestInitializer.getAuditRef());
        zmsImpl.deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName,
                zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testQueryPutRoleWithTags() {
        final String domainName = "sys.auth";

        // put role with multiple tags
        final String roleWithTags = "roleWithTags";
        final String tagKey = "tag-key";
        List<String> tagValues = Arrays.asList("val1", "val2");
        Role role = zmsTestInitializer.createRoleObject(domainName, roleWithTags, null);
        role.setTags(Collections.singletonMap(tagKey, new TagValueList().setList(tagValues)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleWithTags, zmsTestInitializer.getAuditRef(), false, role);

        // put role with single tags
        final String roleSingleTag = "roleSingleTag";
        List<String> singleTagValue = Collections.singletonList("val1");
        role = zmsTestInitializer.createRoleObject(domainName, roleSingleTag, null);
        role.setTags(Collections.singletonMap(tagKey, new TagValueList().setList(singleTagValue)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleSingleTag, zmsTestInitializer.getAuditRef(), false, role);

        //put role without tags
        final String noTagsRole = "noTagsRole";
        role = zmsTestInitializer.createRoleObject(domainName, noTagsRole, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, noTagsRole, zmsTestInitializer.getAuditRef(), false, role);

        // get roles without tags query - both tags should be presented
        Roles roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, null, null);
        hasRoleWithTags(roleList, roleWithTags, tagKey, tagValues, 2);
        hasRoleWithTags(roleList, roleSingleTag, tagKey, singleTagValue, 1);
        hasRoleWithTags(roleList, noTagsRole, null, null, 0);

        // get roles with exact tag value
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, "val1");
        hasRoleWithTags(roleList, roleWithTags, tagKey, tagValues, 2);
        hasRoleWithTags(roleList, roleSingleTag, tagKey, singleTagValue, 1);
        // ensure there are no more roles
        assertEquals(roleList.getList().size(), 2);

        // get roles with exact tag value
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, "val2");
        hasRoleWithTags(roleList, roleWithTags, tagKey, tagValues, 2);
        // ensure there are no more roles
        assertEquals(roleList.getList().size(), 1);

        // get roles with only tag key
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, null);
        hasRoleWithTags(roleList, roleWithTags, tagKey, tagValues, 2);
        hasRoleWithTags(roleList, roleSingleTag, tagKey, singleTagValue, 1);
        // ensure there are no more roles
        assertEquals(roleList.getList().size(), 2);
    }

    @Test
    public void testRoleTagsLimit() {
        // define limit of 3 role tags
        System.setProperty(ZMSConsts.ZMS_PROP_QUOTA_ROLE_TAG, "3");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        final String domainName = "sys.auth";
        final String roleName = "roleWithTagLimit";
        final String tagKey = "tag-key";

        //insert role with 4 tags
        List<String> tagValues = Arrays.asList("val1", "val2", "val3", "val4");
        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null);
        role.setTags(Collections.singletonMap(tagKey, new TagValueList().setList(tagValues)));
        try {
            zmsTest.putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
            fail();
        } catch(ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("role tag quota exceeded - limit: 3, current tags count: 0, new tags count: 4"));
        }

        try {
            // role should not be created if fails to process tags..
            zmsTest.getRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, false, false, false);
            fail();
        } catch(ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_QUOTA_ROLE_TAG);
    }

    @Test
    public void testQueryUpdateRoleWithTags() {
        final String domainName = "sys.auth";
        final String tagKey = "tag-key-update";

        //put role without tags
        final String noTagsRole = "noTagsRole";
        Role role = zmsTestInitializer.createRoleObject(domainName, noTagsRole, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, noTagsRole, zmsTestInitializer.getAuditRef(), false, role);

        // assert there are no tags
        Roles roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, null, null);
        hasRoleWithTags(roleList, noTagsRole, null, null, 0);

        // update tag list
        List<String> tagValues = Arrays.asList("val1", "val2", "val3");
        role.setTags(Collections.singletonMap(tagKey, new TagValueList().setList(tagValues)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, noTagsRole, zmsTestInitializer.getAuditRef(), false, role);

        // 2 tags should be presented
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, null, null);
        hasRoleWithTags(roleList, noTagsRole, tagKey, tagValues, 3);

        // get roles with exact tag value
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.FALSE, tagKey, "val1");
        hasRoleWithTags(roleList, noTagsRole, tagKey, tagValues, 3);
        assertEquals(roleList.getList().size(), 1);

        // get roles with only tag key
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, null);
        hasRoleWithTags(roleList, noTagsRole, tagKey, tagValues, 3);
        assertEquals(roleList.getList().size(), 1);

        // now create a different tags Map, part is from tagValues
        Map<String, TagValueList> tagsMap = new HashMap<>();
        List<String> modifiedTagValues = Arrays.asList("val1", "new-val");
        String newTagKey = "newTagKey";
        List<String> newTagValues = Arrays.asList("val4", "val5", "val6");
        tagsMap.put(tagKey, new TagValueList().setList(modifiedTagValues));
        tagsMap.put(newTagKey, new TagValueList().setList(newTagValues));
        role.setTags(tagsMap);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, noTagsRole, zmsTestInitializer.getAuditRef(), false, role);

        // 1 tags should be presented
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, null, null);
        hasRoleWithTags(roleList, noTagsRole, tagKey, modifiedTagValues, 2);
        hasRoleWithTags(roleList, noTagsRole, newTagKey, newTagValues, 3);

        // get roles with exact tag value
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, "val1");
        hasRoleWithTags(roleList, noTagsRole, tagKey, modifiedTagValues, 2);
        assertEquals(roleList.getList().size(), 1);

        // get roles with non-existent tag value
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, "val2");
        assertEquals(roleList.getList().size(), 0);

        // get roles with new tag key
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, null);
        hasRoleWithTags(roleList, noTagsRole, newTagKey, newTagValues, 3);
        assertEquals(roleList.getList().size(), 1);
    }

    @Test
    public void testUpdateRoleMetaWithoutTags() {
        final String domainName = "update-role-meta-without-tags";
        final String updateRoleMetaTag = "tag-key-update-role-meta";
        final List<String> updateRoleMetaTagValues = Collections.singletonList("update-meta-value");

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // put role without tags
        final String roleName = "roleTagsUpdateMeta";
        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);

        // no tags should be presented
        Roles roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, updateRoleMetaTag, null);
        assertTrue(roleList.getList().isEmpty());

        RoleMeta rm = new RoleMeta()
                .setTags(Collections.singletonMap(updateRoleMetaTag,
                        new TagValueList().setList(updateRoleMetaTagValues)));

        // update role tags using role meta
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // assert that updateRoleMetaTag is in role tags
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, updateRoleMetaTag, null);
        hasRoleWithTags(roleList, roleName, updateRoleMetaTag, updateRoleMetaTagValues, 1);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUpdateRoleMetaWithExistingTag() {
        final String domainName = "update-role-meta-with-existing-tag";
        final String tagKey = "tag-key";
        final String updateRoleMetaTag = "tag-key-update-role-meta-exist-tag";
        final List<String> updateRoleMetaTagValues = Collections.singletonList("update-meta-value");

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", "user.user1");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // put role with tag
        final String roleName = "roleWithTagUpdateMeta";
        List<String> singleTagValue = Collections.singletonList("val1");
        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null);
        role.setTags(Collections.singletonMap(tagKey, new TagValueList().setList(singleTagValue)));
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);

        // tag tagKey should be presented
        Roles roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, tagKey, null);
        hasRoleWithTags(roleList, roleName, tagKey, singleTagValue, 1);

        RoleMeta rm = new RoleMeta()
                .setTags(Collections.singletonMap(updateRoleMetaTag,
                        new TagValueList().setList(updateRoleMetaTagValues)));

        // update role tags using role meta
        zmsTestInitializer.getZms().putRoleMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), rm);

        // role should contain only the new tag
        roleList = zmsTestInitializer.getZms().getRoles(zmsTestInitializer.getMockDomRsrcCtx(), domainName, Boolean.TRUE, updateRoleMetaTag, null);
        hasRoleWithTags(roleList, roleName, updateRoleMetaTag, updateRoleMetaTagValues, 1);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    private void hasRoleWithTags(Roles roleList, String roleName, String tagKey, List<String> tagValues, int tagValuesLength) {
        Role role = getRole(roleList, roleName);
        Assert.assertNotNull(role);
        if (tagKey != null) {
            if (tagValues != null) {
                Assert.assertEquals(role.getTags().get(tagKey).getList().size(), tagValuesLength);
                for (String tagValue : tagValues) {
                    Assert.assertTrue(hasTag(role, tagKey, tagValue));
                }
            } else {
                Assert.assertTrue(hasTag(role, tagKey, null));
            }
        }
    }

    private boolean hasTag(Role role, String tagKey, String tagValue) {
        TagValueList tagValues = role.getTags().get(tagKey);
        if (tagValue != null) {
            return tagValues.getList().contains(tagValue);
        }
        return !tagValues.getList().isEmpty();
    }

    private Role getRole(Roles roleList, String roleName) {
        return roleList.getList().stream()
                .filter(r -> AthenzUtils.extractRoleName(r.getName()).equalsIgnoreCase(roleName))
                .findFirst()
                .get();
    }

    @Test
    public void testDomainMetaWithTags() {
        final String domainName = "domain-with-tags";

        TopLevelDomain topLevelDomain = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain With Tags", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), topLevelDomain);

        DomainMeta domainMeta = zmsTestInitializer.createDomainMetaObject("Domain Meta for domain tags", "testOrg", true, true, "12345", 1001);
        domainMeta.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), domainMeta);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domain.getTags(), simpleDomainTag());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDomainTagsLimit() throws Exception {
        // define limit of 3 domain tags
        System.setProperty(ZMSConsts.ZMS_PROP_QUOTA_DOMAIN_TAG, "3");
        ZMSImpl zmsTest = zmsTestInitializer.zmsInit();

        final String domainName = "tld-with-tag-limit";

        TopLevelDomain topLevelDomain = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain With Tag Limit", "testOrg", zmsTestInitializer.getAdminUser());
        topLevelDomain.setTags(Collections.singletonMap("tag-key", new TagValueList().setList(Arrays.asList("val1", "val2", "val3", "val4"))));
        try {
            zmsTest.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), topLevelDomain);
            fail();
        } catch(ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.BAD_REQUEST);
            assertTrue(ex.getMessage().contains("domain tag quota exceeded - limit: 3, current tags count: 0, new tags count: 4"));
        }
        try {
            // domain should not be created if fails to process tags..
            zmsTest.getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
            fail();
        } catch(ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }

        System.clearProperty(ZMSConsts.ZMS_PROP_QUOTA_DOMAIN_TAG);
    }

    @Test
    public void testTopLevelSubDomainWithTags() {
        final String domainName = "tld-with-tags";

        TopLevelDomain topLevelDomain = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain With Tags", "testOrg", zmsTestInitializer.getAdminUser());
        topLevelDomain.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), topLevelDomain);

        String subDomName = "subdomain-with-tag";
        SubDomain subDom = zmsTestInitializer.createSubDomainObject(subDomName, domainName, "subdomain desc", "testOrg", zmsTestInitializer.getAdminUser());
        subDom.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), subDom);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domain.getTags(), simpleDomainTag());

        Domain subDomainObj = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName + "." + subDomName);
        assertEquals(subDomainObj.getTags(), simpleDomainTag());

        zmsTestInitializer.getZms().deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, subDomName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUserLevelDomainWithTags() {
        String domainName = "dguttman-tags";

        UserDomain userDomain = zmsTestInitializer.createUserDomainObject(domainName, "Test Domain1", "testOrg");
        userDomain.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().postUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), userDomain);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), "user." + domainName);
        assertEquals(domain.getTags(), simpleDomainTag());

        zmsTestInitializer.getZms().deleteUserDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetSignedDomainWithTags() throws JsonProcessingException, ParseException, JOSEException {

        final String domainName = "jws-domain-tags";

        // create multiple top level domains
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Response response = zmsTestInitializer.getZms().getJWSDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, null, null);
        JWSDomain jwsDomain = (JWSDomain) response.getEntity();
        DomainData domainData = getDomainData(jwsDomain);
        assertNotNull(domainData);
        assertEquals(domainData.getName(), domainName);

        Map<String, String> header = jwsDomain.getHeader();
        assertEquals(header.get("kid"), "0");

        assertEquals(domainData.getTags(), simpleDomainTag());

        Authority principalAuthority = new com.yahoo.athenz.common.server.debug.DebugPrincipalAuthority();
        Principal sysPrincipal = principalAuthority.authenticate("v=U1;d=sys;n=zts;s=signature",
                "10.11.12.13", "GET", null);
        ResourceContext rsrcCtx = zmsTestInitializer.createResourceContext(sysPrincipal);

        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, domainName, null, null, null, false, null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        Map<String, TagValueList> signedDomainTags = sdoms.getDomains().stream()
                .filter(dom -> dom.getDomain().getName().equals(domainName))
                .map(dom -> dom.getDomain().getTags())
                .findFirst().get();

        assertEquals(signedDomainTags, simpleDomainTag());

        // test with meta only
        response = zmsTestInitializer.getZms().getSignedDomains(rsrcCtx, domainName, "true", "all", null, false, null);
        sdoms = (SignedDomains) response.getEntity();
        assertNotNull(sdoms);

        signedDomainTags = sdoms.getDomains().stream()
                .filter(dom -> dom.getDomain().getName().equals(domainName))
                .map(dom -> dom.getDomain().getTags())
                .findFirst().get();

        assertEquals(signedDomainTags, simpleDomainTag());

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    private DomainData getDomainData(JWSDomain jwsDomain) throws ParseException, JOSEException, JsonProcessingException {
        assertNotNull(jwsDomain);

        JWSObject jwsObject = new JWSObject(Base64URL.from(jwsDomain.getProtectedHeader()),
                Base64URL.from(jwsDomain.getPayload()), Base64URL.from(jwsDomain.getSignature()));

        JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) Crypto.extractPublicKey(zmsTestInitializer.getZms().privateKey.getKey()));
        assertTrue(jwsObject.verify(verifier));

        return zmsTestInitializer.getZms().jsonMapper.readValue(jwsObject.getPayload().toString(), DomainData.class);
    }

    private Map<String, TagValueList> simpleDomainTag() {
        return Collections.singletonMap("tag-key", new TagValueList().setList(Arrays.asList("val1", "val2")));
    }

    @Test
    public void testGetDomainListUsingTags() {
        // first domain - no tags
        String domainNoTags = "tld-no-tags";
        TopLevelDomain tldNoTags = zmsTestInitializer.createTopLevelDomainObject(domainNoTags, "Test Domain Without Tags", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tldNoTags);
        Domain domainObjNoTags = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainNoTags);
        assertNull(domainObjNoTags.getTags());

        // first domain - 1 tag
        String domainName1 = "tld-tag-1";
        TopLevelDomain topLevelDomain = zmsTestInitializer.createTopLevelDomainObject(domainName1, "Test Domain With Tags", "testOrg", zmsTestInitializer.getAdminUser());
        topLevelDomain.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), topLevelDomain);
        Domain domain1 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1);
        assertEquals(domain1.getTags(), simpleDomainTag());

        // second domain - 2 tags
        Map<String, TagValueList> twoTags = new HashMap<>();
        twoTags.put("tag-key", new TagValueList().setList(Arrays.asList("tld2-val1", "tld2-val2")));
        twoTags.put("tag-key-2", new TagValueList().setList(Arrays.asList("tld2-val3", "tld2-val4")));
        String domainName2 = "tld-tag-2";
        TopLevelDomain topLevelDomain2 = zmsTestInitializer.createTopLevelDomainObject(domainName2, "Test Domain With Tags", "testOrg", zmsTestInitializer.getAdminUser());
        topLevelDomain2.setTags(twoTags);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), topLevelDomain2);
        Domain domain2 = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1);
        assertEquals(domain2.getTags(), simpleDomainTag());

        // domain-list no tags - all domains should be presented
        DomainList dl = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, null, null, null, null);
        assertTrue(dl.getNames().containsAll(Arrays.asList(domainNoTags, domainName1, domainName2)));

        // domain-list with only tag-key, should include both domains
        dl = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, "tag-key", null, null, null);

        assertEquals(dl.getNames().size(), 2);
        assertTrue(dl.getNames().containsAll(Arrays.asList(domainName1, domainName2)));

        // domain-list with tag-key AND tag-value, should include only domainName1
        dl = zmsTestInitializer.getZms().getDomainList(zmsTestInitializer.getMockDomRsrcCtx(), null, null, null, null,
                null, null, null, null, null, "tag-key", "val1", null, null);

        assertEquals(dl.getNames().size(), 1);
        assertTrue(dl.getNames().contains(domainName1));

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainNoTags, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName1, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName2, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testUpdateDomainTag() {
        final String domainName = "domain-with-tags";

        TopLevelDomain topLevelDomain = zmsTestInitializer.createTopLevelDomainObject(domainName, "Test Domain With Tags", "testOrg", zmsTestInitializer.getAdminUser());
        topLevelDomain.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), topLevelDomain);

        // domain should contain the tag
        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domain.getTags(), simpleDomainTag());

        // update domain meta with the same tag..
        DomainMeta domainMeta = zmsTestInitializer.createDomainMetaObject("Domain Meta for domain tags", "testOrg", true, true, "12345", 1001);
        domainMeta.setTags(simpleDomainTag());
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), domainMeta);

        // should be the same tag result..
        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domain.getTags(), simpleDomainTag());

        // update domain meta with the same tag, key, but different values..
        domainMeta = zmsTestInitializer.createDomainMetaObject("Domain Meta for domain tags", "testOrg", true, true, "12345", 1001);
        Map<String, TagValueList> newTags = Collections.singletonMap("tag-key", new TagValueList().setList(Arrays.asList("val2", "val3")));
        domainMeta.setTags(newTags);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), domainMeta);

        // should be the newTags
        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domain.getTags(), newTags);

        // update domain meta with the different tags
        domainMeta = zmsTestInitializer.createDomainMetaObject("Domain Meta for domain tags", "testOrg", true, true, "12345", 1001);
        Map<String, TagValueList> newTags2 = Collections.singletonMap("tag-key-2", new TagValueList().setList(Arrays.asList("new-val1", "new-val2")));
        domainMeta.setTags(newTags2);
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), domainMeta);

        // should be the newTags2
        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertEquals(domain.getTags(), newTags2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testGetAthenzDomainWithEntities() {

        final String domainName = "athenz-domain-with-entities";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Entity entity1 = zmsTestInitializer.createEntityObject(domainName, "test-entity1");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "test-entity1", zmsTestInitializer.getAuditRef(), entity1);

        Entity entity2 = zmsTestInitializer.createEntityObject(domainName, "test-entity2");
        zmsTestInitializer.getZms().putEntity(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "test-entity2", zmsTestInitializer.getAuditRef(), entity2);

        AthenzDomain domain = zmsTestInitializer.getZms().getAthenzDomain(domainName, false);
        List<Entity> entities = domain.getEntities();
        assertNotNull(entities);
        assertEquals(entities.size(), 2);

        boolean entity1Check = false;
        boolean entity2Check = false;

        for (Entity entity : entities) {
            switch (entity.getName()) {
                case "athenz-domain-with-entities:entity.test-entity1":
                    entity1Check = true;
                    break;
                case "athenz-domain-with-entities:entity.test-entity2":
                    entity2Check = true;
                    break;
            }
        }

        assertTrue(entity1Check);
        assertTrue(entity2Check);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutDomainMetaBusinessService() {

        final String domainName = "athenz-domain-with-business-service";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertNull(domain.getBusinessService());

        // set the business service

        DomainMeta dm = new DomainMeta().setBusinessService("service1");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), dm);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "service1");

        // update the business service

        dm.setBusinessService("service2");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), dm);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "service2");

        // update different meta attribute

        dm = new DomainMeta().setDescription("new description");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), dm);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "service2");
        assertEquals(domain.getDescription(), "new description");

        // remove the business service

        dm = new DomainMeta().setBusinessService("").setDescription("new description");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), dm);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertNull(domain.getBusinessService());
        assertEquals(domain.getDescription(), "new description");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPostDomainInvalidDomainMetaStoreValues() {

        final String domainName = "athenz-domain-with-invalid-details";
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());

        try {
            dom1.setBusinessService("invalid-business-service");
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid business service name"));
        }

        try {
            dom1.setBusinessService("valid-business-service");
            dom1.setAccount("invalid-aws-account");
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid aws account"));
        }

        try {
            dom1.setAccount("valid-aws-account");
            dom1.setAzureSubscription("invalid-azure-subscription");
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid azure subscription"));
        }

        zmsTestInitializer.getZms().productIdSupport = true;
        try {
            dom1.setAzureSubscription("valid-azure-subscription");
            dom1.setYpmId(100);
            zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid product id"));
        }

        dom1.setYpmId(101);
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "valid-business-service");
        assertEquals(domain.getAccount(), "valid-aws-account");
        assertEquals(domain.getAzureSubscription(), "valid-azure-subscription");
        assertEquals(domain.getYpmId().intValue(), 101);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
        zmsTestInitializer.getZms().productIdSupport = false;
    }

    @Test
    public void testPutDomainMetaInvalidDomainMetaStoreValues() {

        final String domainName = "athenz-domain-meta-with-invalid-details";
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        DomainMeta meta = new DomainMeta().setBusinessService("invalid-business-service");
        try {
            zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid business service name"));
        }

        meta.setBusinessService("valid-business-service");
        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);

        // second time no-op since value not changed

        zmsTestInitializer.getZms().putDomainMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef(), meta);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "valid-business-service");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
    }

    @Test
    public void testPutDomainSystemMetaInvalidDomainMetaStoreValues() {

        final String domainName = "athenz-domain-system-meta-with-invalid-details";
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        // first aws account

        DomainMeta meta = new DomainMeta().setAccount("invalid-aws-account");
        try {
            zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_ACCOUNT, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid aws account"));
        }

        meta.setAccount("valid-aws-account");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_ACCOUNT, zmsTestInitializer.getAuditRef(), meta);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getAccount(), "valid-aws-account");

        // second time no-op since nothing has changed

        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_ACCOUNT, zmsTestInitializer.getAuditRef(), meta);

        // next azure subscription

        try {
            meta.setAzureSubscription("invalid-azure-subscription");
            zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_AZURE_SUBSCRIPTION, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid azure subscription"));
        }

        meta.setAzureSubscription("valid-azure-subscription");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_AZURE_SUBSCRIPTION, zmsTestInitializer.getAuditRef(), meta);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getAzureSubscription(), "valid-azure-subscription");

        // second time no-op since nothing has changed

        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_AZURE_SUBSCRIPTION, zmsTestInitializer.getAuditRef(), meta);

        // next product id

        zmsTestInitializer.getZms().productIdSupport = true;
        try {
            meta.setYpmId(100);
            zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_PRODUCT_ID, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid product id"));
        }

        meta.setYpmId(101);
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_PRODUCT_ID, zmsTestInitializer.getAuditRef(), meta);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getYpmId().intValue(), 101);

        // final business service

        try {
            meta.setBusinessService("invalid-business-service");
            zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_BUSINESS_SERVICE, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertTrue(ex.getMessage().contains("invalid business service"));
        }

        meta.setBusinessService("valid-business-service");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_BUSINESS_SERVICE, zmsTestInitializer.getAuditRef(), meta);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "valid-business-service");

        // second time no-op since nothing has changed

        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_BUSINESS_SERVICE, zmsTestInitializer.getAuditRef(), meta);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
        zmsTestInitializer.getZms().productIdSupport = false;
    }

    @Test
    public void testPutDomainMetaIDomainMetaStoreException() {

        final String domainName = "athenz-domain-meta-with-exception";
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();

        // value with exc- will throw an exception but we should
        // not reject the request

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setBusinessService("exc-business-service");
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Domain domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getBusinessService(), "exc-business-service");

        // try with system attribute now as well

        DomainMeta meta = new DomainMeta().setAccount("exc-aws-account");
        zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_ACCOUNT, zmsTestInitializer.getAuditRef(), meta);

        domain = zmsTestInitializer.getZms().getDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName);
        assertNotNull(domain);
        assertEquals(domain.getAccount(), "exc-aws-account");
        assertEquals(domain.getBusinessService(), "exc-business-service");

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
    }

    @Test
    public void testPutDomainSystemMetaInvalidDomain() {

        final String domainName = "athenz-domain-system-meta-not-found";

        DomainMeta meta = new DomainMeta().setAccount("aws-account");
        try {
            zmsTestInitializer.getZms().putDomainSystemMeta(zmsTestInitializer.getMockDomRsrcCtx(), domainName, ZMSConsts.SYSTEM_META_ACCOUNT, zmsTestInitializer.getAuditRef(), meta);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), ResourceException.NOT_FOUND);
        }
    }

    @Test
    public void testGetDomainMetaStoreValidValuesList() {
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        DomainMetaStore mockDomainMetaStore = Mockito.mock(DomainMetaStore.class);
        List<String> awsAccountsList = Collections.singletonList("awsAcc");
        when(mockDomainMetaStore.getValidAWSAccounts(isNull())).thenReturn(awsAccountsList);
        List<String> businessServicesList = Collections.singletonList("bservice");
        when(mockDomainMetaStore.getValidBusinessServices(isNull())).thenReturn(businessServicesList);
        List<String> azureList = Collections.singletonList("azureSub");
        when(mockDomainMetaStore.getValidAzureSubscriptions(isNull())).thenReturn(azureList);
        List<String> productIdList = Collections.singletonList("product");
        when(mockDomainMetaStore.getValidProductIds(isNull())).thenReturn(productIdList);
        zmsTestInitializer.getZms().domainMetaStore = mockDomainMetaStore;
        assertEquals("bservice", zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "businessService", null).getValidValues().get(0));
        assertEquals("awsAcc", zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "awsAccount", null).getValidValues().get(0));
        assertEquals("azureSub", zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "azureSubscription", null).getValidValues().get(0));
        assertEquals("product", zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "productId", null).getValidValues().get(0));
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
    }

    @Test
    public void testGetDomainMetaStoreValidValuesListEmpty() {
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();
        DomainMetaStoreValidValuesList emptyValidValuesList = new DomainMetaStoreValidValuesList();
        emptyValidValuesList.setValidValues(new ArrayList<>());
        assertEquals(emptyValidValuesList, zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "businessService", null));
        assertEquals(emptyValidValuesList, zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "awsAccount", null));
        assertEquals(emptyValidValuesList, zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "azureSubscription", null));
        assertEquals(emptyValidValuesList, zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "productId", null));
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
    }

    @Test
    public void testGetDomainMetaStoreValidValuesListBadAttribute() {
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();
        try {
            zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "badAttribute", null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"Invalid attribute: badAttribute\"}");
        } finally {
            zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
        }
    }

    @Test
    public void testGetDomainMetaStoreValidValuesListMissingAttribute() {
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        zmsTestInitializer.getZms().domainMetaStore = new TestDomainMetaStore();
        try {
            zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), null, null);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getMessage(), "ResourceException (400): {code: 400, message: \"attributeName is mandatory\"}");
        } finally {
            zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
        }
    }

    @Test
    public void testGetDomainMetaStoreValidValuesUsernameLowered() {
        DomainMetaStore savedMetaStore = zmsTestInitializer.getZms().domainMetaStore;
        DomainMetaStore mockDomainMetaStore = Mockito.mock(DomainMetaStore.class);
        List<String> businessServicesList = Collections.singletonList("bservice");
        when(mockDomainMetaStore.getValidBusinessServices(anyString())).thenReturn(businessServicesList);

        zmsTestInitializer.getZms().domainMetaStore = mockDomainMetaStore;
        ArgumentCaptor<String> userCapture = ArgumentCaptor.forClass(String.class);
        zmsTestInitializer.getZms().getDomainMetaStoreValidValuesList(zmsTestInitializer.getMockDomRsrcCtx(), "businessService", "TestUser");
        verify(mockDomainMetaStore, times(1)).getValidBusinessServices(userCapture.capture());

        assertEquals(userCapture.getValue(), "testuser");
        zmsTestInitializer.getZms().domainMetaStore = savedMetaStore;
    }

    @Test
    public void testGetUserAuthorityAttributeMap() {
        Authority savedAuthority = zmsTestInitializer.getZms().userAuthority;

        Authority authority = Mockito.mock(Authority.class);

        when(authority.booleanAttributesSupported()).thenReturn(new HashSet<>(Collections.singletonList("boolAttr1")));
        when(authority.dateAttributesSupported()).thenReturn(new HashSet<>(Collections.singletonList("dateAttr1")));
        zmsTestInitializer.getZms().userAuthority = authority;
        UserAuthorityAttributeMap attributes = zmsTestInitializer.getZms().getUserAuthorityAttributeMap(zmsTestInitializer.getMockDomRsrcCtx());
        assertEquals(attributes.getAttributes().size(), 2);
        assertEquals(attributes.getAttributes().get("bool").getValues().size(), 1);
        assertEquals(attributes.getAttributes().get("bool").getValues().get(0), "boolAttr1");

        assertEquals(attributes.getAttributes().get("date").getValues().size(), 1);
        assertEquals(attributes.getAttributes().get("date").getValues().get(0), "dateAttr1");

        zmsTestInitializer.getZms().userAuthority = savedAuthority;
    }

    @Test
    public void testPutAssertionConditions() {
        String domainName = "put-assertion-conditions";
        String roleName = "role1";
        String polName = "pol1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,"Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        Policy pol = zmsTestInitializer.createPolicyObject(domainName, polName, roleName, "action1", domainName + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, zmsTestInitializer.getAuditRef(), false, pol);

        Policy policyResp = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName);
        AssertionConditions acs = new AssertionConditions().setConditionsList(new ArrayList<>());
        AssertionCondition ac1 = createAssertionConditionObject(1, "instances", "HOST1,host2,Host3");
        ac1.getConditionsMap().put("enforcementState", new AssertionConditionData().setValue("ENFORCE")
                .setOperator(AssertionConditionOperator.EQUALS));
        acs.getConditionsList().add(ac1);

        AssertionCondition ac2 = createAssertionConditionObject(2, "instances", "HOST21,host22");
        ac2.getConditionsMap().put("enforcementState", new AssertionConditionData().setValue("REPORT")
                .setOperator(AssertionConditionOperator.EQUALS));
        acs.getConditionsList().add(ac2);

        zmsTestInitializer.getZms().putAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), acs);

        Response response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();
        AssertionConditions conditionsResp;
        AssertionCondition conditionResp = new AssertionCondition().setId(1).setConditionsMap(new HashMap<>());
        // zms is going to lowercase data
        conditionResp.getConditionsMap().put("instances", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
        .setValue("host1,host2,host3"));
        conditionResp.getConditionsMap().put("enforcementstate", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("enforce"));

        AssertionCondition conditionResp2 = new AssertionCondition().setId(2).setConditionsMap(new HashMap<>());
        // zms is going to lowercase data
        conditionResp2.getConditionsMap().put("instances", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("host21,host22"));
        conditionResp2.getConditionsMap().put("enforcementstate", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("report"));

        for(Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                conditionsResp = policy.getAssertions().get(0).getConditions();
                assertNotNull(conditionsResp);
                assertThat(conditionsResp.getConditionsList(), CoreMatchers.hasItems(conditionResp, conditionResp2));
            }
        }
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().putAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), acs);
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().putAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), acs);
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutAssertionCondition() {
        String domainName = "put-assertion-condition";
        String roleName = "role1";
        String polName = "pol1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,"Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        Policy pol = zmsTestInitializer.createPolicyObject(domainName, polName, roleName, "action1", domainName + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, zmsTestInitializer.getAuditRef(), false, pol);

        Policy policyResp = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName);
        AssertionCondition ac1 = createAssertionConditionObject(1, "instances", "HOST1,host2,Host3");
        ac1.setId(null);//insert does not need id
        ac1.getConditionsMap().put("enforcementState", new AssertionConditionData().setValue("ENFORCE")
                .setOperator(AssertionConditionOperator.EQUALS));

        zmsTestInitializer.getZms().putAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), ac1);

        Response response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();
        AssertionConditions conditionsResp;
        AssertionCondition conditionResp = new AssertionCondition().setId(1).setConditionsMap(new HashMap<>());
        // zms is going to lowercase data
        conditionResp.getConditionsMap().put("instances", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("host1,host2,host3"));
        conditionResp.getConditionsMap().put("enforcementstate", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("enforce"));

        for(Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                conditionsResp = policy.getAssertions().get(0).getConditions();
                assertNotNull(conditionsResp);
                assertThat(conditionsResp.getConditionsList(), CoreMatchers.hasItems(conditionResp));
            }
        }
        // update condition
        ac1.setId(1).setConditionsMap(new HashMap<>());
        ac1.getConditionsMap().put("newkey", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("MYVAL"));
        ac1.getConditionsMap().put("enforcementState", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("report"));
        zmsTestInitializer.getZms().putAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), ac1);

        response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        sdoms = (SignedDomains) response.getEntity();

        conditionResp = new AssertionCondition().setId(1).setConditionsMap(new HashMap<>());
        // zms is going to lowercase data
        conditionResp.getConditionsMap().put("enforcementstate", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("report"));
        conditionResp.getConditionsMap().put("newkey", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("myval"));

        for(Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                conditionsResp = policy.getAssertions().get(0).getConditions();
                assertNotNull(conditionsResp);
                assertThat(conditionsResp.getConditionsList(), CoreMatchers.hasItems(conditionResp));
            }
        }
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().putAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), ac1);
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().putAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), ac1);
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionConditions() {
        String domainName = "delete-assertion-conditions";
        String roleName = "role1";
        String polName = "pol1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,"Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        Policy pol = zmsTestInitializer.createPolicyObject(domainName, polName, roleName, "action1", domainName + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, zmsTestInitializer.getAuditRef(), false, pol);

        Policy policyResp = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName);
        AssertionConditions acs = new AssertionConditions().setConditionsList(new ArrayList<>());
        AssertionCondition ac1 = createAssertionConditionObject(1, "instances", "HOST1,host2,Host3");
        ac1.getConditionsMap().put("enforcementState", new AssertionConditionData().setValue("ENFORCE")
                .setOperator(AssertionConditionOperator.EQUALS));
        acs.getConditionsList().add(ac1);

        AssertionCondition ac2 = createAssertionConditionObject(2, "instances", "HOST21,host22");
        ac2.getConditionsMap().put("enforcementState", new AssertionConditionData().setValue("REPORT")
                .setOperator(AssertionConditionOperator.EQUALS));
        acs.getConditionsList().add(ac2);

        zmsTestInitializer.getZms().putAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), acs);

        Response response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();
        AssertionConditions conditionsResp;
        AssertionCondition conditionResp = new AssertionCondition().setId(1).setConditionsMap(new HashMap<>());
        // zms is going to lowercase data
        conditionResp.getConditionsMap().put("instances", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("host1,host2,host3"));
        conditionResp.getConditionsMap().put("enforcementstate", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("enforce"));

        // make sure assertion conditions are present first
        for(Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                conditionsResp = policy.getAssertions().get(0).getConditions();
                assertNotNull(conditionsResp);
                assertThat(conditionsResp.getConditionsList(), CoreMatchers.hasItems(conditionResp));
            }
        }
        // now delete all condition
        zmsTestInitializer.getZms().deleteAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef());

        response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        sdoms = (SignedDomains) response.getEntity();
        for(Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                assertNull(policy.getAssertions().get(0).getConditions());
            }
        }
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().deleteAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef());
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().deleteAssertionConditions(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef());
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDeleteAssertionCondition() {
        String domainName = "delete-assertion-condition";
        String roleName = "role1";
        String polName = "pol1";

        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,"Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);

        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.john", "user.jane");
        Policy pol = zmsTestInitializer.createPolicyObject(domainName, polName, roleName, "action1", domainName + ":resource1", AssertionEffect.ALLOW);
        zmsTestInitializer.getZms().putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, zmsTestInitializer.getAuditRef(), false, pol);

        Policy policyResp = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName);
        AssertionCondition ac1 = createAssertionConditionObject(1, "instances", "HOST1,host2,Host3");
        ac1.setId(null);//insert does not need id
        ac1.getConditionsMap().put("enforcementState", new AssertionConditionData().setValue("ENFORCE")
                .setOperator(AssertionConditionOperator.EQUALS));

        zmsTestInitializer.getZms().putAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), zmsTestInitializer.getAuditRef(), ac1);

        Response response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        SignedDomains sdoms = (SignedDomains) response.getEntity();
        AssertionConditions conditionsResp;
        AssertionCondition conditionResp = new AssertionCondition().setId(1).setConditionsMap(new HashMap<>());
        // zms is going to lowercase data
        conditionResp.getConditionsMap().put("instances", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("host1,host2,host3"));
        conditionResp.getConditionsMap().put("enforcementstate", new AssertionConditionData().setOperator(AssertionConditionOperator.EQUALS)
                .setValue("enforce"));

        // make sure assertion conditions are present first
        for (Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                conditionsResp = policy.getAssertions().get(0).getConditions();
                assertNotNull(conditionsResp);
                assertThat(conditionsResp.getConditionsList(), CoreMatchers.hasItems(conditionResp));
            }
        }

        // now delete all condition
        zmsTestInitializer.getZms().deleteAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), 1, zmsTestInitializer.getAuditRef());

        response = zmsTestInitializer.getZms().getSignedDomains(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "false", null, true, true,null);
        sdoms = (SignedDomains) response.getEntity();
        for(Policy policy : sdoms.getDomains().get(0).getDomain().getPolicies().getContents().getPolicies()) {
            if ((domainName + ":policy." + polName).equals(policy.getName())) {
                assertNull(policy.getAssertions().get(0).getConditions());
            }
        }
        DynamicConfigBoolean dynamicConfigBoolean = Mockito.mock(DynamicConfigBoolean.class);
        when(dynamicConfigBoolean.get()).thenReturn(true).thenReturn(false);
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().deleteAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, polName, policyResp.getAssertions().get(0).getId(), 1, zmsTestInitializer.getAuditRef());
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().readOnlyMode = dynamicConfigBoolean;
        try {
            zmsTestInitializer.getZms().deleteAssertionCondition(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "admin", policyResp.getAssertions().get(0).getId(), 1, zmsTestInitializer.getAuditRef());
            fail();
        } catch(ResourceException re) {
            assertEquals(re.getCode(), ResourceException.BAD_REQUEST);
        }
        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testPutPolicyVersionDirectlyWithErrorCases() {

        final String domainName = "put-policy-version-direct";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject(domainName,
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        zmsTestInitializer.getZms().postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), dom1);
        addRoleNeededForTest(domainName, "Role1");
        addRoleNeededForTest(domainName, "Role2");

        Policy policy1 = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        policy1.setVersion("1");
        policy1.setActive(false);

        // this should be rejected as invalid as version is specified and marked non-active but no policy exists with that name

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // Setting active as null is the same as setting it true. When active and version both null - create new active poicy with version "0"

        policy1.setActive(null);
        policy1.setVersion(null);
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1);

        Policy policy1NewActive = zmsTestInitializer.createPolicyObject(domainName, "policy1");
        policy1NewActive.setVersion("testversion");
        policy1NewActive.setActive(true);
        Assertion assertion = new Assertion();
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "Role1"));
        assertion.setResource(domainName + ":newpolicyversionnonzero");
        assertion.setAction("newpolicyaction");
        policy1NewActive.getAssertions().add(assertion);

        // this should be rejected as invalid as a policy exists with that name with an active policy version (users should use setActivePolicyVersion endpoint to change active version)

        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1NewActive);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        // Same behaviour when active is set to null

        policy1NewActive.setActive(null);
        try {
            zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, policy1NewActive);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        //  now set a new policy name with this version, "testversion", and make it active / keep null - this will create a new policy with version "testversion" instead of the default 0
        policy1NewActive.setName("newpolicy1");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "newpolicy1", zmsTestInitializer.getAuditRef(), false, policy1NewActive);
        Policy newpolicy1 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "newpolicy1");
        assertEquals(newpolicy1.getName(), "put-policy-version-direct:policy.newpolicy1");
        assertEquals(newpolicy1.getVersion(), "testversion");
        List<Assertion> assertionsList = newpolicy1.getAssertions();
        assertEquals(assertionsList.size(), 2);
        Assertion originalAssertion = assertionsList.get(0);
        Assertion newAssertion = assertionsList.get(1);
        assertEquals(originalAssertion.getResource(), domainName + ":*");
        assertEquals(newAssertion.getResource(), domainName + ":newpolicyversionnonzero");

        // Make sure it's the only version for this policy
        PolicyList newpolicy11Versions = zmsTestInitializer.getZms().getPolicyVersionList(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "newpolicy1");
        assertEquals(newpolicy11Versions.getNames().size(), 1);
        assertEquals(newpolicy11Versions.getNames().get(0), "testversion");

        // Verify the same behaviour when setting Active as "True" instead of null

        policy1NewActive.setActive(true);
        policy1NewActive.setName("newpolicyactivetrue");
        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "newpolicyactivetrue", zmsTestInitializer.getAuditRef(), false, policy1NewActive);
        newpolicy1 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "newpolicyactivetrue");
        assertEquals(newpolicy1.getName(), "put-policy-version-direct:policy.newpolicyactivetrue");
        assertEquals(newpolicy1.getVersion(), "testversion");
        assertionsList = newpolicy1.getAssertions();
        assertEquals(assertionsList.size(), 2);
        originalAssertion = assertionsList.get(0);
        newAssertion = assertionsList.get(1);
        assertEquals(originalAssertion.getResource(), domainName + ":*");
        assertEquals(newAssertion.getResource(), domainName + ":newpolicyversionnonzero");

        // Make sure it's the only version for this policy
        newpolicy11Versions = zmsTestInitializer.getZms().getPolicyVersionList(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "newpolicyactivetrue");
        assertEquals(newpolicy11Versions.getNames().size(), 1);
        assertEquals(newpolicy11Versions.getNames().get(0), "testversion");

        // now make a copy to the active version which should be rejected as invalid

        try {
            zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", new PolicyOptions().setVersion("0"), zmsTestInitializer.getAuditRef(), false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        // make a copy from an unknown version which should be rejected

        try {
            PolicyOptions policyOptions = new PolicyOptions().setVersion("1").setFromVersion("2");
            zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", policyOptions, zmsTestInitializer.getAuditRef(), false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 404);
        }

        // make a valid copy of the policy

        zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", new PolicyOptions().setVersion("1"), zmsTestInitializer.getAuditRef(), false);

        // now make a copy from the same version to itself which should be
        // rejected as invalid

        try {
            PolicyOptions policyOptions = new PolicyOptions().setVersion("1").setFromVersion("1");
            zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", policyOptions, zmsTestInitializer.getAuditRef(), false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        // try to override from one of the other versions which should be rejected

        try {
            PolicyOptions policyOptions = new PolicyOptions().setVersion("0").setFromVersion("1");
            zmsTestInitializer.getZms().putPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", policyOptions, zmsTestInitializer.getAuditRef(), false);
            fail();
        } catch (ResourceException ex) {
            assertEquals(ex.getCode(), 400);
        }

        Policy activePolicy1 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");

        Policy verPolicy1 = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", "1");
        assertNotNull(verPolicy1);

        List<Assertion> list = new ArrayList<>();
        list.add(new Assertion().setRole(ResourceUtils.roleResourceName(domainName, "role1"))
                .setResource(domainName + ":resource1").setAction("read"));
        list.add(new Assertion().setRole(ResourceUtils.roleResourceName(domainName, "role2"))
                .setResource(domainName + ":resource2").setAction("write"));
        verPolicy1.setAssertions(list);

        // modify the given version policy

        zmsTestInitializer.getZms().putPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", zmsTestInitializer.getAuditRef(), false, verPolicy1);

        // verify the active policy is not changed

        Policy activePolicy2 = zmsTestInitializer.getZms().getPolicy(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1");
        assertEquals(activePolicy1, activePolicy2);

        // verify version 1 policy is updated

        Policy verPolicy2 = zmsTestInitializer.getZms().getPolicyVersion(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "policy1", "1");
        assertEquals(verPolicy1, verPolicy2);

        zmsTestInitializer.getZms().deleteTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), domainName, zmsTestInitializer.getAuditRef());
    }

    @Test
    public void testDomainChangeMessages() {

        final ZMSImpl zmsImpl = zmsTestInitializer.getZms();

        SubDomain domSysNetwork = zmsTestInitializer.createSubDomainObject("network", "sys", "Test Domain",
                "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", zmsTestInitializer.getAuditRef(), domSysNetwork);

        // postTopLevelDomain events
        String domainName = "test-dom-change-msg";
        TopLevelDomain dom1 = zmsTestInitializer.createTopLevelDomainObject("test-dom-change-msg",
            "Test description Domain1", "testOrg", zmsTestInitializer.getAdminUser());
        dom1.setAuditEnabled(true);
        
        RsrcCtxWrapper ctx = zmsTestInitializer.contextWithMockPrincipal("postTopLevelDomain");
        zmsImpl.postTopLevelDomain(ctx, zmsTestInitializer.getAuditRef(), dom1);
        
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), DOMAIN, domainName, domainName, "postTopLevelDomain");

        // putDomainTemplate events
        DomainTemplate domTemplate = new DomainTemplate();
        List<String> templates = new ArrayList<>();
        templates.add("vipng");
        domTemplate.setTemplateNames(templates);
        ctx = zmsTestInitializer.contextWithMockPrincipal("putDomainTemplate");
        zmsImpl.putDomainTemplate(ctx, domainName, zmsTestInitializer.getAuditRef(), domTemplate);
        assertTemplateChanges(domainName, ctx.getDomainChangeMessages(), "putDomainTemplate");

        // deleteDomainTemplate events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteDomainTemplate");
        zmsImpl.deleteDomainTemplate(ctx, domainName, "vipng", zmsTestInitializer.getAuditRef());
        assertTemplateChanges(domainName, ctx.getDomainChangeMessages(), "deleteDomainTemplate");

        // putDomainTemplateExt events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putDomainTemplateExt");
        zmsImpl.putDomainTemplateExt(ctx, domainName, "vipng", zmsTestInitializer.getAuditRef(), domTemplate);
        assertTemplateChanges(domainName, ctx.getDomainChangeMessages(), "putDomainTemplateExt");

        // putDomainMeta events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putDomainMeta");
        DomainMeta dm = new DomainMeta().setBusinessService("invalid");
        zmsImpl.putDomainMeta(ctx, domainName, zmsTestInitializer.getAuditRef(), dm);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), DOMAIN, domainName, domainName, "putDomainMeta");

        // putDomainSystemMeta events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putDomainSystemMeta");
        DomainMeta meta = new DomainMeta().setAuditEnabled(true);
        zmsImpl.putDomainSystemMeta(ctx, domainName, "auditenabled", zmsTestInitializer.getAuditRef(), meta);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), DOMAIN, domainName, domainName, "putDomainSystemMeta");

        // putEntity events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putEntity");
        Entity entity1 = zmsTestInitializer.createEntityObject(domainName, "Entity1");
        zmsImpl.putEntity(ctx, domainName, "Entity1", zmsTestInitializer.getAuditRef(), entity1);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ENTITY, domainName, "entity1", "putEntity");

        // deleteEntity events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteEntity");
        zmsImpl.deleteEntity(ctx, domainName, "Entity1", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ENTITY, domainName, "entity1", "deleteEntity");

        // putRole events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putRole");
        String roleName = "role-test1";
        Role role = zmsTestInitializer.createRoleObject(domainName, roleName, null, "user.user101", "user.todelete");
        role.setAuditEnabled(true);
        zmsImpl.putRole(ctx, domainName, roleName, zmsTestInitializer.getAuditRef(), false, role);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putRole");

        // putRoleMeta events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putRoleMeta");
        RoleMeta rm = createRoleMetaObject(true);
        zmsImpl.putRoleMeta(ctx, domainName, roleName, "auditenabled", rm);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putRoleMeta");

        // putMembership events using user.doe principal
        ctx = zmsTestInitializer.contextWithMockPrincipal("putMembership", "doe");
        
        Membership mbr = new Membership();
        mbr.setMemberName("user.doe");
        mbr.setActive(false);
        mbr.setApproved(false);

        zmsImpl.putMembership(ctx, domainName, roleName, "user.doe", zmsTestInitializer.getAuditRef(), false, mbr);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putMembership");
        
        // putRoleReview events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putRoleReview");
        
        Role inputRole = new Role().setName(roleName);
        List<RoleMember> inputMembers = new ArrayList<>();
        inputRole.setRoleMembers(inputMembers);
        inputMembers.add(new RoleMember().setMemberName("user.doe").setActive(false));
        zmsImpl.putRoleReview(ctx, domainName, roleName, zmsTestInitializer.getAuditRef(), false, inputRole);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putRoleReview");
        
        // putMembershipDecision events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putMembershipDecision");
        mbr.setActive(true);
        mbr.setApproved(true);
        zmsImpl.putMembershipDecision(ctx, domainName, roleName, "user.doe", zmsTestInitializer.getAuditRef(), mbr);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putMembershipDecision");

        // putMembership events using user.pend principal
        ctx = zmsTestInitializer.contextWithMockPrincipal("putMembership", "pend");

        Membership mbr1 = new Membership();
        mbr1.setMemberName("user.pend");
        mbr1.setActive(false);
        mbr1.setApproved(false);

        zmsImpl.putMembership(ctx, domainName, roleName, "user.pend", zmsTestInitializer.getAuditRef(), false, mbr1);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putMembership");

        // deletePendingMembership events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deletePendingMembership");
        zmsImpl.deletePendingMembership(ctx, domainName, roleName, "user.pend", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "deletePendingMembership");
        
        // deleteMembership events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteMembership");
        zmsImpl.deleteMembership(ctx, domainName, roleName, "user.doe", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "deleteMembership");

        // putRoleSystemMeta events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putRoleSystemMeta");
        RoleSystemMeta rsm = createRoleSystemMetaObject(true);
        zmsImpl.putRoleSystemMeta(ctx, domainName, roleName, "auditenabled", zmsTestInitializer.getAuditRef(), rsm);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "putRoleSystemMeta");
    
        // deleteRole events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteRole");
        zmsImpl.deleteRole(ctx, domainName, roleName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, roleName, "deleteRole");

        // putDefaultAdmins events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putDefaultAdmins");
        List<String> adminList = Arrays.asList("user.newadmin", zmsTestInitializer.getAdminUser());
        DefaultAdmins admins = new DefaultAdmins().setAdmins(adminList);
        zmsImpl.putDefaultAdmins(ctx, domainName, zmsTestInitializer.getAuditRef(), admins);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, "admin", "putDefaultAdmins");

        // putGroup events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroup");
        String groupName = "group-test1";
        Group group = zmsTestInitializer.createGroupObject(domainName, groupName, "user.user12", "user.user101");
        group.setAuditEnabled(true);
        zmsImpl.putGroup(ctx, domainName, groupName, zmsTestInitializer.getAuditRef(), false, group);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroup");

        // putGroupMeta events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroupMeta");
        GroupMeta gm = new GroupMeta().setSelfServe(true);
        zmsImpl.putGroupMeta(ctx, domainName, groupName, "auditenabled", gm);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroupMeta");

        // putGroupMembership events using user.doe principal
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroupMembership", "doe");

        GroupMembership gmbr = new GroupMembership();
        gmbr.setMemberName("user.doe");
        gmbr.setActive(false);
        gmbr.setApproved(false);

        zmsImpl.putGroupMembership(ctx, domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), false, gmbr);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroupMembership");
        
        // putGroupReview events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroupReview");

        Group inputGroup = new Group().setName(groupName);
        List<GroupMember> gInputMembers = new ArrayList<>();
        inputGroup.setGroupMembers(gInputMembers);
        gInputMembers.add(new GroupMember().setMemberName("user.doe").setActive(false));
        zmsImpl.putGroupReview(ctx, domainName, groupName, zmsTestInitializer.getAuditRef(), false, inputGroup);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroupReview");

        // putGroupMembershipDecision events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroupMembershipDecision");
        mbr.setActive(true);
        mbr.setApproved(true);
        zmsImpl.putGroupMembershipDecision(ctx, domainName, groupName, "user.doe", zmsTestInitializer.getAuditRef(), gmbr);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroupMembershipDecision");

        // putGroupMembership events using user.pend principal
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroupMembership", "pend");

        GroupMembership gmbr1 = new GroupMembership();
        gmbr1.setMemberName("user.pend");
        gmbr1.setActive(false);
        gmbr1.setApproved(false);

        zmsImpl.putGroupMembership(ctx, domainName, groupName, "user.pend", zmsTestInitializer.getAuditRef(), false, gmbr1);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroupMembership");

        // deletePendingGroupMembership events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deletePendingGroupMembership");
        zmsImpl.deletePendingGroupMembership(ctx, domainName, groupName, "user.pend", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "deletePendingGroupMembership");

        // deleteGroupMembership events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteGroupMembership");
        zmsImpl.deleteGroupMembership(ctx, domainName, groupName, "user.user12", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "deleteGroupMembership");

        // putGroupSystemMeta events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putGroupSystemMeta");
        GroupSystemMeta gsm = createGroupSystemMetaObject(true);
        zmsImpl.putGroupSystemMeta(ctx, domainName, groupName, "auditenabled", zmsTestInitializer.getAuditRef(), gsm);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "putGroupSystemMeta");

        // deleteGroup events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteGroup");
        zmsImpl.deleteGroup(ctx, domainName, groupName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), GROUP, domainName, groupName, "deleteGroup");

        // putPolicy events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putPolicy");
        String policyName = "test-policy";
        Policy policy = zmsTestInitializer.createPolicyObject(domainName, policyName);
        zmsImpl.putPolicy(ctx, domainName, policyName, zmsTestInitializer.getAuditRef(), false, policy);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "putPolicy");

        // putAssertion events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putAssertion");
        Assertion assertion = new Assertion();
        assertion.setAction("update");
        assertion.setEffect(AssertionEffect.ALLOW);
        assertion.setResource(domainName + ":resource");
        assertion.setRole(ResourceUtils.roleResourceName(domainName, "admin"));
        assertion = zmsImpl.putAssertion(ctx, domainName, policyName, zmsTestInitializer.getAuditRef(), assertion);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "putAssertion");

        // deleteAssertion events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteAssertion");
        zmsImpl.deleteAssertion(ctx, domainName, policyName, assertion.getId(), zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "deleteAssertion");
        
        // putPolicyVersion events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putPolicyVersion");
        String newVersion = "new-version";
        zmsImpl.putPolicyVersion(ctx, domainName, policyName, new PolicyOptions().setVersion(newVersion), zmsTestInitializer.getAuditRef(), false);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "putPolicyVersion");

        // putAssertionPolicyVersion events
        addRoleNeededForTest(domainName, "Role1");
        ctx = zmsTestInitializer.contextWithMockPrincipal("putAssertionPolicyVersion");
        Assertion assertionWithVersion = new Assertion();
        assertionWithVersion.setAction("testAction");
        assertionWithVersion.setEffect(AssertionEffect.DENY);
        assertionWithVersion.setResource(domainName + ":test-resource");
        assertionWithVersion.setRole(ResourceUtils.roleResourceName(domainName, "Role1"));
        assertionWithVersion = zmsImpl.putAssertionPolicyVersion(ctx, domainName, policyName, newVersion, zmsTestInitializer.getAuditRef(), assertionWithVersion);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "putAssertionPolicyVersion");

        // setActivePolicyVersion events
        ctx = zmsTestInitializer.contextWithMockPrincipal("setActivePolicyVersion");
        zmsImpl.setActivePolicyVersion(ctx, domainName, policyName, new PolicyOptions().setVersion(newVersion), zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "setActivePolicyVersion");

        // deleteAssertionPolicyVersion events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteAssertionPolicyVersion");
        zmsImpl.deleteAssertionPolicyVersion(ctx, domainName, policyName, newVersion, assertionWithVersion.getId(), zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "deleteAssertionPolicyVersion");

        // deletePolicyVersion events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deletePolicyVersion");
        zmsImpl.putPolicyVersion(ctx, domainName, policyName, new PolicyOptions().setVersion("versionToDelete"), zmsTestInitializer.getAuditRef(), false);
        zmsImpl.deletePolicyVersion(ctx, domainName, policyName, "versionToDelete", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyName, "deletePolicyVersion");

        // putAssertionCondition events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putAssertionCondition");
        String policyConditionName = "test-policy-cond";
        Policy policyCondition = zmsTestInitializer.createPolicyObject(domainName, policyConditionName);
        zmsImpl.putPolicy(ctx, domainName, policyConditionName, zmsTestInitializer.getAuditRef(), false, policyCondition);
        policyCondition = zmsImpl.getPolicy(ctx, domainName, policyConditionName);
        Long assertionId = policyCondition.getAssertions().get(0).getId();
        AssertionCondition ac = createAssertionConditionObject(1, "instances", "HOST1,host2,Host3");
        ac.setId(null);
        ac = zmsImpl.putAssertionCondition(ctx, domainName, policyConditionName, assertionId, zmsTestInitializer.getAuditRef(), ac);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyConditionName, "putAssertionCondition");

        // putAssertionConditions events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putAssertionConditions");
        AssertionConditions acs = new AssertionConditions().setConditionsList(Collections.singletonList(ac));
        zmsImpl.putAssertionConditions(ctx, domainName, policyConditionName, assertionId, zmsTestInitializer.getAuditRef(), acs);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyConditionName, "putAssertionConditions");

        // deleteAssertionCondition events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteAssertionCondition");
        zmsImpl.deleteAssertionCondition(ctx, domainName, policyConditionName, assertionId, 1, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyConditionName, "deleteAssertionCondition");
        
        // deleteAssertionConditions events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteAssertionConditions");
        zmsImpl.deleteAssertionConditions(ctx, domainName, policyConditionName, assertionId, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyConditionName, "deleteAssertionConditions");

        // deletePolicy events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deletePolicy");
        zmsImpl.deletePolicy(ctx, domainName, policyConditionName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, domainName, policyConditionName, "deletePolicy");
        
        // putServiceIdentity events
        String serviceName = "test-srv";
        ServiceIdentity service = zmsTestInitializer.createServiceObject(domainName, serviceName,
            "http://localhost", "/usr/bin/test", "root", "users", "host1");
        ctx = zmsTestInitializer.contextWithMockPrincipal("putServiceIdentity");
        zmsImpl.putServiceIdentity(ctx, domainName, serviceName, zmsTestInitializer.getAuditRef(), false, service);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), SERVICE, domainName, serviceName, "putServiceIdentity");

        // putPublicKeyEntry events
        PublicKeyEntry keyEntry = new PublicKeyEntry();
        keyEntry.setId("1");
        keyEntry.setKey(zmsTestInitializer.getPubKeyK2());

        ctx = zmsTestInitializer.contextWithMockPrincipal("putPublicKeyEntry");
        zmsImpl.putPublicKeyEntry(ctx, domainName, serviceName, "1", zmsTestInitializer.getAuditRef(), keyEntry);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), SERVICE, domainName, serviceName, "putPublicKeyEntry");

        // deletePublicKeyEntry events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deletePublicKeyEntry");
        zmsImpl.deletePublicKeyEntry(ctx, domainName, serviceName, "1", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), SERVICE, domainName, serviceName, "deletePublicKeyEntry");

        // putServiceIdentitySystemMeta events
        ServiceIdentitySystemMeta srvIdMeta = new ServiceIdentitySystemMeta();
        srvIdMeta.setProviderEndpoint("https://localhost");
        ctx = zmsTestInitializer.contextWithMockPrincipal("putServiceIdentitySystemMeta");
        zmsImpl.putServiceIdentitySystemMeta(ctx, domainName, serviceName, "providerendpoint", zmsTestInitializer.getAuditRef(), srvIdMeta);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), SERVICE, domainName, serviceName, "putServiceIdentitySystemMeta");

        // putTenancy events
        String tenantDomainName = domainName + "-tenant";
        TopLevelDomain tenDom = zmsTestInitializer.createTopLevelDomainObject(tenantDomainName,
            "Test Tenant Provider Domain", "testOrg", zmsTestInitializer.getAdminUser());
        zmsImpl.postTopLevelDomain(zmsTestInitializer.getMockDomRsrcCtx(), zmsTestInitializer.getAuditRef(), tenDom);
        
        Tenancy tenancy = zmsTestInitializer.createTenantObject(tenantDomainName, domainName + "." + serviceName);
        ctx = zmsTestInitializer.contextWithMockPrincipal("putTenancy");
        zmsImpl.putTenancy(ctx, tenantDomainName, domainName + "." + serviceName, zmsTestInitializer.getAuditRef(), tenancy);
        List<DomainChangeMessage> changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, tenantDomainName, "test-dom-change-msg-tenant:role.tenancy.test-dom-change-msg.test-srv.admin", "putTenancy");
        assertChange(changeMsgs.get(1), POLICY, tenantDomainName, "test-dom-change-msg-tenant:policy.tenancy.test-dom-change-msg.test-srv.admin", "putTenancy");
        
        // deleteTenancy events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteTenancy");
        zmsImpl.deleteTenancy(ctx, tenantDomainName, domainName + "." + serviceName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, tenantDomainName, "tenancy.test-dom-change-msg.test-srv.admin", "deleteTenancy");

        // putTenant events
        String tenantServiceName = serviceName + "-tenant";
        ServiceIdentity tenantService = zmsTestInitializer.createServiceObject(tenantDomainName, tenantServiceName,
            "http://localhost", "/usr/bin/test", "root", "users", "host1");
        zmsImpl.putServiceIdentity(zmsTestInitializer.getMockDomRsrcCtx(), tenantDomainName, tenantServiceName, zmsTestInitializer.getAuditRef(), false, tenantService);
        
        ctx = zmsTestInitializer.contextWithMockPrincipal("putTenant");
        Tenancy tenant = new Tenancy().setDomain(tenantDomainName).setService(domainName + "." + serviceName);
        zmsImpl.putTenant(ctx, domainName, serviceName, tenantDomainName, zmsTestInitializer.getAuditRef(), tenant);
        changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "putTenant");
        assertChange(changeMsgs.get(1), POLICY, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "putTenant");
        
        // deleteTenant events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteTenant");
        zmsImpl.deleteTenant(ctx, domainName, serviceName, tenantDomainName, zmsTestInitializer.getAuditRef());
        changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "deleteTenant");
        assertChange(changeMsgs.get(1), POLICY, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "deleteTenant");

        // putProviderResourceGroupRoles events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putProviderResourceGroupRoles");
        ProviderResourceGroupRoles providerRoles = new ProviderResourceGroupRoles()
            .setDomain(domainName).setService(serviceName)
            .setTenant(tenantDomainName).setRoles(Collections.singletonList(new TenantRoleAction().setRole("role").setAction("action")))
            .setResourceGroup("set1-test");
        zmsImpl.putProviderResourceGroupRoles(ctx, tenantDomainName, domainName, serviceName, "set1-test", zmsTestInitializer.getAuditRef(), providerRoles);
        changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), POLICY, tenantDomainName, "test-dom-change-msg-tenant:policy.tenancy.test-dom-change-msg.test-srv.admin", "putProviderResourceGroupRoles");
        assertChange(changeMsgs.get(1), ROLE, tenantDomainName, "test-dom-change-msg.test-srv.res_group.set1-test.role", "putProviderResourceGroupRoles");

        // putTenantResourceGroupRoles events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putTenantResourceGroupRoles");
        TenantResourceGroupRoles tenantRoles = new TenantResourceGroupRoles().setDomain(domainName)
            .setService(serviceName).setTenant(tenantDomainName)
            .setRoles(Collections.singletonList(new TenantRoleAction().setRole("role").setAction("action")))
            .setResourceGroup("set1-test");

        zmsImpl.putTenantResourceGroupRoles(ctx, domainName, serviceName, tenantDomainName, "set1-test", zmsTestInitializer.getAuditRef(), tenantRoles);

        changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "putTenantResourceGroupRoles");
        assertChange(changeMsgs.get(1), POLICY, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "putTenantResourceGroupRoles");

        // deleteTenantResourceGroupRoles events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteTenantResourceGroupRoles");
        zmsImpl.deleteTenantResourceGroupRoles(ctx, domainName, serviceName, tenantDomainName, "set1-test", zmsTestInitializer.getAuditRef());

        changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, domainName, "test-srv.tenant.test-dom-change-msg-tenant.res_group.set1-test.role", "deleteTenantResourceGroupRoles");
        assertChange(changeMsgs.get(1), POLICY, domainName, "test-srv.tenant.test-dom-change-msg-tenant.res_group.set1-test.role", "deleteTenantResourceGroupRoles");

        // deleteProviderResourceGroupRoles events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteProviderResourceGroupRoles");
        zmsImpl.deleteProviderResourceGroupRoles(ctx, tenantDomainName, domainName, serviceName, "set1-test", zmsTestInitializer.getAuditRef());
        changeMsgs = ctx.getDomainChangeMessages();
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), POLICY, tenantDomainName, "tenancy.test-dom-change-msg.test-srv.res_group.set1-test.role", "deleteProviderResourceGroupRoles");
        
        // deleteTenant events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteTenant");
        zmsImpl.deleteTenant(ctx, domainName, serviceName, tenantDomainName, zmsTestInitializer.getAuditRef());
        changeMsgs = ctx.getDomainChangeMessages();
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "deleteTenant");
        assertChange(changeMsgs.get(1), POLICY, domainName, "test-srv.tenant.test-dom-change-msg-tenant.admin", "deleteTenant");

        // deleteServiceIdentity events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteServiceIdentity");
        zmsImpl.deleteServiceIdentity(ctx, domainName, serviceName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), SERVICE, domainName, serviceName, "deleteServiceIdentity");

        // deleteDomainRoleMember events
        role = zmsTestInitializer.createRoleObject(domainName, "some-role", null, "user.user222", "user.todelete");
        zmsImpl.putRole(zmsTestInitializer.getMockDomRsrcCtx(), domainName, "some-role", zmsTestInitializer.getAuditRef(), false, role);
        
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteDomainRoleMember");
        zmsImpl.deleteDomainRoleMember(ctx, domainName, "user.todelete", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), ROLE, domainName, "some-role", "deleteDomainRoleMember");

        // putQuota events
        ctx = zmsTestInitializer.contextWithMockPrincipal("putQuota");
        Quota quota = new Quota().setName(domainName)
            .setRole(14).setRoleMember(15).setGroup(16);
        zmsImpl.putQuota(ctx, domainName, zmsTestInitializer.getAuditRef(), quota);
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), DOMAIN, domainName, domainName, "putQuota");

        // deleteQuota events
        ctx = zmsTestInitializer.contextWithMockPrincipal("deleteQuota");
        zmsImpl.deleteQuota(ctx, domainName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(ctx.getDomainChangeMessages(), DOMAIN, domainName, domainName, "deleteQuota");
        
        // postSubDomain events
        RsrcCtxWrapper subCtx = zmsTestInitializer.contextWithMockPrincipal("postSubDomain");

        SubDomain subDomain = zmsTestInitializer.createSubDomainObject("AddSubDom1", domainName,
            "Test Domain2", null, zmsTestInitializer.getAdminUser());
        zmsImpl.postSubDomain(subCtx,domainName, zmsTestInitializer.getAuditRef(), subDomain);
        assertSingleChangeMessage(subCtx.getDomainChangeMessages(), DOMAIN, "test-dom-change-msg.addsubdom1", "test-dom-change-msg.addsubdom1", "postSubDomain");

        // deleteSubDomain events
        RsrcCtxWrapper deleteCtx = zmsTestInitializer.contextWithMockPrincipal("deleteSubDomain");
        zmsImpl.deleteSubDomain(deleteCtx, domainName, "AddSubDom1", zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(deleteCtx.getDomainChangeMessages(), DOMAIN, "test-dom-change-msg.addsubdom1", "test-dom-change-msg.addsubdom1", "deleteSubDomain");

        // deleteTopLevelDomain events
        deleteCtx = zmsTestInitializer.contextWithMockPrincipal("deleteTopLevelDomain");
        zmsImpl.deleteTopLevelDomain(deleteCtx, domainName, zmsTestInitializer.getAuditRef());
        assertSingleChangeMessage(deleteCtx.getDomainChangeMessages(), DOMAIN, domainName, domainName, "deleteTopLevelDomain");

        zmsImpl.deleteSubDomain(zmsTestInitializer.getMockDomRsrcCtx(), "sys", "network", zmsTestInitializer.getAuditRef());
    }
    
    private void assertSingleChangeMessage(List<DomainChangeMessage> changeMsgs, DomainChangeMessage.ObjectType objType,
                                           String domainName, String objName, String apiName) {
        assertEquals(changeMsgs.size(), 1);
        assertChange(changeMsgs.get(0), objType, domainName, objName, apiName);
    }

    private void assertChange(DomainChangeMessage change, DomainChangeMessage.ObjectType objType,
                 String domainName, String objName, String apiName) {
        assertEquals(change.getObjectType(), objType);
        assertEquals(change.getDomainName(), domainName);
        assertEquals(change.getObjectName(), objName);
        assertEquals(change.getApiName(), apiName.toLowerCase(Locale.ROOT));
    }

    private void assertTemplateChanges(String domainName, List<DomainChangeMessage> changeMsgs, String templateApi) {
        assertEquals(changeMsgs.size(), 2);
        assertChange(changeMsgs.get(0), ROLE, domainName, "vip_admin", templateApi);
        assertChange(changeMsgs.get(1), POLICY, domainName, "vip_admin", templateApi);
    }

    @Test
    public void testInvalidPublisherFactory() {
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES, "topic1,topic2");
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS, "com.yahoo.athenz.common.messaging.NonExistingFactory");

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertEquals(zmsImpl.domainChangePublishers.size(), 0);

        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS);
    }

    @Test
    public void testInvalidPublisher() {
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES, "topic1,topic2");
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS, "com.yahoo.athenz.zms.FaultyDomainChangeFactory");

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertEquals(zmsImpl.domainChangePublishers.size(), 0);

        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS);
    }

    @Test
    public void testNoConfiguredTopic() {
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertEquals(zmsImpl.domainChangePublishers.size(), 0);
    }

    @Test
    public void testMultipleTopics() {
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS, "com.yahoo.athenz.common.messaging.MockDomainChangePublisherFactory");
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES, "topic1 , topic2");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertNotNull(zmsImpl.domainChangePublishers);
        List<String> topicNames = zmsImpl.domainChangePublishers.stream()
            .map(publisher -> ((MockDomainChangePublisher) publisher).getTopicName())
            .collect(Collectors.toList());
        assertThat(topicNames, containsInAnyOrder("topic1", "topic2"));
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS);
    }

    @Test
    public void testPublishEvent() {
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS, "com.yahoo.athenz.common.messaging.MockDomainChangePublisherFactory");
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES, "topic1");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertNotNull(zmsImpl.domainChangePublishers);
        List<String> topicNames = zmsImpl.domainChangePublishers.stream()
            .map(publisher -> ((MockDomainChangePublisher) publisher).getTopicName())
            .collect(Collectors.toList());
        assertThat(topicNames, containsInAnyOrder("topic1"));

        ResourceContext mockContext = Mockito.mock(ResourceContext.class);
        when(mockContext.getApiName()).thenReturn("apiName");
        when(mockContext.getDomainChangeMessages()).
            thenReturn(Collections.singletonList(new DomainChangeMessage()
                .setDomainName("domainName")
                .setObjectName("objectName")
                .setObjectType(DOMAIN)
                .setApiName("apiName")
                .setPublished(Instant.now().toEpochMilli())
                .setMessageId(java.util.UUID.randomUUID().toString())
            ));
        zmsImpl.publishChangeMessage(mockContext, 200);

        // verify publish messages
        MockDomainChangePublisher.Recorder evtRecorder = getEventRecorder(zmsImpl);
        ArgumentCaptor<DomainChangeMessage> evtArgumentCaptor = ArgumentCaptor.forClass(DomainChangeMessage.class);
        verify(evtRecorder, Mockito.times(1)).record(evtArgumentCaptor.capture());
        DomainChangeMessage actual = evtArgumentCaptor.getValue();
        assertEquals(actual.getDomainName(), "domainName");
        assertEquals(actual.getApiName(), "apiName");
        assertEquals(actual.getObjectType(), DOMAIN);
        assertEquals(actual.getObjectName(), "objectName");

        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS);
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
    }

    private MockDomainChangePublisher.Recorder getEventRecorder(ZMSImpl zmsImpl) {
        return ((MockDomainChangePublisher) zmsImpl.domainChangePublishers.get(0)).getRecorder();
    }
    
    @Test
    public void testPublisherNonSuccessErrorCode() {
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS, "com.yahoo.athenz.common.messaging.MockDomainChangePublisherFactory");
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES, "topic1 , topic2");
        
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        String apiName = "postTopLevelDomain";
        ResourceContext mockContext = Mockito.mock(ResourceContext.class);
        when(mockContext.getApiName()).thenReturn(apiName);
        when(mockContext.getDomainChangeMessages()).thenReturn(Collections.singletonList(new DomainChangeMessage()));
        zmsImpl.publishChangeMessage(mockContext, 500);

        // verify no publish messages
        MockDomainChangePublisher.Recorder evtRecorder = getEventRecorder(zmsImpl);
        ArgumentCaptor<DomainChangeMessage> evtArgumentCaptor = ArgumentCaptor.forClass(DomainChangeMessage.class);
        verify(evtRecorder, Mockito.times(0)).record(evtArgumentCaptor.capture());
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS);
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
    }
    
    @Test
    public void testEmptyTopicName() {
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS, "com.yahoo.athenz.common.messaging.MockDomainChangePublisherFactory");
        System.setProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES, "topic1 , , topic2");
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        assertNotNull(zmsImpl.domainChangePublishers);
        assertEquals(zmsImpl.domainChangePublishers.size(), 2);
        List<String> topicNames = zmsImpl.domainChangePublishers.stream()
            .map(publisher -> ((MockDomainChangePublisher) publisher).getTopicName())
            .collect(Collectors.toList());
        assertThat(topicNames, containsInAnyOrder("topic1", "topic2"));
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_PUBLISHER_FACTORY_CLASS);
        System.clearProperty(ZMS_PROP_DOMAIN_CHANGE_TOPIC_NAMES);
    }

    @Test
    public void testNoPublishers() {
        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        String apiName = "postTopLevelDomain";
        ResourceContext mockContext = Mockito.mock(ResourceContext.class);
        when(mockContext.getApiName()).thenReturn(apiName);
        when(mockContext.getDomainChangeMessages()).thenReturn(Collections.singletonList(new DomainChangeMessage()));

        assertEquals(zmsImpl.domainChangePublishers.size(), 0);
        zmsImpl.publishChangeMessage(mockContext, 200);
    }

    @Test
    public void testPublisherException() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        String apiName = "postTopLevelDomain";
        ResourceContext mockContext = Mockito.mock(ResourceContext.class);
        when(mockContext.getApiName()).thenReturn(apiName);
        when(mockContext.getDomainChangeMessages()).thenReturn(Collections.singletonList(new DomainChangeMessage()));

        MockDomainChangePublisher mockDomainChangePublisher = new MockDomainChangePublisher("domainChanges");
        mockDomainChangePublisher.setThrowPublishExceptions(true);
        zmsImpl.domainChangePublishers = new ArrayList<>();
        zmsImpl.domainChangePublishers.add(mockDomainChangePublisher);

        // make sure no exceptions are thrown since we should catch and log them
        zmsImpl.publishChangeMessage(mockContext, 200);
    }

    @Test
    public void testTimerMetricException() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        String apiName = "postTopLevelDomain";
        RsrcCtxWrapper mockContext = Mockito.mock(RsrcCtxWrapper.class);
        when(mockContext.getApiName()).thenReturn(apiName);
        when(mockContext.getTimerMetric()).thenThrow(new IllegalArgumentException());

        // make sure no exceptions are thrown since we should catch and log them
        zmsImpl.recordMetrics(mockContext, 200);
    }

    @Test
    public void testIsSysAdminRoleMemberNotFoundRole() {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();

        DBService dbService = Mockito.mock(DBService.class);
        when(dbService.getRole("sys.auth", "admin", false, true, false)).thenReturn(null);
        zmsImpl.dbService = dbService;

        assertFalse(zmsImpl.isSysAdminRoleMember("user.testadminuser"));
    }

    @Test
    public void testGetInfo() throws URISyntaxException, FileNotFoundException {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.serverInfo = null;

        RsrcCtxWrapper mockContext = Mockito.mock(RsrcCtxWrapper.class);
        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);
        when(mockRequest.isSecure()).thenReturn(true);
        when(mockContext.request()).thenReturn(mockRequest);
        ServletContext mockServletContext = Mockito.mock(ServletContext.class);
        when(mockContext.servletContext()).thenReturn(mockServletContext);

        FileInputStream inputStream = new FileInputStream(
                new File(getClass().getClassLoader().getResource("manifest.mf").toURI()));
        when(mockServletContext.getResourceAsStream("/META-INF/MANIFEST.MF")).thenReturn(inputStream);

        Info info = zmsImpl.getInfo(mockContext);
        assertNotNull(info);
        assertEquals(info.getImplementationVersion(), "1.11.0");
        assertEquals(info.getBuildJdkSpec(), "17");
        assertEquals(info.getImplementationTitle(), "zms");
        assertEquals(info.getImplementationVendor(), "athenz");

        // this should be no-op since we already have an info object

        zmsImpl.fetchInfoFromManifest(mockServletContext);

        // this should just return our previously generated info object

        info = zmsImpl.getInfo(mockContext);
        assertNotNull(info);
        assertEquals(info.getImplementationVersion(), "1.11.0");
        assertEquals(info.getBuildJdkSpec(), "17");
        assertEquals(info.getImplementationTitle(), "zms");
        assertEquals(info.getImplementationVendor(), "athenz");
    }

    @Test
    public void testGetInfoException() throws URISyntaxException, FileNotFoundException {

        ZMSImpl zmsImpl = zmsTestInitializer.zmsInit();
        zmsImpl.serverInfo = null;

        RsrcCtxWrapper mockContext = Mockito.mock(RsrcCtxWrapper.class);
        HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);
        when(mockRequest.isSecure()).thenReturn(true);
        when(mockContext.request()).thenReturn(mockRequest);
        ServletContext mockServletContext = Mockito.mock(ServletContext.class);
        when(mockContext.servletContext()).thenReturn(mockServletContext);
        when(mockServletContext.getResourceAsStream("/META-INF/MANIFEST.MF")).thenThrow(new IllegalArgumentException());

        Info info = zmsImpl.getInfo(mockContext);
        assertNotNull(info);
        assertNull(info.getImplementationVersion());
        assertNull(info.getBuildJdkSpec());
        assertNull(info.getImplementationTitle());
        assertNull(info.getImplementationVendor());
    }

    private void insertExpiredMembersToDB (ZMSImpl zms, ResourceContext ctx, String auditRef) {

        int memberPurgeExpiryDays = DELAY_PURGE_EXPIRED_MEMBERS_DAYS_DEFAULT + 150;

        List <RoleMember> roleMembers = new ArrayList<>();
        roleMembers.add(zmsTestInitializer.createRoleMemberWithExpiration("user.test1", true, memberPurgeExpiryDays));
        roleMembers.add(zmsTestInitializer.createRoleMemberWithExpiration("user.test2", true, memberPurgeExpiryDays - 10));
        roleMembers.add(zmsTestInitializer.createRoleMemberWithExpiration("user.test3", true, DELAY_PURGE_EXPIRED_MEMBERS_DAYS_DEFAULT - 1));
        roleMembers.add(zmsTestInitializer.createRoleMemberWithExpiration("user.test4", false, memberPurgeExpiryDays));
        roleMembers.add(new RoleMember().setMemberName("user.test5"));

        List <GroupMember> groupMembers = new ArrayList<>();
        groupMembers.add(zmsTestInitializer.createGroupMemberWithExpiration("user.test1", true, memberPurgeExpiryDays));
        groupMembers.add(zmsTestInitializer.createGroupMemberWithExpiration("user.test2", true, memberPurgeExpiryDays - 10));
        groupMembers.add(zmsTestInitializer.createGroupMemberWithExpiration("user.test3", true, DELAY_PURGE_EXPIRED_MEMBERS_DAYS_DEFAULT - 1));
        groupMembers.add(zmsTestInitializer.createGroupMemberWithExpiration("user.test4", false, memberPurgeExpiryDays));
        groupMembers.add(new GroupMember().setMemberName("user.test5"));

        // domain with configured member purge expiry days
        TopLevelDomain purgeExpiryDaysDom = zmsTestInitializer.createTopLevelDomainObject("test-domain1",
                "Test Domain1", "testOrg", zmsTestInitializer.getAdminUser(), memberPurgeExpiryDays);
        zms.postTopLevelDomain(ctx, auditRef, purgeExpiryDaysDom);

        Role role1 = zmsTestInitializer.createRoleObject("test-domain1", "role1", null, roleMembers);
        zms.putRole(ctx,"test-domain1", "role1", auditRef, false,  role1);

        Group group1 = zmsTestInitializer.createGroupObject("test-domain1", "group1", groupMembers);
        zms.putGroup(ctx,"test-domain1", "group1", auditRef, false,  group1);

        // domain with default member purge expiry days
        TopLevelDomain defaultPurgeExpiryDaysDom = zmsTestInitializer.createTopLevelDomainObject("test-domain2",
                "Test Domain2", "testOrg", zmsTestInitializer.getAdminUser());
        zms.postTopLevelDomain(ctx, auditRef, defaultPurgeExpiryDaysDom);

        Role role2 = zmsTestInitializer.createRoleObject("test-domain2", "role2", null, roleMembers);
        zms.putRole(ctx,"test-domain2", "role2", auditRef, false,  role2);

        Group group2 = zmsTestInitializer.createGroupObject("test-domain2", "group2", groupMembers);
        zms.putGroup(ctx,"test-domain2", "group2", auditRef, false,  group2);

        // domain disabled member purge expiry days
        TopLevelDomain disabledPurgeExpiryDaysDom = zmsTestInitializer.createTopLevelDomainObject("test-domain3",
                "Test Domain3", "testOrg", zmsTestInitializer.getAdminUser(), -1);
        zms.postTopLevelDomain(ctx, auditRef, disabledPurgeExpiryDaysDom);
        Role role3 = zmsTestInitializer.createRoleObject("test-domain3", "role3", null, roleMembers);
        zms.putRole(ctx,"test-domain3", "role3", auditRef, false,  role3);

        Group group3 = zmsTestInitializer.createGroupObject("test-domain3", "group3", groupMembers);
        zms.putGroup(ctx,"test-domain3", "group3", auditRef, false,  group3);
    }

    @Test
    public void testDeleteExpiredMembers() {
        ZMSImpl zms = zmsTestInitializer.getZms();
        ResourceContext ctx = zmsTestInitializer.getMockDomRsrcCtx();
        String auditRef = zmsTestInitializer.getAuditRef();

        insertExpiredMembersToDB(zms, ctx, auditRef);
        zms.deleteExpiredMembers(ctx, null, auditRef, false);

        Role role1 = zms.getRole(ctx, "test-domain1", "role1", null, null, null);
        Group group1 = zms.getGroup(ctx, "test-domain1", "group1", null, null);
        assertEquals(role1.getRoleMembers().size(), 4);
        assertEquals(group1.getGroupMembers().size(), 4);

        Role role2 = zms.getRole(ctx, "test-domain2", "role2", null, null, null);
        Group group2 = zms.getGroup(ctx, "test-domain2", "group2", null, null);
        assertEquals(role2.getRoleMembers().size(), 3);
        assertEquals(group2.getGroupMembers().size(), 3);

        Role role3 = zms.getRole(ctx, "test-domain3", "role3", null, null, null);
        Group group3 = zms.getGroup(ctx, "test-domain3", "group3", null, null);
        assertEquals(role3.getRoleMembers().size(), 5);
        assertEquals(group3.getGroupMembers().size(), 5);

        zms.deleteTopLevelDomain(ctx, "test-domain1", auditRef);
        zms.deleteTopLevelDomain(ctx, "test-domain2", auditRef);
        zms.deleteTopLevelDomain(ctx, "test-domain3", auditRef);
    }

    @Test
    public void testDeleteExpiredMembersRolesOnly() {
        ZMSImpl zms = zmsTestInitializer.getZms();
        ResourceContext ctx = zmsTestInitializer.getMockDomRsrcCtx();
        String auditRef = zmsTestInitializer.getAuditRef();

        insertExpiredMembersToDB(zms, ctx, auditRef);
        zms.deleteExpiredMembers(ctx, 1, auditRef, false);

        Role role1 = zms.getRole(ctx, "test-domain1", "role1", null, null, null);
        Group group1 = zms.getGroup(ctx, "test-domain1", "group1", null, null);
        assertEquals(role1.getRoleMembers().size(), 4);
        assertEquals(group1.getGroupMembers().size(), 5);

        Role role2 = zms.getRole(ctx, "test-domain2", "role2", null, null, null);
        Group group2 = zms.getGroup(ctx, "test-domain2", "group2", null, null);
        assertEquals(role2.getRoleMembers().size(), 3);
        assertEquals(group2.getGroupMembers().size(), 5);

        Role role3 = zms.getRole(ctx, "test-domain3", "role3", null, null, null);
        Group group3 = zms.getGroup(ctx, "test-domain3", "group3", null, null);
        assertEquals(role3.getRoleMembers().size(), 5);
        assertEquals(group3.getGroupMembers().size(), 5);

        zms.deleteTopLevelDomain(ctx, "test-domain1", auditRef);
        zms.deleteTopLevelDomain(ctx, "test-domain2", auditRef);
        zms.deleteTopLevelDomain(ctx, "test-domain3", auditRef);
    }

    @Test
    public void testDeleteExpiredMembersGroupsOnly() {
        ZMSImpl zms = zmsTestInitializer.getZms();
        ResourceContext ctx = zmsTestInitializer.getMockDomRsrcCtx();
        String auditRef = zmsTestInitializer.getAuditRef();

        insertExpiredMembersToDB(zms, ctx, auditRef);
        zms.deleteExpiredMembers(ctx, 2, auditRef, false);

        Role role1 = zms.getRole(ctx, "test-domain1", "role1", null, null, null);
        Group group1 = zms.getGroup(ctx, "test-domain1", "group1", null, null);
        assertEquals(role1.getRoleMembers().size(), 5);
        assertEquals(group1.getGroupMembers().size(), 4);

        Role role2 = zms.getRole(ctx, "test-domain2", "role2", null, null, null);
        Group group2 = zms.getGroup(ctx, "test-domain2", "group2", null, null);
        assertEquals(role2.getRoleMembers().size(), 5);
        assertEquals(group2.getGroupMembers().size(), 3);

        Role role3 = zms.getRole(ctx, "test-domain3", "role3", null, null, null);
        Group group3 = zms.getGroup(ctx, "test-domain3", "group3", null, null);
        assertEquals(role3.getRoleMembers().size(), 5);
        assertEquals(group3.getGroupMembers().size(), 5);

        zms.deleteTopLevelDomain(ctx, "test-domain1", auditRef);
        zms.deleteTopLevelDomain(ctx, "test-domain2", auditRef);
        zms.deleteTopLevelDomain(ctx, "test-domain3", auditRef);
    }

}
