// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_client is a generated GoMock package.
package client

import (
	reflect "reflect"

	msd "github.com/AthenZ/athenz/clients/go/msd"
	gomock "github.com/golang/mock/gomock"
)

// MockMsdClient is a mock of MsdClient interface.
type MockMsdClient struct {
	ctrl     *gomock.Controller
	recorder *MockMsdClientMockRecorder
}

// MockMsdClientMockRecorder is the mock recorder for MockMsdClient.
type MockMsdClientMockRecorder struct {
	mock *MockMsdClient
}

// NewMockMsdClient creates a new mock instance.
func NewMockMsdClient(ctrl *gomock.Controller) *MockMsdClient {
	mock := &MockMsdClient{ctrl: ctrl}
	mock.recorder = &MockMsdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsdClient) EXPECT() *MockMsdClientMockRecorder {
	return m.recorder
}

// PutWorkload mocks base method.
func (m *MockMsdClient) PutWorkload(domain, service string, options *msd.WorkloadOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutWorkload", domain, service, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutWorkload indicates an expected call of PutWorkload.
func (mr *MockMsdClientMockRecorder) PutWorkload(domain, service, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWorkload", reflect.TypeOf((*MockMsdClient)(nil).PutWorkload), domain, service, options)
}
