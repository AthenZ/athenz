//
// This file generated by rdl 1.5.2. Do not modify!
//
package com.yahoo.athenz.zts;


import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpEntity;
import org.apache.http.client.CookieStore;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;

import javax.net.ssl.HostnameVerifier;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;
import com.yahoo.rdl.Schema;

public class ZTSRDLGeneratedClient {

    private static final int DEFAULT_CLIENT_CONNECT_TIMEOUT_MS = 5000;
    private static final int DEFAULT_CLIENT_READ_TIMEOUT_MS = 30000;

    private String baseUrl;
    private String credsHeader;
    private String credsToken;

    private CloseableHttpClient client;
    private HttpContext httpContext;
    private ObjectMapper jsonMapper;

    protected CloseableHttpClient createHttpClient(HostnameVerifier hostnameVerifier) {
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(DEFAULT_CLIENT_CONNECT_TIMEOUT_MS)
                .setSocketTimeout(DEFAULT_CLIENT_READ_TIMEOUT_MS)
                .setRedirectsEnabled(false)
                .build();
        return HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setSSLHostnameVerifier(hostnameVerifier)
                .build();
    }

    private static class UriTemplateBuilder {
        private final String baseUrl;
        private String basePath;
        public UriTemplateBuilder(final String url, final String path) {
            baseUrl = url;
            basePath = path;
        }
        public UriTemplateBuilder resolveTemplate(final String key, final Object value) {
            basePath = basePath.replace("{" + key + "}", String.valueOf(value));
            return this;
        }
        public String getUri() {
            return baseUrl + basePath;
        }
    }

    public ZTSRDLGeneratedClient(final String url) {
        initClient(url, createHttpClient(null));
    }

    public ZTSRDLGeneratedClient(final String url, HostnameVerifier hostnameVerifier) {
        initClient(url, createHttpClient(hostnameVerifier));
    }

    public ZTSRDLGeneratedClient(final String url, CloseableHttpClient httpClient) {
        initClient(url, httpClient);
    }

    private void initClient(final String url, CloseableHttpClient httpClient) {
        baseUrl = url;
        client = httpClient;
        jsonMapper = new ObjectMapper();
        jsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void close() {
        try {
            client.close();
        } catch (IOException ignored) {
        }
    }

    public void addCredentials(final String header, final String token) {

        credsHeader = header;
        credsToken = token;

        if (header == null) {
            httpContext = null;
        } else if (header.startsWith("Cookie.")) {
            httpContext = new BasicHttpContext();
            CookieStore cookieStore = new BasicCookieStore();
            BasicClientCookie cookie = new BasicClientCookie(header.substring(7), token);
            cookie.setPath(baseUrl);
            cookieStore.addCookie(cookie);
            httpContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);
            credsHeader = null;
        }
    }

    public void setHttpClient(CloseableHttpClient httpClient) {
        client = httpClient;
    }

    public ResourceAccess getResourceAccess(String action, String resource, String domain, String checkPrincipal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/access/{action}/{resource}")
            .resolveTemplate("action", action)
            .resolveTemplate("resource", resource);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (domain != null) {
            uriBuilder.setParameter("domain", domain);
        }
        if (checkPrincipal != null) {
            uriBuilder.setParameter("principal", checkPrincipal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ResourceAccess.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourceAccess getResourceAccessExt(String action, String resource, String domain, String checkPrincipal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/access/{action}")
            .resolveTemplate("action", action);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (resource != null) {
            uriBuilder.setParameter("resource", resource);
        }
        if (domain != null) {
            uriBuilder.setParameter("domain", domain);
        }
        if (checkPrincipal != null) {
            uriBuilder.setParameter("principal", checkPrincipal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ResourceAccess.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentity getServiceIdentity(String domainName, String serviceName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service/{serviceName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("serviceName", serviceName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentityList getServiceIdentityList(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentityList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName, String keyId) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service/{serviceName}/publickey/{keyId}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("serviceName", serviceName)
            .resolveTemplate("keyId", keyId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), PublicKeyEntry.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public HostServices getHostServices(String host) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/host/{host}/services")
            .resolveTemplate("host", host);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), HostServices.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainSignedPolicyData getDomainSignedPolicyData(String domainName, String matchingTag, java.util.Map<String, java.util.List<String>> headers) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/signed_policy_data")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (matchingTag != null) {
            httpUriRequest.addHeader("If-None-Match", matchingTag);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
            case 304:
                if (headers != null) {
                    headers.put("tag", List.of(httpResponse.getFirstHeader("ETag").getValue()));
                }
                if (code == 304) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainSignedPolicyData.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public JWSPolicyData postSignedPolicyRequest(String domainName, SignedPolicyRequest request, String matchingTag, java.util.Map<String, java.util.List<String>> headers) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/signed")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(request), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (matchingTag != null) {
            httpUriRequest.addHeader("If-None-Match", matchingTag);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
            case 304:
                if (headers != null) {
                    headers.put("tag", List.of(httpResponse.getFirstHeader("ETag").getValue()));
                }
                if (code == 304) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), JWSPolicyData.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public RoleToken getRoleToken(String domainName, String role, Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/token")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (role != null) {
            uriBuilder.setParameter("role", role);
        }
        if (minExpiryTime != null) {
            uriBuilder.setParameter("minExpiryTime", String.valueOf(minExpiryTime));
        }
        if (maxExpiryTime != null) {
            uriBuilder.setParameter("maxExpiryTime", String.valueOf(maxExpiryTime));
        }
        if (proxyForPrincipal != null) {
            uriBuilder.setParameter("proxyForPrincipal", proxyForPrincipal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), RoleToken.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public RoleToken postRoleCertificateRequest(String domainName, String roleName, RoleCertificateRequest req) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/token")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(req), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), RoleToken.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Access getAccess(String domainName, String roleName, String principal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/access/domain/{domainName}/role/{roleName}/principal/{principal}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("principal", principal);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Access.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public RoleAccess getRoleAccess(String domainName, String principal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/access/domain/{domainName}/principal/{principal}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("principal", principal);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), RoleAccess.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public TenantDomains getTenantDomains(String providerDomainName, String userName, String roleName, String serviceName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/providerdomain/{providerDomainName}/user/{userName}")
            .resolveTemplate("providerDomainName", providerDomainName)
            .resolveTemplate("userName", userName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (roleName != null) {
            uriBuilder.setParameter("roleName", roleName);
        }
        if (serviceName != null) {
            uriBuilder.setParameter("serviceName", serviceName);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), TenantDomains.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Identity postInstanceRefreshRequest(String domain, String service, InstanceRefreshRequest req) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/instance/{domain}/{service}/refresh")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(req), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Identity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String role, Integer durationSeconds, String externalId) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{role}/creds")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("role", role);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (durationSeconds != null) {
            uriBuilder.setParameter("durationSeconds", String.valueOf(durationSeconds));
        }
        if (externalId != null) {
            uriBuilder.setParameter("externalId", externalId);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), AWSTemporaryCredentials.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public InstanceIdentity postInstanceRegisterInformation(InstanceRegisterInformation info, java.util.Map<String, java.util.List<String>> headers) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/instance");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(info), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 201:
                if (headers != null) {
                    headers.put("location", List.of(httpResponse.getFirstHeader("Location").getValue()));
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), InstanceIdentity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public InstanceIdentity postInstanceRefreshInformation(String provider, String domain, String service, String instanceId, InstanceRefreshInformation info) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/instance/{provider}/{domain}/{service}/{instanceId}")
            .resolveTemplate("provider", provider)
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("instanceId", instanceId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(info), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), InstanceIdentity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public InstanceRegisterToken getInstanceRegisterToken(String provider, String domain, String service, String instanceId) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/instance/{provider}/{domain}/{service}/{instanceId}/token")
            .resolveTemplate("provider", provider)
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("instanceId", instanceId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), InstanceRegisterToken.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public InstanceIdentity deleteInstanceIdentity(String provider, String domain, String service, String instanceId) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/instance/{provider}/{domain}/{service}/{instanceId}")
            .resolveTemplate("provider", provider)
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("instanceId", instanceId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public CertificateAuthorityBundle getCertificateAuthorityBundle(String name) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/cacerts/{name}")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), CertificateAuthorityBundle.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Status getStatus() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/status");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Status.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public SSHCertificates postSSHCertRequest(SSHCertRequest certRequest) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/sshcert");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(certRequest), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 201:
                return jsonMapper.readValue(httpResponseEntity.getContent(), SSHCertificates.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public OpenIDConfig getOpenIDConfig() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/.well-known/openid-configuration");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), OpenIDConfig.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public OAuthConfig getOAuthConfig() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/.well-known/oauth-authorization-server");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), OAuthConfig.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public JWKList getJWKList(Boolean rfc) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/oauth2/keys");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (rfc != null) {
            uriBuilder.setParameter("rfc", String.valueOf(rfc));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), JWKList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AccessTokenResponse postAccessTokenRequest(String request) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/oauth2/token");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(request, ContentType.create("application/x-www-form-urlencoded"));
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), AccessTokenResponse.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public OIDCResponse getOIDCResponse(String responseType, String clientId, String redirectUri, String scope, String state, String nonce, String keyType, Boolean fullArn, Integer expiryTime, String output, Boolean roleInAudClaim, java.util.Map<String, java.util.List<String>> headers) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/oauth2/auth");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (responseType != null) {
            uriBuilder.setParameter("response_type", responseType);
        }
        if (clientId != null) {
            uriBuilder.setParameter("client_id", clientId);
        }
        if (redirectUri != null) {
            uriBuilder.setParameter("redirect_uri", redirectUri);
        }
        if (scope != null) {
            uriBuilder.setParameter("scope", scope);
        }
        if (state != null) {
            uriBuilder.setParameter("state", state);
        }
        if (nonce != null) {
            uriBuilder.setParameter("nonce", nonce);
        }
        if (keyType != null) {
            uriBuilder.setParameter("keyType", keyType);
        }
        if (fullArn != null) {
            uriBuilder.setParameter("fullArn", String.valueOf(fullArn));
        }
        if (expiryTime != null) {
            uriBuilder.setParameter("expiryTime", String.valueOf(expiryTime));
        }
        if (output != null) {
            uriBuilder.setParameter("output", output);
        }
        if (roleInAudClaim != null) {
            uriBuilder.setParameter("roleInAudClaim", String.valueOf(roleInAudClaim));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
            case 302:
                if (headers != null) {
                    headers.put("location", List.of(httpResponse.getFirstHeader("Location").getValue()));
                }
                if (code == 302) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), OIDCResponse.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public RoleCertificate postRoleCertificateRequestExt(RoleCertificateRequest req) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/rolecert");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(req), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), RoleCertificate.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public RoleAccess getRolesRequireRoleCert(String principal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/role/cert");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), RoleAccess.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Workloads getWorkloadsByService(String domainName, String serviceName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service/{serviceName}/workloads")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("serviceName", serviceName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Workloads.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Workloads getWorkloadsByIP(String ip) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/workloads/{ip}")
            .resolveTemplate("ip", ip);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Workloads.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public TransportRules getTransportRules(String domainName, String serviceName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service/{serviceName}/transportRules")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("serviceName", serviceName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), TransportRules.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Info getInfo() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/sys/info");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Info.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ExternalCredentialsResponse postExternalCredentialsRequest(String provider, String domainName, ExternalCredentialsRequest request) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/external/{provider}/domain/{domainName}/creds")
            .resolveTemplate("provider", provider)
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(request), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ExternalCredentialsResponse.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Schema getRdlSchema() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/schema");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Schema.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, Object.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

}
