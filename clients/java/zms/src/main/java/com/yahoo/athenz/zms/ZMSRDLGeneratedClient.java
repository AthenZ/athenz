//
// This file generated by rdl 1.5.2. Do not modify!
//
package com.yahoo.athenz.zms;


import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpEntity;
import org.apache.http.client.CookieStore;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;

import javax.net.ssl.HostnameVerifier;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;
import com.yahoo.rdl.Schema;

public class ZMSRDLGeneratedClient {

    private static final int DEFAULT_CLIENT_CONNECT_TIMEOUT_MS = 5000;
    private static final int DEFAULT_CLIENT_READ_TIMEOUT_MS = 30000;

    private String baseUrl;
    private String credsHeader;
    private String credsToken;

    private CloseableHttpClient client;
    private HttpContext httpContext;
    private ObjectMapper jsonMapper;

    protected CloseableHttpClient createHttpClient(HostnameVerifier hostnameVerifier) {
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(DEFAULT_CLIENT_CONNECT_TIMEOUT_MS)
                .setSocketTimeout(DEFAULT_CLIENT_READ_TIMEOUT_MS)
                .setRedirectsEnabled(false)
                .build();
        return HttpClients.custom()
                .setDefaultRequestConfig(config)
                .setSSLHostnameVerifier(hostnameVerifier)
                .build();
    }

    private static class UriTemplateBuilder {
        private final String baseUrl;
        private String basePath;
        public UriTemplateBuilder(final String url, final String path) {
            baseUrl = url;
            basePath = path;
        }
        public UriTemplateBuilder resolveTemplate(final String key, final Object value) {
            basePath = basePath.replace("{" + key + "}", String.valueOf(value));
            return this;
        }
        public String getUri() {
            return baseUrl + basePath;
        }
    }

    public ZMSRDLGeneratedClient(final String url) {
        initClient(url, createHttpClient(null));
    }

    public ZMSRDLGeneratedClient(final String url, HostnameVerifier hostnameVerifier) {
        initClient(url, createHttpClient(hostnameVerifier));
    }

    public ZMSRDLGeneratedClient(final String url, CloseableHttpClient httpClient) {
        initClient(url, httpClient);
    }

    private void initClient(final String url, CloseableHttpClient httpClient) {
        baseUrl = url;
        client = httpClient;
        jsonMapper = new ObjectMapper();
        jsonMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    }

    public void close() {
        try {
            client.close();
        } catch (IOException ignored) {
        }
    }

    public void addCredentials(final String header, final String token) {

        credsHeader = header;
        credsToken = token;

        if (header == null) {
            httpContext = null;
        } else if (header.startsWith("Cookie.")) {
            httpContext = new BasicHttpContext();
            CookieStore cookieStore = new BasicCookieStore();
            BasicClientCookie cookie = new BasicClientCookie(header.substring(7), token);
            cookie.setPath(baseUrl);
            cookieStore.addCookie(cookie);
            httpContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);
            credsHeader = null;
        }
    }

    public void setHttpClient(CloseableHttpClient httpClient) {
        client = httpClient;
    }

    public Domain getDomain(String domain) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}")
            .resolveTemplate("domain", domain);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Domain.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainList getDomainList(Integer limit, String skip, String prefix, Integer depth, String account, Integer productNumber, String roleMember, String roleName, String subscription, String project, String tagKey, String tagValue, String businessService, String productId, String modifiedSince) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (limit != null) {
            uriBuilder.setParameter("limit", String.valueOf(limit));
        }
        if (skip != null) {
            uriBuilder.setParameter("skip", skip);
        }
        if (prefix != null) {
            uriBuilder.setParameter("prefix", prefix);
        }
        if (depth != null) {
            uriBuilder.setParameter("depth", String.valueOf(depth));
        }
        if (account != null) {
            uriBuilder.setParameter("account", account);
        }
        if (productNumber != null) {
            uriBuilder.setParameter("ypmid", String.valueOf(productNumber));
        }
        if (roleMember != null) {
            uriBuilder.setParameter("member", roleMember);
        }
        if (roleName != null) {
            uriBuilder.setParameter("role", roleName);
        }
        if (subscription != null) {
            uriBuilder.setParameter("azure", subscription);
        }
        if (project != null) {
            uriBuilder.setParameter("gcp", project);
        }
        if (tagKey != null) {
            uriBuilder.setParameter("tagKey", tagKey);
        }
        if (tagValue != null) {
            uriBuilder.setParameter("tagValue", tagValue);
        }
        if (businessService != null) {
            uriBuilder.setParameter("businessService", businessService);
        }
        if (productId != null) {
            uriBuilder.setParameter("productId", productId);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (modifiedSince != null) {
            httpUriRequest.addHeader("If-Modified-Since", modifiedSince);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Domain postTopLevelDomain(String auditRef, String resourceOwner, TopLevelDomain detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Domain.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Domain postSubDomain(String parent, String auditRef, String resourceOwner, SubDomain detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/subdomain/{parent}")
            .resolveTemplate("parent", parent);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Domain.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Domain postUserDomain(String name, String auditRef, String resourceOwner, UserDomain detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/userdomain/{name}")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.post()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Domain.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public TopLevelDomain deleteTopLevelDomain(String name, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public SubDomain deleteSubDomain(String parent, String name, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/subdomain/{parent}/{name}")
            .resolveTemplate("parent", parent)
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public UserDomain deleteUserDomain(String name, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/userdomain/{name}")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Domain putDomainMeta(String name, String auditRef, String resourceOwner, DomainMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/meta")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Domain putDomainSystemMeta(String name, String attribute, String auditRef, DomainMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/meta/system/{attribute}")
            .resolveTemplate("name", name)
            .resolveTemplate("attribute", attribute);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainTemplate putDomainTemplate(String name, String auditRef, DomainTemplate domainTemplate) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/template")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(domainTemplate), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainTemplate putDomainTemplateExt(String name, String template, String auditRef, DomainTemplate domainTemplate) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/template/{template}")
            .resolveTemplate("name", name)
            .resolveTemplate("template", template);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(domainTemplate), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainTemplateList getDomainTemplateList(String name) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/template")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainTemplateList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainTemplate deleteDomainTemplate(String name, String template, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/template/{template}")
            .resolveTemplate("name", name)
            .resolveTemplate("template", template);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainMetaStoreValidValuesList getDomainMetaStoreValidValuesList(String attributeName, String userName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/metastore");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (attributeName != null) {
            uriBuilder.setParameter("attribute", attributeName);
        }
        if (userName != null) {
            uriBuilder.setParameter("user", userName);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainMetaStoreValidValuesList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AuthHistoryDependencies getAuthHistoryDependencies(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/history/auth")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), AuthHistoryDependencies.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ExpiredMembers deleteExpiredMembers(Integer purgeResources, String auditRef, Boolean returnObj) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/expired-members");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (purgeResources != null) {
            uriBuilder.setParameter("purgeResources", String.valueOf(purgeResources));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), ExpiredMembers.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourceDomainOwnership putResourceDomainOwnership(String domainName, String auditRef, ResourceDomainOwnership resourceOwnership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/ownership")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(resourceOwnership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainDataCheck getDomainDataCheck(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/check")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainDataCheck.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Entity putEntity(String domainName, String entityName, String auditRef, Entity entity) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/entity/{entityName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("entityName", entityName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(entity), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Entity getEntity(String domainName, String entityName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/entity/{entityName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("entityName", entityName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Entity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Entity deleteEntity(String domainName, String entityName, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/entity/{entityName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("entityName", entityName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public EntityList getEntityList(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/entity")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), EntityList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public RoleList getRoleList(String domainName, Integer limit, String skip) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (limit != null) {
            uriBuilder.setParameter("limit", String.valueOf(limit));
        }
        if (skip != null) {
            uriBuilder.setParameter("skip", skip);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), RoleList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Roles getRoles(String domainName, Boolean members, String tagKey, String tagValue) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/roles")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (members != null) {
            uriBuilder.setParameter("members", String.valueOf(members));
        }
        if (tagKey != null) {
            uriBuilder.setParameter("tagKey", tagKey);
        }
        if (tagValue != null) {
            uriBuilder.setParameter("tagValue", tagValue);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Roles.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Role getRole(String domainName, String roleName, Boolean auditLog, Boolean expand, Boolean pending) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (auditLog != null) {
            uriBuilder.setParameter("auditLog", String.valueOf(auditLog));
        }
        if (expand != null) {
            uriBuilder.setParameter("expand", String.valueOf(expand));
        }
        if (pending != null) {
            uriBuilder.setParameter("pending", String.valueOf(pending));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Role.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Role putRole(String domainName, String roleName, String auditRef, Boolean returnObj, String resourceOwner, Role role) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(role), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Role.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Role deleteRole(String domainName, String roleName, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Membership getMembership(String domainName, String roleName, String memberName, String expiration) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (expiration != null) {
            uriBuilder.setParameter("expiration", expiration);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Membership.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainRoleMembers getOverdueReview(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/overdue")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainRoleMembers.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainRoleMembers getDomainRoleMembers(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/member")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainRoleMembers.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainRoleMember getPrincipalRoles(String principal, String domainName, Boolean expand) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/role");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        if (domainName != null) {
            uriBuilder.setParameter("domain", domainName);
        }
        if (expand != null) {
            uriBuilder.setParameter("expand", String.valueOf(expand));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainRoleMember.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Membership putMembership(String domainName, String roleName, String memberName, String auditRef, Boolean returnObj, String resourceOwner, Membership membership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(membership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Membership.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Membership deleteMembership(String domainName, String roleName, String memberName, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Membership deletePendingMembership(String domainName, String roleName, String memberName, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/pendingmember/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DefaultAdmins putDefaultAdmins(String domainName, String auditRef, DefaultAdmins defaultAdmins) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/admins")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(defaultAdmins), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Role putRoleSystemMeta(String domainName, String roleName, String attribute, String auditRef, RoleSystemMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/meta/system/{attribute}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("attribute", attribute);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Role putRoleMeta(String domainName, String roleName, String auditRef, String resourceOwner, RoleMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/meta")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Membership putMembershipDecision(String domainName, String roleName, String memberName, String auditRef, Membership membership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/member/{memberName}/decision")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(membership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Role putRoleReview(String domainName, String roleName, String auditRef, Boolean returnObj, String resourceOwner, Role role) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/review")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(role), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Role.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourceRoleOwnership putResourceRoleOwnership(String domainName, String roleName, String auditRef, ResourceRoleOwnership resourceOwnership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/role/{roleName}/ownership")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("roleName", roleName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(resourceOwnership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Groups getGroups(String domainName, Boolean members, String tagKey, String tagValue) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/groups")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (members != null) {
            uriBuilder.setParameter("members", String.valueOf(members));
        }
        if (tagKey != null) {
            uriBuilder.setParameter("tagKey", tagKey);
        }
        if (tagValue != null) {
            uriBuilder.setParameter("tagValue", tagValue);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Groups.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Group getGroup(String domainName, String groupName, Boolean auditLog, Boolean pending) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (auditLog != null) {
            uriBuilder.setParameter("auditLog", String.valueOf(auditLog));
        }
        if (pending != null) {
            uriBuilder.setParameter("pending", String.valueOf(pending));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Group.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Group putGroup(String domainName, String groupName, String auditRef, Boolean returnObj, String resourceOwner, Group group) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(group), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Group.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Group deleteGroup(String domainName, String groupName, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public GroupMembership getGroupMembership(String domainName, String groupName, String memberName, String expiration) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (expiration != null) {
            uriBuilder.setParameter("expiration", expiration);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), GroupMembership.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainGroupMember getPrincipalGroups(String principal, String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/group");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        if (domainName != null) {
            uriBuilder.setParameter("domain", domainName);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainGroupMember.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public GroupMembership putGroupMembership(String domainName, String groupName, String memberName, String auditRef, Boolean returnObj, String resourceOwner, GroupMembership membership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(membership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), GroupMembership.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public GroupMembership deleteGroupMembership(String domainName, String groupName, String memberName, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public GroupMembership deletePendingGroupMembership(String domainName, String groupName, String memberName, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/pendingmember/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Group putGroupSystemMeta(String domainName, String groupName, String attribute, String auditRef, GroupSystemMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/meta/system/{attribute}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName)
            .resolveTemplate("attribute", attribute);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Group putGroupMeta(String domainName, String groupName, String auditRef, String resourceOwner, GroupMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/meta")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public GroupMembership putGroupMembershipDecision(String domainName, String groupName, String memberName, String auditRef, GroupMembership membership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/member/{memberName}/decision")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(membership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Group putGroupReview(String domainName, String groupName, String auditRef, Boolean returnObj, String resourceOwner, Group group) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/review")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(group), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Group.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainGroupMembership getPendingDomainGroupMembersList(String principal, String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/pending_group_members");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        if (domainName != null) {
            uriBuilder.setParameter("domain", domainName);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainGroupMembership.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourceGroupOwnership putResourceGroupOwnership(String domainName, String groupName, String auditRef, ResourceGroupOwnership resourceOwnership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/group/{groupName}/ownership")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("groupName", groupName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(resourceOwnership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public PolicyList getPolicyList(String domainName, Integer limit, String skip) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (limit != null) {
            uriBuilder.setParameter("limit", String.valueOf(limit));
        }
        if (skip != null) {
            uriBuilder.setParameter("skip", skip);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), PolicyList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policies getPolicies(String domainName, Boolean assertions, Boolean includeNonActive, String tagKey, String tagValue) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policies")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (assertions != null) {
            uriBuilder.setParameter("assertions", String.valueOf(assertions));
        }
        if (includeNonActive != null) {
            uriBuilder.setParameter("includeNonActive", String.valueOf(includeNonActive));
        }
        if (tagKey != null) {
            uriBuilder.setParameter("tagKey", tagKey);
        }
        if (tagValue != null) {
            uriBuilder.setParameter("tagValue", tagValue);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Policies.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy getPolicy(String domainName, String policyName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Policy.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy putPolicy(String domainName, String policyName, String auditRef, Boolean returnObj, String resourceOwner, Policy policy) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(policy), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Policy.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy deletePolicy(String domainName, String policyName, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Assertion getAssertion(String domainName, String policyName, Long assertionId) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("assertionId", assertionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Assertion.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Assertion putAssertion(String domainName, String policyName, String auditRef, String resourceOwner, Assertion assertion) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(assertion), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Assertion.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Assertion putAssertionPolicyVersion(String domainName, String policyName, String version, String auditRef, String resourceOwner, Assertion assertion) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version/{version}/assertion")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("version", version);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(assertion), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Assertion.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Assertion deleteAssertion(String domainName, String policyName, Long assertionId, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("assertionId", assertionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Assertion deleteAssertionPolicyVersion(String domainName, String policyName, String version, Long assertionId, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version/{version}/assertion/{assertionId}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("version", version)
            .resolveTemplate("assertionId", assertionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AssertionConditions putAssertionConditions(String domainName, String policyName, Long assertionId, String auditRef, String resourceOwner, AssertionConditions assertionConditions) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}/conditions")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("assertionId", assertionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(assertionConditions), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), AssertionConditions.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AssertionCondition putAssertionCondition(String domainName, String policyName, Long assertionId, String auditRef, String resourceOwner, AssertionCondition assertionCondition) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}/condition")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("assertionId", assertionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(assertionCondition), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), AssertionCondition.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AssertionConditions deleteAssertionConditions(String domainName, String policyName, Long assertionId, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}/conditions")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("assertionId", assertionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public AssertionCondition deleteAssertionCondition(String domainName, String policyName, Long assertionId, Integer conditionId, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}/condition/{conditionId}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("assertionId", assertionId)
            .resolveTemplate("conditionId", conditionId);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public PolicyList getPolicyVersionList(String domainName, String policyName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), PolicyList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy getPolicyVersion(String domainName, String policyName, String version) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version/{version}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("version", version);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Policy.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy putPolicyVersion(String domainName, String policyName, PolicyOptions policyOptions, String auditRef, Boolean returnObj, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version/create")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(policyOptions), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), Policy.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy setActivePolicyVersion(String domainName, String policyName, PolicyOptions policyOptions, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version/active")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(policyOptions), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Policy deletePolicyVersion(String domainName, String policyName, String version, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/version/{version}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName)
            .resolveTemplate("version", version);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourcePolicyOwnership putResourcePolicyOwnership(String domainName, String policyName, String auditRef, ResourcePolicyOwnership resourceOwnership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/policy/{policyName}/ownership")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("policyName", policyName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(resourceOwnership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentity putServiceIdentity(String domain, String service, String auditRef, Boolean returnObj, String resourceOwner, ServiceIdentity detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (returnObj != null) {
            httpUriRequest.addHeader("Athenz-Return-Object", String.valueOf(returnObj));
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
            case 200:
                if (code == 204) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentity getServiceIdentity(String domain, String service) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentity.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentity deleteServiceIdentity(String domain, String service, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentities getServiceIdentities(String domainName, Boolean publickeys, Boolean hosts, String tagKey, String tagValue) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/services")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (publickeys != null) {
            uriBuilder.setParameter("publickeys", String.valueOf(publickeys));
        }
        if (hosts != null) {
            uriBuilder.setParameter("hosts", String.valueOf(hosts));
        }
        if (tagKey != null) {
            uriBuilder.setParameter("tagKey", tagKey);
        }
        if (tagValue != null) {
            uriBuilder.setParameter("tagValue", tagValue);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentities.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentityList getServiceIdentityList(String domainName, Integer limit, String skip) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (limit != null) {
            uriBuilder.setParameter("limit", String.valueOf(limit));
        }
        if (skip != null) {
            uriBuilder.setParameter("skip", skip);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentityList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public PublicKeyEntry getPublicKeyEntry(String domain, String service, String id) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/publickey/{id}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("id", id);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), PublicKeyEntry.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public PublicKeyEntry putPublicKeyEntry(String domain, String service, String id, String auditRef, String resourceOwner, PublicKeyEntry publicKeyEntry) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/publickey/{id}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("id", id);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(publicKeyEntry), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public PublicKeyEntry deletePublicKeyEntry(String domain, String service, String id, String auditRef, String resourceOwner) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/publickey/{id}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("id", id);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        if (resourceOwner != null) {
            httpUriRequest.addHeader("Athenz-Resource-Owner", resourceOwner);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentity putServiceIdentitySystemMeta(String domain, String service, String attribute, String auditRef, ServiceIdentitySystemMeta detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/meta/system/{attribute}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("attribute", attribute);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourceServiceIdentityOwnership putResourceServiceIdentityOwnership(String domainName, String service, String auditRef, ResourceServiceIdentityOwnership resourceOwnership) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/service/{service}/ownership")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(resourceOwnership), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Tenancy putTenancy(String domain, String service, String auditRef, Tenancy detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/tenancy/{service}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Tenancy deleteTenancy(String domain, String service, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/tenancy/{service}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Tenancy putTenant(String domain, String service, String tenantDomain, String auditRef, Tenancy detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/tenant/{tenantDomain}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("tenantDomain", tenantDomain);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Tenancy deleteTenant(String domain, String service, String tenantDomain, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/tenant/{tenantDomain}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("tenantDomain", tenantDomain);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public TenantResourceGroupRoles putTenantResourceGroupRoles(String domain, String service, String tenantDomain, String resourceGroup, String auditRef, TenantResourceGroupRoles detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("tenantDomain", tenantDomain)
            .resolveTemplate("resourceGroup", resourceGroup);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), TenantResourceGroupRoles.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public TenantResourceGroupRoles getTenantResourceGroupRoles(String domain, String service, String tenantDomain, String resourceGroup) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("tenantDomain", tenantDomain)
            .resolveTemplate("resourceGroup", resourceGroup);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), TenantResourceGroupRoles.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public TenantResourceGroupRoles deleteTenantResourceGroupRoles(String domain, String service, String tenantDomain, String resourceGroup, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domain}/service/{service}/tenant/{tenantDomain}/resourceGroup/{resourceGroup}")
            .resolveTemplate("domain", domain)
            .resolveTemplate("service", service)
            .resolveTemplate("tenantDomain", tenantDomain)
            .resolveTemplate("resourceGroup", resourceGroup);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ProviderResourceGroupRoles putProviderResourceGroupRoles(String tenantDomain, String provDomain, String provService, String resourceGroup, String auditRef, ProviderResourceGroupRoles detail) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
            .resolveTemplate("tenantDomain", tenantDomain)
            .resolveTemplate("provDomain", provDomain)
            .resolveTemplate("provService", provService)
            .resolveTemplate("resourceGroup", resourceGroup);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(detail), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ProviderResourceGroupRoles.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ProviderResourceGroupRoles getProviderResourceGroupRoles(String tenantDomain, String provDomain, String provService, String resourceGroup) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
            .resolveTemplate("tenantDomain", tenantDomain)
            .resolveTemplate("provDomain", provDomain)
            .resolveTemplate("provService", provService)
            .resolveTemplate("resourceGroup", resourceGroup);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ProviderResourceGroupRoles.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ProviderResourceGroupRoles deleteProviderResourceGroupRoles(String tenantDomain, String provDomain, String provService, String resourceGroup, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{tenantDomain}/provDomain/{provDomain}/provService/{provService}/resourceGroup/{resourceGroup}")
            .resolveTemplate("tenantDomain", tenantDomain)
            .resolveTemplate("provDomain", provDomain)
            .resolveTemplate("provService", provService)
            .resolveTemplate("resourceGroup", resourceGroup);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Access getAccess(String action, String resource, String domain, String checkPrincipal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/access/{action}/{resource}")
            .resolveTemplate("action", action)
            .resolveTemplate("resource", resource);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (domain != null) {
            uriBuilder.setParameter("domain", domain);
        }
        if (checkPrincipal != null) {
            uriBuilder.setParameter("principal", checkPrincipal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Access.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Access getAccessExt(String action, String resource, String domain, String checkPrincipal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/access/{action}")
            .resolveTemplate("action", action);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (resource != null) {
            uriBuilder.setParameter("resource", resource);
        }
        if (domain != null) {
            uriBuilder.setParameter("domain", domain);
        }
        if (checkPrincipal != null) {
            uriBuilder.setParameter("principal", checkPrincipal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Access.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ResourceAccessList getResourceAccessList(String principal, String action) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/resource");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        if (action != null) {
            uriBuilder.setParameter("action", action);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ResourceAccessList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public SignedDomains getSignedDomains(String domain, String metaOnly, String metaAttr, Boolean master, Boolean conditions, String matchingTag, java.util.Map<String, java.util.List<String>> headers) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/sys/modified_domains");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (domain != null) {
            uriBuilder.setParameter("domain", domain);
        }
        if (metaOnly != null) {
            uriBuilder.setParameter("metaonly", metaOnly);
        }
        if (metaAttr != null) {
            uriBuilder.setParameter("metaattr", metaAttr);
        }
        if (master != null) {
            uriBuilder.setParameter("master", String.valueOf(master));
        }
        if (conditions != null) {
            uriBuilder.setParameter("conditions", String.valueOf(conditions));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (matchingTag != null) {
            httpUriRequest.addHeader("If-None-Match", matchingTag);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
            case 304:
                if (headers != null) {
                    headers.put("tag", List.of(httpResponse.getFirstHeader("ETag").getValue()));
                }
                if (code == 304) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), SignedDomains.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public JWSDomain getJWSDomain(String name, Boolean signatureP1363Format, String matchingTag, java.util.Map<String, java.util.List<String>> headers) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/signed")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (signatureP1363Format != null) {
            uriBuilder.setParameter("signaturep1363format", String.valueOf(signatureP1363Format));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (matchingTag != null) {
            httpUriRequest.addHeader("If-None-Match", matchingTag);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
            case 304:
                if (headers != null) {
                    headers.put("tag", List.of(httpResponse.getFirstHeader("ETag").getValue()));
                }
                if (code == 304) {
                    return null;
                }
                return jsonMapper.readValue(httpResponseEntity.getContent(), JWSDomain.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public UserToken getUserToken(String userName, String serviceNames, Boolean header) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/user/{userName}/token")
            .resolveTemplate("userName", userName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (serviceNames != null) {
            uriBuilder.setParameter("services", serviceNames);
        }
        if (header != null) {
            uriBuilder.setParameter("header", String.valueOf(header));
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), UserToken.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public UserToken optionsUserToken(String userName, String serviceNames) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/user/{userName}/token")
            .resolveTemplate("userName", userName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (serviceNames != null) {
            uriBuilder.setParameter("services", serviceNames);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.options()
            .setUri(uriBuilder.build())
            .build();
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), UserToken.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServicePrincipal getServicePrincipal() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/principal");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServicePrincipal.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServerTemplateList getServerTemplateList() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/template");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServerTemplateList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Template getTemplate(String template) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/template/{template}")
            .resolveTemplate("template", template);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Template.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainTemplateDetailsList getDomainTemplateDetailsList(String name) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/templatedetails")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainTemplateDetailsList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainTemplateDetailsList getServerTemplateDetailsList() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/templatedetails");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainTemplateDetailsList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public UserList getUserList(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/user");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (domainName != null) {
            uriBuilder.setParameter("domain", domainName);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), UserList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public User deleteUser(String name, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/user/{name}")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainRoleMember deleteDomainRoleMember(String domainName, String memberName, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{domainName}/member/{memberName}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("memberName", memberName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Quota getQuota(String name) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/quota")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Quota.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Quota putQuota(String name, String auditRef, Quota quota) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/quota")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(quota), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Quota deleteQuota(String name, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/quota")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Status getStatus() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/status");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Status.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainRoleMembership getPendingDomainRoleMembersList(String principal, String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/pending_members");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        if (domainName != null) {
            uriBuilder.setParameter("domain", domainName);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainRoleMembership.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public UserAuthorityAttributeMap getUserAuthorityAttributeMap() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/authority/user/attribute");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), UserAuthorityAttributeMap.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Stats getStats(String name) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/domain/{name}/stats")
            .resolveTemplate("name", name);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Stats.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Stats getSystemStats() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/sys/stats");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Stats.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DependentService putDomainDependency(String domainName, String auditRef, DependentService service) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/dependency/domain/{domainName}")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpEntity httpEntity = new StringEntity(jsonMapper.writeValueAsString(service), ContentType.APPLICATION_JSON);
        HttpUriRequest httpUriRequest = RequestBuilder.put()
            .setUri(uriBuilder.build())
            .setEntity(httpEntity)
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public String deleteDomainDependency(String domainName, String service, String auditRef) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/dependency/domain/{domainName}/service/{service}")
            .resolveTemplate("domainName", domainName)
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.delete()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        if (auditRef != null) {
            httpUriRequest.addHeader("Y-Audit-Ref", auditRef);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 204:
                return null;
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ServiceIdentityList getDependentServiceList(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/dependency/domain/{domainName}")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ServiceIdentityList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DependentServiceResourceGroupList getDependentServiceResourceGroupList(String domainName) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/dependency/domain/{domainName}/resourceGroup")
            .resolveTemplate("domainName", domainName);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DependentServiceResourceGroupList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public DomainList getDependentDomainList(String service) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/dependency/service/{service}")
            .resolveTemplate("service", service);
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), DomainList.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ReviewObjects getRolesForReview(String principal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/review/role");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ReviewObjects.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public ReviewObjects getGroupsForReview(String principal) throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/review/group");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        if (principal != null) {
            uriBuilder.setParameter("principal", principal);
        }
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), ReviewObjects.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Info getInfo() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/sys/info");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Info.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, ResourceError.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

    public Schema getRdlSchema() throws URISyntaxException, IOException {
        UriTemplateBuilder uriTemplateBuilder = new UriTemplateBuilder(baseUrl, "/schema");
        URIBuilder uriBuilder = new URIBuilder(uriTemplateBuilder.getUri());
        HttpUriRequest httpUriRequest = RequestBuilder.get()
            .setUri(uriBuilder.build())
            .build();
        if (credsHeader != null) {
            httpUriRequest.addHeader(credsHeader, credsToken);
        }
        HttpEntity httpResponseEntity = null;
        try (CloseableHttpResponse httpResponse = client.execute(httpUriRequest, httpContext)) {
            int code = httpResponse.getStatusLine().getStatusCode();
            httpResponseEntity = httpResponse.getEntity();
            switch (code) {
            case 200:
                return jsonMapper.readValue(httpResponseEntity.getContent(), Schema.class);
            default:
                final String errorData = (httpResponseEntity == null) ? null : EntityUtils.toString(httpResponseEntity);
                throw (errorData != null && !errorData.isEmpty())
                    ? new ResourceException(code, jsonMapper.readValue(errorData, Object.class))
                    : new ResourceException(code);
            }
        } finally {
            EntityUtils.consumeQuietly(httpResponseEntity);
        }
    }

}
