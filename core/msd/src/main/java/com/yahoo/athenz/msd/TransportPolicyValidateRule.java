//
// This file generated by rdl 1.5.2. Do not modify!
//

package com.yahoo.athenz.msd;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.List;
import com.yahoo.rdl.*;

//
// TransportPolicyValidateRule - Transport policy containing ingress and egress
// rules
//
@JsonIgnoreProperties(ignoreUnknown = true)
public class TransportPolicyValidateRule {
    public List<TransportPolicyPeer> source;
    public List<TransportPolicyPeer> destination;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public List<String> instances;
    public TransportPolicyTrafficDirection trafficDirection;

    public TransportPolicyValidateRule setSource(List<TransportPolicyPeer> source) {
        this.source = source;
        return this;
    }
    public List<TransportPolicyPeer> getSource() {
        return source;
    }
    public TransportPolicyValidateRule setDestination(List<TransportPolicyPeer> destination) {
        this.destination = destination;
        return this;
    }
    public List<TransportPolicyPeer> getDestination() {
        return destination;
    }
    public TransportPolicyValidateRule setInstances(List<String> instances) {
        this.instances = instances;
        return this;
    }
    public List<String> getInstances() {
        return instances;
    }
    public TransportPolicyValidateRule setTrafficDirection(TransportPolicyTrafficDirection trafficDirection) {
        this.trafficDirection = trafficDirection;
        return this;
    }
    public TransportPolicyTrafficDirection getTrafficDirection() {
        return trafficDirection;
    }

    @Override
    public boolean equals(Object another) {
        if (this != another) {
            if (another == null || another.getClass() != TransportPolicyValidateRule.class) {
                return false;
            }
            TransportPolicyValidateRule a = (TransportPolicyValidateRule) another;
            if (source == null ? a.source != null : !source.equals(a.source)) {
                return false;
            }
            if (destination == null ? a.destination != null : !destination.equals(a.destination)) {
                return false;
            }
            if (instances == null ? a.instances != null : !instances.equals(a.instances)) {
                return false;
            }
            if (trafficDirection == null ? a.trafficDirection != null : !trafficDirection.equals(a.trafficDirection)) {
                return false;
            }
        }
        return true;
    }
}
