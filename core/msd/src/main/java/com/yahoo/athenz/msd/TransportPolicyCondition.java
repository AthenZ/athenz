//
// This file generated by rdl 1.5.2. Do not modify!
//

package com.yahoo.athenz.msd;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.List;
import com.yahoo.rdl.*;

//
// TransportPolicyCondition - Transport policy condition. Used to specify
// additional restrictions for the subject of a transport policy
//
@JsonIgnoreProperties(ignoreUnknown = true)
public class TransportPolicyCondition {
    public TransportPolicyEnforcementState enforcementState;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public List<String> instances;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public List<TransportPolicyScope> scope;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public List<TransportPolicySubjectSelectorRequirement> additionalConditions;

    public TransportPolicyCondition setEnforcementState(TransportPolicyEnforcementState enforcementState) {
        this.enforcementState = enforcementState;
        return this;
    }
    public TransportPolicyEnforcementState getEnforcementState() {
        return enforcementState;
    }
    public TransportPolicyCondition setInstances(List<String> instances) {
        this.instances = instances;
        return this;
    }
    public List<String> getInstances() {
        return instances;
    }
    public TransportPolicyCondition setScope(List<TransportPolicyScope> scope) {
        this.scope = scope;
        return this;
    }
    public List<TransportPolicyScope> getScope() {
        return scope;
    }
    public TransportPolicyCondition setAdditionalConditions(List<TransportPolicySubjectSelectorRequirement> additionalConditions) {
        this.additionalConditions = additionalConditions;
        return this;
    }
    public List<TransportPolicySubjectSelectorRequirement> getAdditionalConditions() {
        return additionalConditions;
    }

    @Override
    public boolean equals(Object another) {
        if (this != another) {
            if (another == null || another.getClass() != TransportPolicyCondition.class) {
                return false;
            }
            TransportPolicyCondition a = (TransportPolicyCondition) another;
            if (enforcementState == null ? a.enforcementState != null : !enforcementState.equals(a.enforcementState)) {
                return false;
            }
            if (instances == null ? a.instances != null : !instances.equals(a.instances)) {
                return false;
            }
            if (scope == null ? a.scope != null : !scope.equals(a.scope)) {
                return false;
            }
            if (additionalConditions == null ? a.additionalConditions != null : !additionalConditions.equals(a.additionalConditions)) {
                return false;
            }
        }
        return true;
    }
}
