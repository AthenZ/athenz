//
// This file generated by rdl 1.5.2. Do not modify!
//

package com.yahoo.athenz.msd;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.List;
import com.yahoo.rdl.*;

//
// WorkloadRequests - request type to search all workloads for a list of
// services grouped by domains
//
@JsonIgnoreProperties(ignoreUnknown = true)
public class WorkloadRequests {
    public List<WorkloadRequest> workloadRequest;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public Boolean fetchStaticTypeWorkloads;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public Boolean fetchDynamicTypeWorkloads;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public List<StaticWorkloadType> applicableStaticTypes;
    @RdlOptional
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    public Boolean resolveStaticWorkloads;

    public WorkloadRequests setWorkloadRequest(List<WorkloadRequest> workloadRequest) {
        this.workloadRequest = workloadRequest;
        return this;
    }
    public List<WorkloadRequest> getWorkloadRequest() {
        return workloadRequest;
    }
    public WorkloadRequests setFetchStaticTypeWorkloads(Boolean fetchStaticTypeWorkloads) {
        this.fetchStaticTypeWorkloads = fetchStaticTypeWorkloads;
        return this;
    }
    public Boolean getFetchStaticTypeWorkloads() {
        return fetchStaticTypeWorkloads;
    }
    public WorkloadRequests setFetchDynamicTypeWorkloads(Boolean fetchDynamicTypeWorkloads) {
        this.fetchDynamicTypeWorkloads = fetchDynamicTypeWorkloads;
        return this;
    }
    public Boolean getFetchDynamicTypeWorkloads() {
        return fetchDynamicTypeWorkloads;
    }
    public WorkloadRequests setApplicableStaticTypes(List<StaticWorkloadType> applicableStaticTypes) {
        this.applicableStaticTypes = applicableStaticTypes;
        return this;
    }
    public List<StaticWorkloadType> getApplicableStaticTypes() {
        return applicableStaticTypes;
    }
    public WorkloadRequests setResolveStaticWorkloads(Boolean resolveStaticWorkloads) {
        this.resolveStaticWorkloads = resolveStaticWorkloads;
        return this;
    }
    public Boolean getResolveStaticWorkloads() {
        return resolveStaticWorkloads;
    }

    @Override
    public boolean equals(Object another) {
        if (this != another) {
            if (another == null || another.getClass() != WorkloadRequests.class) {
                return false;
            }
            WorkloadRequests a = (WorkloadRequests) another;
            if (workloadRequest == null ? a.workloadRequest != null : !workloadRequest.equals(a.workloadRequest)) {
                return false;
            }
            if (fetchStaticTypeWorkloads == null ? a.fetchStaticTypeWorkloads != null : !fetchStaticTypeWorkloads.equals(a.fetchStaticTypeWorkloads)) {
                return false;
            }
            if (fetchDynamicTypeWorkloads == null ? a.fetchDynamicTypeWorkloads != null : !fetchDynamicTypeWorkloads.equals(a.fetchDynamicTypeWorkloads)) {
                return false;
            }
            if (applicableStaticTypes == null ? a.applicableStaticTypes != null : !applicableStaticTypes.equals(a.applicableStaticTypes)) {
                return false;
            }
            if (resolveStaticWorkloads == null ? a.resolveStaticWorkloads != null : !resolveStaticWorkloads.equals(a.resolveStaticWorkloads)) {
                return false;
            }
        }
        return true;
    }

    //
    // sets up the instance according to its default field values, if any
    //
    public WorkloadRequests init() {
        if (fetchStaticTypeWorkloads == null) {
            fetchStaticTypeWorkloads = true;
        }
        if (fetchDynamicTypeWorkloads == null) {
            fetchDynamicTypeWorkloads = true;
        }
        if (resolveStaticWorkloads == null) {
            resolveStaticWorkloads = false;
        }
        return this;
    }
}
