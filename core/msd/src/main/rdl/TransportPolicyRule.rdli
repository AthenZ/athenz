// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

// TransportPolicyRule types
include "TransportPolicyRule.tdl";
include "Names.tdl";

// API endpoint to get the transport policy rules defined in Athenz
resource TransportPolicyRules GET "/transportpolicies" {
    authenticate;
    String matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any policies modified since this time
    String tag (header="ETag", out); //The current latest modification timestamp is returned in this header
    expected OK, NOT_MODIFIED;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// API to validate micro-segmentation policies against network policies

resource TransportPolicyValidationResponse POST "/transportpolicy/validate" (name=validateTransportPolicy) {
    TransportPolicyValidationRequest transportPolicy ; // Struct representing micro-segmentation policy entered by the user
    expected OK;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// API to get transport policy validation response for transport policies of a domain
resource TransportPolicyValidationResponseList GET "/domain/{domainName}/transportpolicy/validationstatus" (name=getTransportPolicyValidationStatus) {
    DomainName domainName; //name of the domain
    expected OK;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// API endpoint to get the transport policy rules defined in Athenz for a given domain
resource TransportPolicyRules GET "/domain/{domainName}/transportpolicies" (name=getTransportPolicyRulesByDomain) {
    DomainName domainName; //name of the domain
    authorize ("msd.GetNetworkPolicy", "{domainName}:domain");
    String matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any policies modified since this time
    String tag (header="ETag", out); //The current latest modification timestamp is returned in this header
    expected OK, NOT_MODIFIED;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// This API endpoint facilitates the creation or update of a transport policy for a specified domain and service. It is designed exclusively for the purpose of creating or updating transport policies, and does not support mixed-case scenarios.
// Once a transport policy is established, the destination service, protocol, and both source and destination ports become non-editable. To modify any of these fields, it is necessary to create a new policy and delete the old one.
resource TransportPolicyRules PUT "/domain/{domainName}/service/{serviceName}/transportpolicy" (name=putTransportPolicy) {
    DomainName domainName; //name of the domain
    EntityName serviceName; //Name of the service
    String     auditRef (header="Y-Audit-Ref"); // Audit param required(not empty) if domain auditEnabled is true.
    TransportPolicyRequest payload; //Struct representing input transport policy
    authorize ("msd.UpdateNetworkPolicy", "{domainName}:service.{serviceName}");
    expected NO_CONTENT, OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// API endpoint to get the transport policy rules defined in Athenz for a given domain and service
resource TransportPolicyRules GET "/domain/{domainName}/service/{serviceName}/transportpolicies" (name=getTransportPolicyRulesByService) {
    DomainName domainName; //name of the domain
    EntityName serviceName; //Name of the service
    String     matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any policies modified since this time
    String tag (header="ETag", out); //The current latest modification timestamp is returned in this header
    authorize ("msd.GetNetworkPolicy", "{domainName}:service.{serviceName}");
    expected OK, NOT_MODIFIED;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// API endpoint to delete the transport policy
// Upon successful completion of this delete request, the server will return NO_CONTENT status code without any data
// (no object will be returned).
resource TransportPolicyRules DELETE "/domain/{domainName}/service/{serviceName}/transportpolicy/{id}" (name=deleteTransportPolicy) {
    DomainName domainName; // Name of the domain
    EntityName serviceName; // Name of the service
    Int64      id; // Id of the assertion representing the transport policy
    String     auditRef (header="Y-Audit-Ref"); // Audit param required(not empty) if domain auditEnabled is true.
    authorize("msd.DeleteNetworkPolicy", "{domainName}:service.{serviceName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}
