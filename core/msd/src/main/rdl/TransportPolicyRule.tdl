// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

include "Names.tdl";

// Types of transport policy enforcement states
type TransportPolicyEnforcementState Enum {
    ENFORCE,
    REPORT
}

// Types of transport policy protocols
type TransportPolicyProtocol Enum {
    TCP,
    UDP
}

// Validation Status of transport policy vs network policy
type TransportPolicyValidationStatus Enum {
   VALID,
   INVALID,
   PARTIAL
}

// Types of transport policy traffic direction
type TransportPolicyTrafficDirection Enum {
   INGRESS,
   EGRESS
}

// Scope of transport policy
type TransportPolicyScope Enum {
   ALL,
   ONPREM,
   AWS,
   GCP
}

// Subject for a transport policy
type TransportPolicySubject Struct {
    TransportPolicySubjectDomainName domainName; // Name of the domain
    TransportPolicySubjectServiceName serviceName; // Name of the service
    TransportPolicySubjectExternal externalPeer (optional); // External peer ( not in Athenz )
}

// A subject selector requirement is a selector that contains value, a key, and an operator that relates the key and value.
type TransportPolicySubjectSelectorRequirement Struct {
    String key; //key that the selector applies to
    String operator; //Operator that is applied to the key and value
    String value; //Value that the selector applies to
}

// Transport policy condition. Used to specify additional restrictions for the subject of a transport policy
type TransportPolicyCondition Struct {
    TransportPolicyEnforcementState enforcementState; // State of transport policy enforcement ( ENFORCE / REPORT )
    Array<String> instances (optional); // Acts as restrictions. If present, this transport policy should be restricted to only mentioned instances.
    Array<TransportPolicyScope> scope (optional); // Scope of transport policy
    Array<TransportPolicySubjectSelectorRequirement> additionalConditions (optional); // List of any additional conditions
}

// generic policy port. Will be used by TransportPolicyPort and NetworkPolicyPort structs
type PolicyPort Struct {
    Int32 port; // Start port of the port range. port and endPort will have same values for a single port definition.
    Int32 endPort; // End port of the port range. port and endPort will have same values for a single port definition.
}

// Transport policy port
type TransportPolicyPort PolicyPort {
    TransportPolicyProtocol protocol; // Protocol for this transport policy
}


// Selector for the subject of a transport policy
type TransportPolicyMatch Struct {
    TransportPolicySubject athenzService; // Subject where this transport policy applies
    Array<TransportPolicyCondition> conditions; // List of additional requirements for restrictions. Requirements are ANDed.
}

// Source or destination for a transport policy
type TransportPolicyPeer Struct {
    Array<TransportPolicySubject> athenzServices; // List of transport policy subjects
    Array<TransportPolicyPort> ports; // List of network traffic port part of this transport policy
}

// Entity to which a transport policy applies. Describes the subject and port(s) for a transport policy.
type TransportPolicyEntitySelector Struct {
    TransportPolicyMatch match; //Requirements for selecting the subject for this transport policy.
    Array<TransportPolicyPort> ports; // List of network traffic port of the subject eligible for the transport policy
}

// Transport policy ingress rule
type TransportPolicyIngressRule Struct {
    Int64 id; // Assertion id associated with this transport policy
    Timestamp lastModified; // Last modification timestamp of this transport policy
    TransportPolicyEntitySelector entitySelector; // Entity to which this transport policy applies
    TransportPolicyPeer from (optional); // Source of network traffic
}

// Transport policy egress rule
type TransportPolicyEgressRule Struct {
    Int64 id; // Assertion id associated with this transport policy
    Timestamp lastModified; // Last modification timestamp of this transport policy
    TransportPolicyEntitySelector entitySelector; // Entity to which this transport policy applies
    TransportPolicyPeer to (optional); // Destination of network traffic
}

// Transport policy containing ingress and egress rules
type TransportPolicyRules Struct {
    Array<TransportPolicyIngressRule> ingress; // List of ingress rules
    Array<TransportPolicyEgressRule> egress; // List of egress rules
}

// Transport policy request object to be validated
type TransportPolicyValidationRequest Struct {
   TransportPolicyEntitySelector entitySelector; // Describes the entity to which this transport policy applies
   TransportPolicyPeer peer; // source or destination of the network traffic depending on direction
   Int64 id (optional); // If present, assertion id associated with this transport policy
   TransportPolicyTrafficDirection trafficDirection;
}

// Response object of transport policy rule validation
type TransportPolicyValidationResponse Struct {
  TransportPolicyValidationStatus status;
  Array<string> errors (optional);
  Timestamp updateTime (optional); // most recent update timestamp in the backend
  Int64 id (optional); // If present, assertion id associated with the transport policy
}

// List of TransportPolicyValidationResponse
type TransportPolicyValidationResponseList Struct {
    Array<TransportPolicyValidationResponse> responseList; //list of transport policy validation response
}

// Input to create a transport policy
type TransportPolicyRequest Struct {
    TransportPolicyTrafficDirection direction; //Direction of network traffic
    EntityName identifier; //Policy Identifier
    TransportPolicySubject subject; //Subject for the policy
    Array<TransportPolicyCondition> conditions (optional); //List of transport policy conditions
    Array<TransportPolicyPort> sourcePorts; //List of source network traffic ports
    Array<TransportPolicyPort> destinationPorts; //List of destination network traffic ports
    Array<TransportPolicySubject> peers (optional); //Source or destination of the policy depending on direction
}