// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

//Workload types
include "Workload.tdl";
include "Names.tdl";

resource Workloads GET "/domain/{domainName}/service/{serviceName}/workloads" (name=getWorkloadsByService) {
    DomainName domainName; // name of the domain
    EntityName serviceName; // name of the service
    String matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any workloads modified since this time
    String tag (header="ETag", out); //The current latest modification timestamp is returned in this header
    expected OK, NOT_MODIFIED;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

resource Workloads GET "/workloads/{ip}" (name=getWorkloadsByIP) {
    String ip; // ip address to query
    String matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any workloads modified since this time
    String tag (header="ETag", out); //The current latest modification timestamp is returned in this header
    expected OK, NOT_MODIFIED;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Api to perform a dynamic workload PUT operation for a domain and service
// Workload details are obtained from the service certificate
resource WorkloadOptions PUT "/domain/{domainName}/service/{serviceName}/workload/dynamic" (name=putDynamicWorkload) {
    DomainName domainName; // name of the domain
    EntityName serviceName; // name of the service
    WorkloadOptions options; // metadata about the dynamic workload
    authenticate;
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Api to perform a dynamic workload DELETE operation for a domain, service, and instance
resource WorkloadOptions DELETE "/domain/{domainName}/service/{serviceName}/instanceId/{instanceId}/workload/dynamic" (name=deleteDynamicWorkload) {
    DomainName domainName; // name of the domain
    EntityName serviceName; // name of the service
    PathElement instanceId; //unique instance id within provider's namespace
    authorize ("update", "{domainName}:service.{serviceName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Api to perform a static workload PUT operation for a domain and service
resource StaticWorkload PUT "/domain/{domainName}/service/{serviceName}/workload/static" (name=putStaticWorkload) {
    DomainName domainName; // name of the domain
    EntityName serviceName; // name of the service
    StaticWorkload staticWorkload; // Struct representing static workload entered by the user
    authorize ("update", "{domainName}:service.{serviceName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Api to perform a static workload DELETE operation for a domain, service, and instance
resource StaticWorkload DELETE "/domain/{domainName}/service/{serviceName}/name/{name}/workload/static" (name=deleteStaticWorkload) {
    DomainName domainName; // name of the domain
    EntityName serviceName; // name of the service
    StaticWorkloadName name; // name associated with the workload. In most cases will be a FQDN
    authorize ("update", "{domainName}:service.{serviceName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Api to retrieve static workload services by its type. type=StaticWorkloadType in String representation 
resource StaticWorkloadServices GET "/services/{serviceType}?value={serviceValue}" (name=getStaticWorkloadServicesByType) {
    EntityName serviceType;  // type of the service
    EntityName serviceValue (optional); // specific service value
    expected OK, NOT_MODIFIED;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

resource Workloads GET "/domain/{domainName}/workloads" (name=getWorkloadsByDomain) {
    DomainName domainName; // name of the domain
    String matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any workloads modified since this time
    String tag (header="ETag", out); //The current latest modification timestamp is returned in this header
    expected OK, NOT_MODIFIED;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Read only endpoint to fetch workloads for a list of services grouped by domains
resource BulkWorkloadResponse POST "/workloads" (name=getWorkloadsByDomainAndService) {
    BulkWorkloadRequest request;                 // workload search request
    String matchingTag (header="If-None-Match"); //Retrieved from the previous request, this timestamp specifies to the server to return any workloads modified since this time
    String tag (header="ETag", out);             //The current latest modification timestamp is returned in this header
    expected OK, NOT_MODIFIED;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}