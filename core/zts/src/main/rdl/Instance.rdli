// Copyright 2017 Yahoo Inc.
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

include "Names.tdl";

type InstanceRegisterInformation Struct {
    ServiceName provider; //the provider service name (i.e. "aws.us-west-2", "sys.openstack.cluster1")
    DomainName domain; //the domain of the instance
    SimpleName service; //the service this instance is supposed to run
    String attestationData; //identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc.
    String csr; //the Certificate Signing Request for the expected X.509 certificate in the response
    String ssh (optional); //if present, return an SSH host certificate. Format is JSON.
    Bool token (optional); //if true, return a service token signed by ZTS for this service
    Int32 expiryTime (optional); //expiry time in minutes for the certificate (server enforces max expiry)
    DomainName hostname (optional); //optional hostname in case included in the csr SAN dnsName attribute
    Array<DomainName> hostCnames (optional); // optional host CNAMEs included in the csr SAN dnsName attribute
}

type InstanceRefreshInformation Struct {
    String attestationData (optional); //identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc.
    String csr (optional); //the Certificate Signing Request for the expected X.509 certificate in the response
    String ssh (optional); //if present, return an SSH host certificate. Format is JSON.
    Bool token (optional); //if true, return a service token signed by ZTS for this service
    Int32 expiryTime (optional); //expiry time in minutes for the certificate (server enforces max expiry)
    DomainName hostname (optional); //optional hostname in case included in the csr SAN dnsName attribute
    Array<DomainName> hostCnames (optional); // optional host CNAMEs included in the csr SAN dnsName attribute
}

type InstanceRegisterToken Struct {
    ServiceName provider; //provider service name
    DomainName domain; //the domain of the instance
    SimpleName service; //the service this instance is supposed to run
    String attestationData; //identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc.
    Map<String,String> attributes (optional); //additional non-signed attributes that assist in attestation. I.e. "keyId", "accessKey", etc
}

type InstanceIdentity Struct {
    ServiceName provider; //the provider service name (i.e. "aws.us-west-2", "sys.openstack.cluster1")
    ServiceName name; //name of the identity, fully qualified, i.e. my.domain.service1
    PathElement instanceId; //unique instance id within provider's namespace
    String x509Certificate (optional); //an X.509 certificate usable for both client and server in TLS connections
    String x509CertificateSigner (optional); //the CA certificate chain to verify all generated X.509 certs
    String sshCertificate (optional); //the SSH certificate, signed by the CA (user or host)
    String sshCertificateSigner (optional); //the SSH CA's public key for the sshCertificate (user or host)
    SignedToken serviceToken (optional); //service token instead of TLS certificate
    Map<String,String> attributes (optional); //other config-like attributes determined at boot time
}

// Register a new service instance and issue an x.509 service identity
// certificate once the provider validates the attestation data along
// with the request attributes.
// We have an authenticate enabled for this endpoint but in most
// cases the service owner might need to make it optional by setting
// the zts servers no_auth_uri list to include this endpoint. We
// need the authenticate in case the request comes with a client
// certificate and the provider needs to know who that principal
// was in the client certificate
resource InstanceIdentity POST "/instance" {
    InstanceRegisterInformation info;
    String location (header="Location", out); //return location for subsequent patch requests
    expected CREATED;
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError INTERNAL_SERVER_ERROR;
    }
}

// Refresh the given service instance and issue a new x.509 service
// identity certificate once the provider validates the attestation
// data along with the request attributes.
resource InstanceIdentity POST "/instance/{provider}/{domain}/{service}/{instanceId}" {
    ServiceName provider; //the provider service name (i.e. "aws.us-west-2", "paas.manhattan.corp-gq1")
    DomainName domain; //the domain of the instance
    SimpleName service; //the service this instance is supposed to run
    PathElement instanceId; //unique instance id within provider's namespace
    InstanceRefreshInformation info; //the refresh request
    authenticate; //only TLS Certificate authentication is allowed
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError INTERNAL_SERVER_ERROR;
    }
}

// Request a token for the given service to be bootstrapped for the given
// provider. The caller must have authorization to manage the service in
// the given domain. The token will be valid for 30 mins for one time use
// only for the initial registration. The token must be sent back in the
// register request as the value of the attestationData field in the
// InstanceRegisterInformation object
resource InstanceRegisterToken GET "/instance/{provider}/{domain}/{service}/{instanceId}/token" {
    ServiceName provider; //the provider service name (i.e. "aws.us-west-2")
    DomainName domain; //the domain of the instance
    SimpleName service; //the service this instance is supposed to run
    PathElement instanceId; //unique instance id within provider's namespace
    authorize ("update", "{domain}:service.{service}");
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError INTERNAL_SERVER_ERROR;
    }
}

// Delete the given service instance certificate record thus blocking
// any future refresh requests from the given instance for this service
resource InstanceIdentity DELETE "/instance/{provider}/{domain}/{service}/{instanceId}" {
    ServiceName provider; //the provider service name (i.e. "aws.us-west-2", "paas.manhattan.corp-gq1")
    DomainName domain; //the domain of the instance
    SimpleName service; //the service this instance is supposed to run
    PathElement instanceId; //unique instance id within provider's namespace
    authorize("delete", "{domain}:instance.{instanceId}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError INTERNAL_SERVER_ERROR;
    }
}

type CertificateAuthorityBundle Struct {
    SimpleName name; //name of the bundle
    String certs; //set of certificates included in the bundle
}

// Return the request CA X.509 Certificate bundle
resource CertificateAuthorityBundle GET "/cacerts/{name}" {
    SimpleName name; //name of the CA cert bundle
    authenticate;
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError UNAUTHORIZED;
        ResourceError NOT_FOUND;
    }
}
