// Copyright 2016 Yahoo Inc.
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

include "Names.tdl";
include "RoleCert.tdl";

//A representation of a signed RoleToken
type RoleToken Struct {
    String token;
    Int64 expiryTime;
}

//Return a security token for the specific role in the namespace that 
//the principal can assume. If the role is omitted, then all roles in the
//namespace that the authenticated user can assume are returned.
//the caller can specify how long the RoleToken should be valid for
//by specifying the minExpiryTime and maxExpiryTime parameters. The
//minExpiryTime specifies that the returned RoleToken must be at
//least valid (min/lower bound) for specified number of seconds, 
//while maxExpiryTime specifies that the RoleToken must be at most
//valid (max/upper bound) for specified number of seconds. If both
//values are the same, the server must return a RoleToken for that
//many seconds. If no values are specified, the server's default
//RoleToken Timeout value is used.
resource RoleToken GET "/domain/{domainName}/token?role={role}&minExpiryTime={minExpiryTime}&maxExpiryTime={maxExpiryTime}&proxyForPrincipal={proxyForPrincipal}" {
    DomainName domainName; //name of the domain
    EntityList role (optional); //only interested for a token for these comma separated roles
    Int32 minExpiryTime (optional); //in seconds min expiry time
    Int32 maxExpiryTime (optional); //in seconds max expiry time
    EntityName proxyForPrincipal (optional); //optional this request is proxy for this principal
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
    }
}

//Return a TLS certificate for the specific role in the namespace that
//the principal can assume. Role certificates are valid for 30 days
//by default.
//This is deprecated and "POST /rolecert" api should be used instead.
resource RoleToken POST "/domain/{domainName}/role/{roleName}/token" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of role
    RoleCertificateRequest req; //csr request
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
    }
}

//Access can be checked and returned as this resource.
type Access Struct {
    Bool granted; //true (allowed) or false (denied)
}

resource Access GET "/access/domain/{domainName}/role/{roleName}/principal/{principal}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role to check access for
    EntityName principal; //carry out the access check for this principal
    authenticate;
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError NOT_FOUND;
    }
}

type RoleAccess Struct {
    Array<EntityName> roles;
}

resource RoleAccess GET "/access/domain/{domainName}/principal/{principal}" {
    DomainName domainName; //name of the domain
    EntityName principal; //carry out the role access lookup for this principal
    authenticate;
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError UNAUTHORIZED;
        ResourceError NOT_FOUND;
    }
}
