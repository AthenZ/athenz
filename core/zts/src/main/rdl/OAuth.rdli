// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

//Name Types
include "OAuth.tdl";

resource OpenIDConfig GET "/.well-known/openid-configuration" {
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError TOO_MANY_REQUESTS;
    }
}

resource OAuthConfig GET "/.well-known/oauth-authorization-server" {
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError TOO_MANY_REQUESTS;
    }
}

resource JWKList GET "/oauth2/keys?rfc={rfc}" {
    Bool rfc (optional, default=false); //flag to indicate ec curve names are restricted to RFC values
    expected OK;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Fetch OAuth2 Access Token
resource AccessTokenResponse POST "/oauth2/token" {
    AccessTokenRequest request; //token request details include scope
    consumes application/x-www-form-urlencoded
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Fetch OAuth OpenID Connect ID Token
resource OIDCResponse GET "/oauth2/auth?response_type={responseType}&client_id={clientId}&redirect_uri={redirectUri}&scope={scope}&state={state}&nonce={nonce}&keyType={keyType}&fullArn={fullArn}&expiryTime={expiryTime}&output={output}&roleInAudClaim={roleInAudClaim}" {
    String responseType; //response type - currently only supporting id tokens - id_token
    ServiceName clientId; //client id - must be valid athenz service identity name
    String redirectUri; //redirect uri for the response
    String scope; //id token scope
    EntityName state (optional); //optional state claim included in the response location header
    EntityName nonce; //nonce claim included in the id token
    SimpleName keyType (optional); //optional signing key type - RSA or EC. Might be ignored if server doesn't have the requested type configured
    Bool fullArn (optional, default=false); //flag to indicate to use full arn in group claim (e.g. sports:role.deployer instead of deployer)
    Int32 expiryTime (optional); //optional expiry period specified in seconds
    SimpleName output (optional); //optional output format of json
    Bool roleInAudClaim (optional, default=false); //flag to indicate to include role name in the audience claim only if we have a single role in response
    String location (header="Location", out); //return location header with id token
    authenticate;
    expected OK, FOUND;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}
