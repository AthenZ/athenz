// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

include "Names.tdl";

type SSHCertRequestData Struct {
    Array<String> principals; //principals in the ssh certificate (usually only one)
    Array<String> sources (optional); //source FQDNs or ip addresses
    Array<String> destinations (optional); //destination FQDNs or ip addresses
    String publicKey (optional); //public key for ssh certificate
    String touchPublicKey (optional); //yubikey/touch public key for ssh certificate
    Int32 caPubKeyAlgo (optional); //CA public key algorithm: 0: Unknown, 1: RSA, 3: ECDSA
    String command (optional); //optional force command option for certificate
}

type SSHCertRequestMeta Struct {
    String requestor; //requesting user
    String origin; //origin FQDN or ip
    String clientInfo (optional); //client info
    String sshClientVersion (optional); //ssh client version
    String certType; //cert type - user or host
    Array<String> keyIdPrincipals (optional); //principals included in the keyId field in the certificate
    EntityName athenzService (optional); //ssh host cert request is for this athenz service
    PathElement instanceId (optional); //ssh host cert request is for this instance id
    Timestamp prevCertValidFrom (optional); //previous ssh certificate validity from date
    Timestamp prevCertValidTo (optional); //previous ssh certificate validity to date
    String transId (optional); //ssh request transaction id
}

type SSHCertRequest Struct {
    SSHCertRequestData certRequestData; //ssh certificate request data
    SSHCertRequestMeta certRequestMeta; //ssh certificate request meta
    String csr (optional); //free-form csr if not using data/meta fields.
    String attestationData (optional); //identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc.
}

type SSHCertificate Struct {
    String certificate; //the SSH certificate, signed by the CA
    String publicKey (optional); //certificate public key if generated by SSH RA
    String privateKey (optional); //certificate private key if generated by SSH Agent
}

type SSHCertificates Struct {
    Array<SSHCertificate> certificates; //set of user ssh certificates
    String certificateSigner (optional); //the SSH CA's public key for the sshCertificate (user or host)
}
