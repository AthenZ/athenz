// Copyright 2016 Yahoo Inc.
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

include "Names.tdl";

//The representation for an enumeration of roles in the namespace, with pagination.
type RoleList Struct {
    Array<EntityName> names; //list of role names
    String next (optional); //if the response is a paginated list, this attribute specifies the value to be used in the next role list request as the value for the skip query parameter.
}

//An audit log entry for role membership change.
type RoleAuditLog Struct {
    MemberName member; //name of the role member
    ResourceName admin; //name of the principal executing the change
    Timestamp created; //timestamp of the entry
    String action; //log action - either add or delete
    String auditRef (optional); //audit reference string for the change as supplied by admin
}

type RoleMember Struct {
    MemberName memberName; //name of the member
    Timestamp expiration (optional); //the expiration timestamp
    Bool active (optional, default=true); //Flag to indicate whether membership is approved either by delegates ( in case of auditEnabled roles ) or by domain admins ( in case of selfserve roles )
}

//The representation for a Role with set of members.
type Role Struct {
    ResourceName name; //name of the role
    Timestamp modified (optional); //last modification timestamp of the role
    Array<MemberName> members (optional); //an explicit list of members. Might be empty or null, if trust is set
    Array<RoleMember> roleMembers (optional);  //members with expiration
    DomainName trust (optional); //a trusted domain to delegate membership decisions to
    Array<RoleAuditLog> auditLog (optional); //an audit log for role membership changes
    Bool auditEnabled (optional, default=false); //Flag indicates whether or not role updates should require GRC approval. If true, the auditRef parameter must be supplied(not empty) for any API defining it.
    Bool selfserve ( optional, default=false); // Flag indicates whether or not role allows self service. Users can add themselves in the role, but it has to be approved by domain admins to be effective.
}

//The representation for a list of roles with full details
type Roles Struct {
    Array<Role> list; // list of role objects
}

//The representation for a role membership.
type Membership Struct {
    MemberName memberName; //name of the member
    Bool isMember (optional, default=true); //flag to indicate whether or the user is a member or not
    ResourceName roleName (optional); //name of the role
    Timestamp expiration (optional); //the expiration timestamp
    Bool active (optional, default=true); //Flag to indicate whether membership is approved either by delegates ( in case of auditEnabled roles ) or by domain admins ( in case of selfserve roles )
}

//The list of domain administrators.
type DefaultAdmins Struct {
    Array<ResourceName> admins; //list of domain administrators
}

type MemberRole Struct {
    ResourceName roleName; //name of the role
    Timestamp expiration (optional); //the expiration timestamp
    Bool active (optional, default=true); //Flag to indicate whether membership is approved either by delegates ( in case of auditEnabled roles ) or by domain admins ( in case of selfserve roles )
}

type DomainRoleMember Struct {
    MemberName memberName; //name of the member
    Array<MemberRole> memberRoles; // roles for this member
}

type DomainRoleMembers Struct {
    DomainName domainName; //name of the domain
    Array<DomainRoleMember> members; //role members
}

//Set of system metadata attributes that all roles may have and can be changed by system admins.
type RoleSystemMeta Struct {
    Bool auditEnabled (optional, default=false); //Flag indicates whether or not role updates should be approved by GRC. If true, the auditRef parameter must be supplied(not empty) for any API defining it.
}

//Set of metadata attributes that all roles may have and can be changed by domain admins.
type RoleMeta Struct {
    Bool selfserve (optional, default=false); //Flag indicates whether or not role allows self service. Users can add themselves in the role, but it has to be approved by domain admins to be effective.
}