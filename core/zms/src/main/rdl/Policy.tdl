// Copyright 2016 Yahoo Inc.
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

//Policy Types
include "Names.tdl";

//Every assertion can have the effect of ALLOW or DENY.
type AssertionEffect Enum { ALLOW, DENY }

// Allowed operators for assertion conditions
type AssertionConditionOperator Enum { EQUALS }

// A representation of details associated with an assertion condition key
type AssertionConditionData Struct {
    AssertionConditionOperator operator; //Operator for the assertion condition
    AssertionConditionValue value; //Value of the assertion condition
}

// A representation of condition associated with an assertion
type AssertionCondition Struct {
    Int32 id (optional); //condition id - auto generated by server. Not required during put operations.
    Map<AssertionConditionKey, AssertionConditionData> conditionsMap; // each key in the map represents a unique condition. All the keys present in the map form a logical condition with AND operation.
}

//The representation of list of assertion conditions
type AssertionConditions Struct {
    Array<AssertionCondition> conditionsList; // list of assertion conditions.
}

//A representation for the encapsulation of an action to be performed on a 
//resource by a principal.
type Assertion Struct {
    String role; //the subject of the assertion - a role
    String resource; //the object of the assertion. Must be in the local namespace. Can contain wildcards
    String action; //the predicate of the assertion. Can contain wildcards
    AssertionEffect effect (optional, default=ALLOW); //the effect of the assertion in the policy language
    Int64 id (optional); //assertion id - auto generated by server. Not required during put operations.
    Bool caseSensitive (optional); // If true, we should store action and resource in their original case
    AssertionConditions conditions (optional); // optional list of assertion conditions associated with given assertion
}

//The representation for a Policy with set of assertions.
type Policy Struct {
    ResourceName name; //name of the policy
    Timestamp modified (optional); //last modification timestamp of this policy
    Array<Assertion> assertions; //list of defined assertions for this policy
    Bool caseSensitive (optional); // If true, we should store action and resource in their original case
}

//The representation of list of policy objects
type Policies Struct {
    Array<Policy> list; // list of policy objects
}