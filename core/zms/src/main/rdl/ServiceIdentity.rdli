// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

include "ServiceIdentity.tdl";

//Register the specified ServiceIdentity in the specified domain
resource ServiceIdentity PUT "/domain/{domain}/service/{service}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Bool returnObj (optional, default=false, header="Athenz-Return-Object"); //Return object param updated object back.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    ServiceIdentity detail; //ServiceIdentity object to be added/updated in the domain
    authorize ("update", "{domain}:service.{service}");
    expected NO_CONTENT, OK;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Get info for the specified ServiceIdentity.
resource ServiceIdentity GET "/domain/{domain}/service/{service}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service to be retrieved
    authenticate;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Delete the specified ServiceIdentity. Upon successful completion of this
//delete request, the server will return NO_CONTENT status code without any
//data (no object will be returned).
resource ServiceIdentity DELETE "/domain/{domain}/service/{service}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service to be deleted
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    authorize ("delete", "{domain}:service.{service}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Retrieve list of service identities
resource ServiceIdentities GET "/domain/{domainName}/services?publickeys={publickeys}&hosts={hosts}&tagKey={tagKey}&tagValue={tagValue}" {
    DomainName domainName; //name of the domain
    Bool publickeys (optional, default=false); // return list of public keys in the service
    Bool hosts (optional, default=false); // return list of hosts in the service
    TagKey tagKey (optional); //flag to query all services that have a given tagName
    TagCompoundValue tagValue (optional); //flag to query all services that have a given tag name and value
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Enumerate services provisioned in this domain.
resource ServiceIdentityList GET "/domain/{domainName}/service?limit={limit}&skip={skip}" {
    DomainName domainName;//name of the domain
    Int32 limit (optional); //restrict the number of results in this call
    String skip (optional); //restrict the set to those after the specified "next" token returned from a previous call
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Retrieve the specified public key from the service.
resource PublicKeyEntry GET "/domain/{domain}/service/{service}/publickey/{id}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service
    String id; //the identifier of the public key to be retrieved
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Add the specified public key to the service.
resource PublicKeyEntry PUT "/domain/{domain}/service/{service}/publickey/{id}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service
    String id; //the identifier of the public key to be added
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    PublicKeyEntry publicKeyEntry; //PublicKeyEntry object to be added/updated in the service
    authorize ("update", "{domain}:service.{service}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Remove the specified public key from the service. Upon successful completion of
//this delete request, the server will return NO_CONTENT status code without any
//data (no object will be returned).
resource PublicKeyEntry DELETE "/domain/{domain}/service/{service}/publickey/{id}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service
    String id; //the identifier of the public key to be deleted
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    authorize ("update", "{domain}:service.{service}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Set the specified service metadata. Caller must have update privileges on the sys.auth domain.
resource ServiceIdentity PUT "/domain/{domain}/service/{service}/meta/system/{attribute}" {
    DomainName domain; //name of the domain
    SimpleName service; //name of the service
    SimpleName attribute; //name of the system attribute to be modified
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    ServiceIdentitySystemMeta detail; //ServiceIdentitySystemMeta object with updated attribute values
    authorize ("update", "sys.auth:meta.service.{attribute}.{domain}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Set the resource ownership for the given service
resource ResourceServiceIdentityOwnership PUT "/domain/{domainName}/service/{service}/ownership" {
    DomainName domainName; //name of the domain
    SimpleName service; //name of the service
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    ResourceServiceIdentityOwnership resourceOwnership; //resource ownership to be set for the given service
    authorize ("update", "{domainName}:meta.service.ownership.{service}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}
