// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

//Role API
include "Role.tdl";

//Enumerate roles provisioned in this domain.
resource RoleList GET "/domain/{domainName}/role?limit={limit}&skip={skip}" {
    DomainName domainName; //name of the domain
    Int32 limit (optional); //restrict the number of results in this call
    String skip (optional); //restrict the set to those after the specified "next" token returned from a previous call
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Get the list of all roles in a domain with optional flag
// whether or not include members
resource Roles GET "/domain/{domainName}/roles?members={members}&tagKey={tagKey}&tagValue={tagValue}" {
    DomainName domainName; // name of the domain
    Bool members (optional, default=false); // return list of members in the role
    TagKey tagKey (optional); //flag to query all roles that have a given tagName
    TagCompoundValue tagValue (optional); //flag to query all roles that have a given tag name and value
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Get the specified role in the domain.
resource Role GET "/domain/{domainName}/role/{roleName}?auditLog={auditLog}&expand={expand}&pending={pending}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role to be retrieved
    Bool auditLog (optional, default=false); //flag to indicate whether or not to return role audit log
    Bool expand (optional, default=false); // expand delegated trust roles and return trusted members
    Bool pending (optional, default=false); // include pending members
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Create/update the specified role.
resource Role PUT "/domain/{domainName}/role/{roleName}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role to be added/updated
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Bool returnObj (optional, default=false, header="Athenz-Return-Object"); //Return object param updated object back.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    Role role; //Role object to be added/updated in the domain
    authorize ("update", "{domainName}:role.{roleName}");
    expected NO_CONTENT, OK;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Delete the specified role. Upon successful completion of this delete
//request, the server will return NO_CONTENT status code without any
//data (no object will be returned).
resource Role DELETE "/domain/{domainName}/role/{roleName}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role to be deleted
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    authorize ("delete", "{domainName}:role.{roleName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Get the membership status for a specified user in a role.
resource Membership GET "/domain/{domainName}/role/{roleName}/member/{memberName}?expiration={expiration}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    MemberName memberName; //user name to be checked for membership
    String expiration (optional); //the expiration timestamp
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Get members with overdue review
resource DomainRoleMembers GET "/domain/{domainName}/overdue" (name=GetOverdueReview) {
    DomainName domainName; //name of the domain
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Get list of principals defined in roles in the given domain
resource DomainRoleMembers GET "/domain/{domainName}/member" {
    DomainName domainName; //name of the domain
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Fetch all the roles across domains by either calling or specified principal
// The optional expand argument will include all direct and indirect roles,
// however, it will force authorization that you must be either the principal
// or for service accounts have update access to the service identity:
// 1. authenticated principal is the same as the check principal
// 2. system authorized ("access", "sys.auth:meta.role.lookup")
// 3. service admin ("update", "{principal}")
// 4. domain authorized ("access", "{domainName}:meta.role.lookup") if domainName is provided
resource DomainRoleMember GET "/role?principal={principal}&domain={domainName}&expand={expand}" (name=getPrincipalRoles) {
    ResourceName principal (optional); //If not present, will return roles for the user making the call
    DomainName domainName (optional); //If not present, will return roles from all domains
    Bool expand (optional, default=false); //expand to include group and delegated trust role membership
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Add the specified user to the role's member list.
//If the role is selfRenewEnabled, then an existing member may extend their expiration time by the configured
//number of minutes (selfRenewMins) by calling this API regardless or not the user is expired or active.
//If the role is neither auditEnabled nor selfserve, then it will use authorize ("update", "{domainName}:role.{roleName}")
//or ("update_members", "{domainName}:role.{roleName}"). This only allows access to members and not role attributes.
//otherwise membership will be sent for approval to either designated delegates ( in case of auditEnabled roles ) or to
//domain admins ( in case of selfserve roles )
resource Membership PUT "/domain/{domainName}/role/{roleName}/member/{memberName}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    MemberName memberName; //name of the user to be added as a member
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Bool returnObj (optional, default=false, header="Athenz-Return-Object"); //Return object param updated object back.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    Membership membership; //Membership object (must contain role/member names as specified in the URI)
    authenticate;
    expected NO_CONTENT, OK;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Delete the specified role membership. Upon successful completion of this delete
//request, the server will return NO_CONTENT status code without any data (no
//object will be returned). The required authorization includes three options:
// 1. ("update", "{domainName}:role.{roleName}")
// 2. ("update_members", "{domainName}:role.{roleName}")
// 3. principal matches memberName
resource Membership DELETE "/domain/{domainName}/role/{roleName}/member/{memberName}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    MemberName memberName; //name of the user to be removed as a member
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    authenticate;
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Delete the specified pending role membership. Upon successful completion of this delete
//request, the server will return NO_CONTENT status code without any data (no
//object will be returned). Authorization will be completed within the server itself
//since there are two possibilities: 1) The domain admins can delete any pending requests
//2) the requestor can also delete his/her own pending request.
resource Membership DELETE "/domain/{domainName}/role/{roleName}/pendingmember/{memberName}" (name=DeletePendingMembership) {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    MemberName memberName; //name of the user to be removed as a pending member
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    authenticate;
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Verify and, if necessary, fix domain roles and policies to make sure the given
//set of users have administrative access to the domain. This request is only
//restricted to "sys.auth" domain administrators and can be used when the domain
//administrators incorrectly have blocked their own access to their domains.
resource DefaultAdmins PUT "/domain/{domainName}/admins" {
    DomainName domainName; //name of the domain
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    DefaultAdmins defaultAdmins; //list of domain administrators
    authorize ("update", "sys.auth:domain");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Set the specified role metadata. Caller must have update privileges on the sys.auth domain.
//If the system attribute is one of the string attributes, then the caller
//must also have delete action on the same resource in order to reset the configured value
resource Role PUT "/domain/{domainName}/role/{roleName}/meta/system/{attribute}" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    SimpleName attribute; //name of the system attribute to be modified
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    RoleSystemMeta detail; //RoleSystemMeta object with updated attribute values
    authorize ("update", "sys.auth:meta.role.{attribute}.{domainName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Update the specified role metadata. Caller must have update privileges on the domain itself.
resource Role PUT "/domain/{domainName}/role/{roleName}/meta" {
    DomainName domainName; //name of the domain to be updated
    EntityName roleName; //name of the role
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    RoleMeta detail; //RoleMeta object with updated attribute values
    authenticate;
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Approve or Reject the request to add specified user to role membership.
// This endpoint will be used by 2 use cases:
// 1. Audit enabled roles with authorize ("update", "sys.auth:meta.role.{attribute}.{domainName}")
// 2. Selfserve roles in any domain with authorize ("update", "{domainName}:")
resource Membership PUT "/domain/{domainName}/role/{roleName}/member/{memberName}/decision" (name=PutMembershipDecision) {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    MemberName memberName; //name of the user to be added as a member
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Membership membership; //Membership object (must contain role/member names as specified in the URI)
    authenticate;
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Review role membership and take action to either extend and/or delete existing members.
resource Role PUT "/domain/{domainName}/role/{roleName}/review" (name=PutRoleReview) {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Bool returnObj (optional, default=false, header="Athenz-Return-Object"); //Return object param updated object back.
    String resourceOwner (header="Athenz-Resource-Owner"); //Resource owner for the request
    Role role; // Role object with updated and/or deleted members
    authorize ("update", "{domainName}:role.{roleName}");
    expected NO_CONTENT, OK;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

// Set the resource ownership for the given role
resource ResourceRoleOwnership PUT "/domain/{domainName}/role/{roleName}/ownership" {
    DomainName domainName; //name of the domain
    EntityName roleName; //name of the role
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    ResourceRoleOwnership resourceOwnership; //resource ownership to be set for the given role
    authorize ("update", "{domainName}:meta.role.ownership.{roleName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}
