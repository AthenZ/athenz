// Copyright 2016 Yahoo Inc.
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

//Policy API
include "Names.tdl";
include "Policy.tdl";

//The representation for an enumeration of policies in the namespace, with pagination.
type PolicyList Struct {
    Array<EntityName> names; //list of policy names
    String next (optional); //if the response is a paginated list, this attribute specifies the value to be used in the next policy list request as the value for the skip query parameter.
}

//List policies provisioned in this namespace.
resource PolicyList GET "/domain/{domainName}/policy?limit={limit}&skip={skip}" {
    DomainName domainName; //name of the domain
    Int32 limit (optional); //restrict the number of results in this call
    String skip (optional); //restrict the set to those after the specified "next" token returned from a previous call
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//List policies provisioned in this namespace.
resource Policies GET "/domain/{domainName}/policies?assertions={assertions}" {
    DomainName domainName; //name of the domain
    Bool assertions (optional, default=false); // return list of assertions in the policy
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Read the specified policy.
resource Policy GET "/domain/{domainName}/policy/{policyName}" {
    DomainName domainName; //name of the domain
    EntityName policyName; //name of the policy to be retrieved
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Create or update the specified policy.
resource Policy PUT "/domain/{domainName}/policy/{policyName}" {
    DomainName domainName; //name of the domain
    EntityName policyName; //name of the policy to be added/updated
    String     auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Policy policy; //Policy object to be added or updated in the domain
    authorize("update", "{domainName}:policy.{policyName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Delete the specified policy. Upon successful completion of this delete
//request, the server will return NO_CONTENT status code without any data
//(no object will be returned).
resource Policy DELETE "/domain/{domainName}/policy/{policyName}" {
    DomainName domainName; //name of the domain
    EntityName policyName; //name of the policy to be deleted
    String     auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    authorize("delete", "{domainName}:policy.{policyName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Get the assertion details with specified id in the given policy
resource Assertion GET "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}" {
    DomainName domainName; //name of the domain
    EntityName policyName; //name of the policy
    Int64 assertionId; //assertion id
    authenticate;
    exceptions {
        ResourceError BAD_REQUEST;
        ResourceError NOT_FOUND;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Add the specified assertion to the given policy
resource Assertion PUT "/domain/{domainName}/policy/{policyName}/assertion" {
    DomainName domainName; //name of the domain
    EntityName policyName; //name of the policy
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    Assertion assertion; //Assertion object to be added to the given policy
    authorize ("update", "{domainName}:policy.{policyName}");
    expected OK;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}

//Delete the specified policy assertion. Upon successful completion of this delete
//request, the server will return NO_CONTENT status code without any data (no
//object will be returned).
resource Assertion DELETE "/domain/{domainName}/policy/{policyName}/assertion/{assertionId}" {
    DomainName domainName; //name of the domain
    EntityName policyName; //name of the policy
    Int64 assertionId; //assertion id
    String auditRef (header="Y-Audit-Ref"); //Audit param required(not empty) if domain auditEnabled is true.
    authorize ("update", "{domainName}:policy.{policyName}");
    expected NO_CONTENT;
    exceptions {
        ResourceError NOT_FOUND;
        ResourceError BAD_REQUEST;
        ResourceError FORBIDDEN;
        ResourceError UNAUTHORIZED;
        ResourceError CONFLICT;
        ResourceError TOO_MANY_REQUESTS;
    }
}