// Copyright The Athenz Authors
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.

//Domain types
include "Names.tdl";

//The representation of the domain ownership object
type ResourceDomainOwnership Struct {
    SimpleName metaOwner (optional); //owner of the object's meta attribute
    SimpleName objectOwner (optional); //owner of the object itself - checked for object deletion
}

//Set of metadata attributes that all domains may have and can be changed.
type DomainMeta Struct {
    String description (optional); //a description of the domain
    ResourceName org (optional); //a reference to an audit organization defined in athenz
    Bool enabled (optional, default=true); //Future use only, currently not used
    Bool auditEnabled (optional, default=false); //Flag indicates whether or not domain modifications should be logged for SOX+Auditing. If true, the auditRef parameter must be supplied(not empty) for any API defining it.
    String account (optional); //associated aws account id (system attribute - uniqueness check - if enabled)
    Int32 ypmId (optional); //associated product id (system attribute - uniqueness check - if enabled)
    String applicationId (optional); //associated application id
    String certDnsDomain (optional); //domain certificate dns domain (system attribute)
    Int32 memberExpiryDays (optional); //all user members in the domain will have specified max expiry days
    Int32 tokenExpiryMins (optional); //tokens issued for this domain will have specified max timeout in mins
    Int32 serviceCertExpiryMins (optional); //service identity certs issued for this domain will have specified max timeout in mins
    Int32 roleCertExpiryMins (optional); //role certs issued for this domain will have specified max timeout in mins
    String signAlgorithm (optional, x_allowempty="true"); //rsa or ec signing algorithm to be used for tokens
    Int32 serviceExpiryDays (optional); //all services in the domain roles will have specified max expiry days
    Int32 groupExpiryDays (optional); //all groups in the domain roles will have specified max expiry days
    String userAuthorityFilter (optional); //membership filtered based on user authority configured attributes
    String azureSubscription (optional); //associated azure subscription id (system attribute - uniqueness check - if enabled)
    String gcpProject (optional); //associated gcp project id (system attribute - uniqueness check - if enabled)
    String gcpProjectNumber (optional); //associated gcp project number (system attribute)
    Map<TagKey,TagValueList> tags (optional); //key-value pair tags, tag might contain multiple values
    String businessService (optional, x_allowempty="true"); //associated business service with domain
    Int32 memberPurgeExpiryDays (optional); //purge role/group members with expiry date configured days in the past
    String productId (optional); //associated product id (system attribute - uniqueness check - if enabled)
    Int32 featureFlags (optional); //features enabled per domain (system attribute)
    Map<SimpleName,String> contacts (optional); //list of domain contacts (PE-Owner, Product-Owner, etc), each type can have a single value
    String environment (optional, x_allowempty="true"); //domain environment e.g. production, staging, etc
    ResourceDomainOwnership resourceOwnership (optional); //ownership information for the domain (read-only attribute)
}

//A domain is an independent partition of users, roles, and resources.
//Its name represents the definition of a namespace; the only way a
//new namespace can be created, from the top, is by creating Domains.
//Administration of a domain is governed by the parent domain (using
//reverse-DNS namespaces). The top level domains are governed by the
//special "sys.auth" domain.
type Domain DomainMeta {
    DomainName name; //the common name to be referred to, the symbolic id. It is immutable
    Timestamp modified (optional); //the last modification timestamp of any object or attribute in this domain
    UUID id (optional); //unique identifier of the domain. generated on create, never reused
}

//A list of domain objects with their meta attributes.
type DomainMetaList Struct {
    Array<Domain> domains; //list of domain objects
}

//A paginated list of domains.
type DomainList Struct {
    Array<DomainName> names; //list of domain names
    String next (optional); //if the response is a paginated list, this attribute specifies the value to be used in the next domain list request as the value for the skip query parameter.
}

//A domain attributes for the changelog support
type DomainAttributes Struct {
    Int64 fetchTime; //timestamp when the domain object was fetched from ZMS
}

//A domain options for enforcing uniqueness checks
type DomainOptions Struct {
    Bool enforceUniqueProductIds; //enforce domains are associated with unique product ids
    Bool enforceUniqueAWSAccounts; //enforce domains are associated with unique aws accounts
    Bool enforceUniqueAzureSubscriptions; //enforce domains are associated with unique azure subscriptions
    Bool enforceUniqueGCPProjects; //enforce domains are associated with unique gcp projects
}
