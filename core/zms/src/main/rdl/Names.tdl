//
// Copyright 2016 Yahoo Inc.
// Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.
//
//Common name types used by several API definitions
//

//A simple identifier, an element of compound name.
type SimpleName String (pattern="[a-zA-Z0-9_][a-zA-Z0-9_-]*");

//A compound name. Most names in this API are compound names.
type CompoundName String (pattern="({SimpleName}\\.)*{SimpleName}");

//A domain name is the general qualifier prefix, as its uniqueness is managed.
type DomainName String (pattern="{CompoundName}");

//An entity name is a short form of a resource name,
//including only the domain and entity.
type EntityName String (pattern="{CompoundName}");

//A service name will generally be a unique subdomain.
type ServiceName String (pattern="{CompoundName}");

//A location name is not yet defined, but will be a
//dotted name like everything else.
type LocationName String (pattern="{CompoundName}");

//An action (operation) name.
type ActionName String (pattern="{CompoundName}");

//A resource name
//Note that the EntityName part is optional, that is,
//a domain name followed by a colon is valid resource name.
type ResourceName String (pattern="{DomainName}(:{EntityName})?");

//A comma separated list of resource names
type ResourceNames String (pattern="({ResourceName},)*{ResourceName}");

//The Y-specific URL-safe Base64 variant.
type YBase64 String (pattern="[a-zA-Z0-9\\._-]+");

//YEncoded includes ybase64 chars, as well as = and %.
//This can represent a user cookie and URL-encoded values.
type YEncoded String (pattern="[a-zA-Z0-9\\._%=-]*");

//Used as the prefix in a signed assertion. This uniquely
//identifies a signing authority.
type AuthorityName String (pattern="{CompoundName}"); //i.e. "user"

//A signed assertion if identity. i.e. the user cookie value.
//This token will only make sense to the authority that
//generated it, so it is beneficial to have something in the
//value that is cheaply recognized to quickly reject if
//it belongs to another authority. In addition to the
//YEncoded set our token includes ; to separate components
//and , to separate roles and : for IPv6 addresses
type SignedToken String (pattern="[a-zA-Z0-9\\._%=:;,-]*");

//A group name
type GroupName String (pattern="{DomainName}:group\\.{EntityName}");

//A group member name
type GroupMemberName String (pattern="{CompoundName}");

//Role Member name - could be one of four values: *,
//DomainName.* or ServiceName[*], or GroupNames
type MemberName String (pattern="\\*|{DomainName}\\.\\*|{ServiceName}(\\*)?|{GroupName}");

//A comma separated list of authority keywords
type AuthorityKeyword String (pattern="{SimpleName}");
type AuthorityKeywords String (pattern="({AuthorityKeyword},)*{AuthorityKeyword}");

//TagValue to contain generic string patterns
type TagValue String (pattern="[a-zA-Z0-9_:,\\/][a-zA-Z0-9_:,\\/-]*");

//A compound value of TagValue
type TagCompoundValue String (pattern="({TagValue}\\.)*{TagValue}");

type TagValueList Struct {
    Array<TagCompoundValue> list; //list of tag values
}

type AssertionConditionKeyPattern String (pattern="[a-zA-Z][a-zA-Z0-9_-]+");
type AssertionConditionKey String (pattern="({AssertionConditionKeyPattern}\\.)*{AssertionConditionKeyPattern}");

type AssertionConditionValuePattern String (pattern="[a-zA-Z0-9\\*][a-zA-Z0-9_\\.\\*-]*");
type AssertionConditionValue String (pattern="({AssertionConditionValuePattern},)*{AssertionConditionValuePattern}");