AWSTemplateFormatVersion: 2010-09-09
Description: 'Athenz packer standard 2 Availabilty zone configuration template'
Parameters:
  packerVPCCidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.0/24"
  PrivateSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.0/26"
  PublicSubnet01CidrBlock:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be an IP address block in Cidr notation."
    MaxLength: "18"
    MinLength: "9"
    Type: String
    Description: The CIDR block to use for the VPC.
    Default: "10.0.0.64/26"
  Environment:
    Type: String
    Description: The environment packer is running in
    AllowedValues:
      - prod
      - stage
      - dev
Resources:
  packerVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref 'packerVPCCidrBlock'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PrivateSubnet01CidrBlock'
      VpcId: !Ref 'packerVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer-${AWS::Region}-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PublicSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'PublicSubnet01CidrBlock'
      VpcId: !Ref 'packerVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer-${AWS::Region}-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  Nacl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref 'packerVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  NetworkAclEntry01:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: !Ref 'packerVPCCidrBlock'
      PortRange:
        From: '22'
        To: '22'
  NetworkAclEntry02:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  NetworkAclEntry03:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  NetworkAclEntry04:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  NetworkAclEntry05:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  NetworkAclEntry06:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      Egress: 'true'
      RuleNumber: '150'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  NetworkAclEntry07:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  NetworkAclEntry08:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  NetworkAclEntry09:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  NetworkAclEntry10:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  NetworkAclEntry11:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  NetworkAclEntry12:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'Nacl'
      RuleNumber: '150'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  PrivateSubnet01Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'PrivateSubnet01'
      NetworkAclId: !Ref 'Nacl'
  PublicSubnet01Nacl:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref 'PublicSubnet01'
      NetworkAclId: !Ref 'Nacl'
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'packerVPC'
  PublicSubnet01NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt PublicSubnet01EIP.AllocationId
      SubnetId: !Ref 'PublicSubnet01'
      Tags:
         - Key: Name
           Value: !Sub ${Environment}-packer-${AWS::Region}
         - Key: Environment
           Value: !Ref Environment
         - Key: Stack
           Value: !Ref AWS::StackName
  PublicSubnet01EIP:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'packerVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer-${AWS::Region}-public
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  GatewayRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
    DependsOn: VPCGatewayAttachment
  PrivateSubnet01RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref 'packerVPC'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-packer-${AWS::Region}-private
        - Key: Environment
          Value: !Ref Environment
        - Key: Stack
          Value: !Ref AWS::StackName
  PrivateSubnet01Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'PublicSubnet01NatGateway'
      RouteTableId: !Ref 'PrivateSubnet01RouteTable'
  PublicSubnet01RouteTableAssociaton:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      SubnetId: !Ref 'PublicSubnet01'
  PrivateSubnet01RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref 'PrivateSubnet01RouteTable'
      SubnetId: !Ref 'PrivateSubnet01'