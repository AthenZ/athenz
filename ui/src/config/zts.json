{
    "namespace": "com.yahoo.athenz.zts",
    "name": "ZTS",
    "version": 1,
    "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms. The Authorization Token Service (ZTS) API",
    "types": [
        {
            "StringTypeDef": {
                "type": "String",
                "name": "SimpleName",
                "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms. Common name types used by several API definitions A simple identifier, an element of compound name.",
                "pattern": "[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "CompoundName",
                "comment": "A compound name. Most names in this API are compound names.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "DomainName",
                "comment": "A domain name is the general qualifier prefix, as its uniqueness is managed.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "EntityName",
                "comment": "An entity name is a short form of a resource name, including only the domain and entity.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "EntityList",
                "comment": "An Entity list is comma separated compound Names",
                "pattern": "(([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*,)*([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "ServiceName",
                "comment": "A service name will generally be a unique subdomain.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "ActionName",
                "comment": "An action (operation) name.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "ResourceName",
                "comment": "A resource name Note that the EntityName part is optional, that is, a domain name followed by a colon is valid resource name.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*(:([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*)?"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "YBase64",
                "comment": "The Y-specific URL-safe Base64 variant.",
                "pattern": "[a-zA-Z0-9\\._-]+"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "YEncoded",
                "comment": "YEncoded includes ybase64 chars, as well as = and %. This can represent a user cookie and URL-encoded values.",
                "pattern": "[a-zA-Z0-9\\._%=-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "AuthorityName",
                "comment": "Used as the prefix in a signed assertion. This uniquely identifies a signing authority.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "SignedToken",
                "comment": "A signed assertion if identity. i.e. the user cookie value. This token will only make sense to the authority that generated it, so it is beneficial to have something in the value that is cheaply recognized to quickly reject if it belongs to another authority. In addition to the YEncoded set our token includes ; to separate components and , to separate roles",
                "pattern": "[a-zA-Z0-9\\._%=;,-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "PathElement",
                "comment": "A uri-safe path element",
                "pattern": "[a-zA-Z0-9-\\._~=+@$,:]*"
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "CertType",
                "comment": "CertType denotes various types of certs issued by Athenz",
                "elements": [
                    {
                        "symbol": "X509"
                    },
                    {
                        "symbol": "SSH_HOST"
                    },
                    {
                        "symbol": "SSH_USER"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "ResourceAccess",
                "comment": "ResourceAccess can be checked and returned as this resource. (same as ZMS.Access)",
                "fields": [
                    {
                        "name": "granted",
                        "type": "Bool",
                        "optional": false,
                        "comment": "true (allowed) or false (denied)"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "PublicKeyEntry",
                "comment": "The representation of the public key in a service identity object.",
                "fields": [
                    {
                        "name": "key",
                        "type": "String",
                        "optional": false,
                        "comment": "the public key for the service"
                    },
                    {
                        "name": "id",
                        "type": "String",
                        "optional": false,
                        "comment": "the key identifier (version or zone name)"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "ServiceIdentity",
                "comment": "The representation of the service identity object.",
                "fields": [
                    {
                        "name": "name",
                        "type": "ServiceName",
                        "optional": false,
                        "comment": "the full name of the service, i.e. \"sports.storage\""
                    },
                    {
                        "name": "publicKeys",
                        "type": "Array",
                        "optional": true,
                        "comment": "array of public keys for key rotation",
                        "items": "PublicKeyEntry"
                    },
                    {
                        "name": "providerEndpoint",
                        "type": "String",
                        "optional": true,
                        "comment": "if present, then this service can provision tenants via this endpoint."
                    },
                    {
                        "name": "modified",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "the timestamp when this entry was last modified"
                    },
                    {
                        "name": "executable",
                        "type": "String",
                        "optional": true,
                        "comment": "the path of the executable that runs the service"
                    },
                    {
                        "name": "hosts",
                        "type": "Array",
                        "optional": true,
                        "comment": "list of host names that this service can run on",
                        "items": "String"
                    },
                    {
                        "name": "user",
                        "type": "String",
                        "optional": true,
                        "comment": "local (unix) user name this service can run as"
                    },
                    {
                        "name": "group",
                        "type": "String",
                        "optional": true,
                        "comment": "local (unix) group name this service can run as"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "ServiceIdentityList",
                "comment": "The representation for an enumeration of services in the namespace.",
                "fields": [
                    {
                        "name": "names",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of service names",
                        "items": "EntityName"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "HostServices",
                "comment": "The representation for an enumeration of services authorized to run on a specific host.",
                "fields": [
                    {
                        "name": "host",
                        "type": "String",
                        "optional": false,
                        "comment": "name of the host"
                    },
                    {
                        "name": "names",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of service names authorized to run on this host",
                        "items": "EntityName"
                    }
                ],
                "closed": false
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "AssertionEffect",
                "comment": "Every assertion can have the effect of ALLOW or DENY.",
                "elements": [
                    {
                        "symbol": "ALLOW"
                    },
                    {
                        "symbol": "DENY"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Assertion",
                "comment": "A representation for the encapsulation of an action to be performed on a resource by a principal.",
                "fields": [
                    {
                        "name": "role",
                        "type": "String",
                        "optional": false,
                        "comment": "the subject of the assertion, a role"
                    },
                    {
                        "name": "resource",
                        "type": "String",
                        "optional": false,
                        "comment": "the object of the assertion. Must be in the local namespace. Can contain wildcards"
                    },
                    {
                        "name": "action",
                        "type": "String",
                        "optional": false,
                        "comment": "the predicate of the assertion. Can contain wildcards"
                    },
                    {
                        "name": "effect",
                        "type": "AssertionEffect",
                        "optional": true,
                        "comment": "the effect of the assertion in the policy language",
                        "default": "ALLOW"
                    },
                    {
                        "name": "id",
                        "type": "Int64",
                        "optional": true,
                        "comment": "assertion id - auto generated by server"
                    },
                    {
                        "name": "caseSensitive",
                        "type": "Bool",
                        "optional": true,
                        "comment": "If true, we should store action and resource in their original case"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Policy",
                "comment": "The representation for a Policy with set of assertions.",
                "fields": [
                    {
                        "name": "name",
                        "type": "ResourceName",
                        "optional": false,
                        "comment": "name of the policy"
                    },
                    {
                        "name": "modified",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "last modification timestamp of this policy"
                    },
                    {
                        "name": "assertions",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of defined assertions for this policy",
                        "items": "Assertion"
                    },
                    {
                        "name": "caseSensitive",
                        "type": "Bool",
                        "optional": true,
                        "comment": "If true, we should store action and resource in their original case"
                    },
                    {
                        "name": "version",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "optional version string, defaults to 0"
                    },
                    {
                        "name": "active",
                        "type": "Bool",
                        "optional": true,
                        "comment": "if multi-version policy then indicates active version"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "PolicyData",
                "fields": [
                    {
                        "name": "domain",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "name of the domain"
                    },
                    {
                        "name": "policies",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of policies defined in this server",
                        "items": "Policy"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SignedPolicyData",
                "comment": "A representation of policies object defined in a given server.",
                "fields": [
                    {
                        "name": "policyData",
                        "type": "PolicyData",
                        "optional": false,
                        "comment": "list of policies defined in a domain"
                    },
                    {
                        "name": "zmsSignature",
                        "type": "String",
                        "optional": true,
                        "comment": "zms signature generated based on the domain policies object"
                    },
                    {
                        "name": "zmsKeyId",
                        "type": "String",
                        "optional": true,
                        "comment": "the identifier of the zms key used to generate the signature"
                    },
                    {
                        "name": "modified",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "when the domain itself was last modified"
                    },
                    {
                        "name": "expires",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "timestamp specifying the expiration time for using this set of policies"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "DomainSignedPolicyData",
                "comment": "A signed bulk transfer of policies. The data is signed with server's private key.",
                "fields": [
                    {
                        "name": "signedPolicyData",
                        "type": "SignedPolicyData",
                        "optional": false,
                        "comment": "policy data signed by ZMS"
                    },
                    {
                        "name": "signature",
                        "type": "String",
                        "optional": false,
                        "comment": "signature generated based on the domain policies object"
                    },
                    {
                        "name": "keyId",
                        "type": "String",
                        "optional": false,
                        "comment": "the identifier of the key used to generate the signature"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "JWSPolicyData",
                "comment": "SignedPolicyData using flattened JWS JSON Serialization syntax. https://tools.ietf.org/html/rfc7515#section-7.2.2",
                "fields": [
                    {
                        "name": "payload",
                        "type": "String",
                        "optional": false
                    },
                    {
                        "name": "protected",
                        "type": "String",
                        "optional": false
                    },
                    {
                        "name": "header",
                        "type": "Map",
                        "optional": false,
                        "items": "String",
                        "keys": "String"
                    },
                    {
                        "name": "signature",
                        "type": "String",
                        "optional": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SignedPolicyRequest",
                "fields": [
                    {
                        "name": "policyVersions",
                        "type": "Map",
                        "optional": false,
                        "items": "String",
                        "keys": "String"
                    },
                    {
                        "name": "signatureP1363Format",
                        "type": "Bool",
                        "optional": false,
                        "comment": "true if signature must be in P1363 format instead of ASN.1 DER"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "RoleCertificate",
                "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms. RoleCertificate - a role certificate",
                "fields": [
                    {
                        "name": "x509Certificate",
                        "type": "String",
                        "optional": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "RoleCertificateRequest",
                "comment": "RoleCertificateRequest - a certificate signing request. By including the optional previous Certificate NotBefore and NotAfter dates would all the server to correctly prioritize this request in case the certificate signer is under heavy load and it can't sign all submitted requests from the Athenz Server.",
                "fields": [
                    {
                        "name": "csr",
                        "type": "String",
                        "optional": false,
                        "comment": "role certificate singing request"
                    },
                    {
                        "name": "proxyForPrincipal",
                        "type": "EntityName",
                        "optional": true,
                        "comment": "this request is proxy for this principal"
                    },
                    {
                        "name": "expiryTime",
                        "type": "Int64",
                        "optional": false,
                        "comment": "request an expiry time for the role certificate"
                    },
                    {
                        "name": "prevCertNotBefore",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "previous role certificate not before date"
                    },
                    {
                        "name": "prevCertNotAfter",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "previous role certificate not after date"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "RoleAccess",
                "fields": [
                    {
                        "name": "roles",
                        "type": "Array",
                        "optional": false,
                        "items": "EntityName"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "RoleToken",
                "comment": "A representation of a signed RoleToken",
                "fields": [
                    {
                        "name": "token",
                        "type": "String",
                        "optional": false
                    },
                    {
                        "name": "expiryTime",
                        "type": "Int64",
                        "optional": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Access",
                "comment": "Access can be checked and returned as this resource.",
                "fields": [
                    {
                        "name": "granted",
                        "type": "Bool",
                        "optional": false,
                        "comment": "true (allowed) or false (denied)"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TenantDomains",
                "fields": [
                    {
                        "name": "tenantDomainNames",
                        "type": "Array",
                        "optional": false,
                        "items": "DomainName"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Identity",
                "comment": "Identity - a signed assertion of service or human identity, the response could be either a client certificate or just a regular NToken (depending if the request contained a csr or not).",
                "fields": [
                    {
                        "name": "name",
                        "type": "CompoundName",
                        "optional": false,
                        "comment": "name of the identity, fully qualified, i.e. my.domain.service1, or aws.1232321321312.myusername"
                    },
                    {
                        "name": "certificate",
                        "type": "String",
                        "optional": true,
                        "comment": "a certificate usable for both client and server in TLS connections"
                    },
                    {
                        "name": "caCertBundle",
                        "type": "String",
                        "optional": true,
                        "comment": "the CA certificate chain to use with all IMS-generated certs"
                    },
                    {
                        "name": "sshCertificate",
                        "type": "String",
                        "optional": true,
                        "comment": "the SSH certificate, signed by the CA (user or host)"
                    },
                    {
                        "name": "sshCertificateSigner",
                        "type": "String",
                        "optional": true,
                        "comment": "the SSH CA's public key for the sshCertificate (user or host)"
                    },
                    {
                        "name": "serviceToken",
                        "type": "SignedToken",
                        "optional": true,
                        "comment": "service token instead of TLS certificate"
                    },
                    {
                        "name": "attributes",
                        "type": "Map",
                        "optional": true,
                        "comment": "other config-like attributes determined at boot time",
                        "items": "String",
                        "keys": "String"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "InstanceRefreshRequest",
                "comment": "InstanceRefreshRequest - a certificate refresh request",
                "fields": [
                    {
                        "name": "csr",
                        "type": "String",
                        "optional": false,
                        "comment": "Cert CSR signed by the service's private key (public key registered in ZMS)"
                    },
                    {
                        "name": "expiryTime",
                        "type": "Int32",
                        "optional": true,
                        "comment": "in minutes how long token should be valid for"
                    },
                    {
                        "name": "keyId",
                        "type": "String",
                        "optional": true,
                        "comment": "public key identifier"
                    },
                    {
                        "name": "namespace",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "spiffe/k8s namespace value"
                    },
                    {
                        "name": "cloud",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "optional cloud name where the instance is bootstrapped. e.g. aws / gcp / azure / openstack etc."
                    }
                ],
                "closed": false
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "AWSRoleName",
                "comment": "AWS role name without the path",
                "pattern": "[a-zA-Z0-9-\\._=+@,]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "AWSRolePathElement",
                "comment": "AWS role path single element",
                "pattern": "[a-zA-Z0-9][a-zA-Z0-9-\\._]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "AWSRolePath",
                "comment": "AWS role path",
                "pattern": "([a-zA-Z0-9][a-zA-Z0-9-\\._]*/)+"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "AWSArnRoleName",
                "comment": "AWS full role name with path",
                "pattern": "(([a-zA-Z0-9][a-zA-Z0-9-\\._]*/)+)*[a-zA-Z0-9-\\._=+@,]*"
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "AWSTemporaryCredentials",
                "fields": [
                    {
                        "name": "accessKeyId",
                        "type": "String",
                        "optional": false
                    },
                    {
                        "name": "secretAccessKey",
                        "type": "String",
                        "optional": false
                    },
                    {
                        "name": "sessionToken",
                        "type": "String",
                        "optional": false
                    },
                    {
                        "name": "expiration",
                        "type": "Timestamp",
                        "optional": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SSHCertRequestData",
                "fields": [
                    {
                        "name": "principals",
                        "type": "Array",
                        "optional": false,
                        "comment": "principals in the ssh certificate (usually only one)",
                        "items": "String"
                    },
                    {
                        "name": "sources",
                        "type": "Array",
                        "optional": true,
                        "comment": "source FQDNs or ip addresses",
                        "items": "String"
                    },
                    {
                        "name": "destinations",
                        "type": "Array",
                        "optional": true,
                        "comment": "destination FQDNs or ip addresses",
                        "items": "String"
                    },
                    {
                        "name": "publicKey",
                        "type": "String",
                        "optional": true,
                        "comment": "public key for ssh certificate"
                    },
                    {
                        "name": "touchPublicKey",
                        "type": "String",
                        "optional": true,
                        "comment": "yubikey/touch public key for ssh certificate"
                    },
                    {
                        "name": "caPubKeyAlgo",
                        "type": "Int32",
                        "optional": true,
                        "comment": "CA public key algorithm: 0: Unknown, 1: RSA, 3: ECDSA"
                    },
                    {
                        "name": "command",
                        "type": "String",
                        "optional": true,
                        "comment": "optional force command option for certificate"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SSHCertRequestMeta",
                "fields": [
                    {
                        "name": "requestor",
                        "type": "String",
                        "optional": false,
                        "comment": "requesting user"
                    },
                    {
                        "name": "origin",
                        "type": "String",
                        "optional": false,
                        "comment": "origin FQDN or ip"
                    },
                    {
                        "name": "clientInfo",
                        "type": "String",
                        "optional": true,
                        "comment": "client info"
                    },
                    {
                        "name": "sshClientVersion",
                        "type": "String",
                        "optional": true,
                        "comment": "ssh client version"
                    },
                    {
                        "name": "certType",
                        "type": "String",
                        "optional": false,
                        "comment": "cert type - user or host"
                    },
                    {
                        "name": "keyIdPrincipals",
                        "type": "Array",
                        "optional": true,
                        "comment": "principals included in the keyId field in the certificate",
                        "items": "String"
                    },
                    {
                        "name": "athenzService",
                        "type": "EntityName",
                        "optional": true,
                        "comment": "ssh host cert request is for this athenz service"
                    },
                    {
                        "name": "instanceId",
                        "type": "PathElement",
                        "optional": true,
                        "comment": "ssh host cert request is for this instance id"
                    },
                    {
                        "name": "prevCertValidFrom",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "previous ssh certificate validity from date"
                    },
                    {
                        "name": "prevCertValidTo",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "previous ssh certificate validity to date"
                    },
                    {
                        "name": "transId",
                        "type": "String",
                        "optional": true,
                        "comment": "ssh request transaction id"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SSHCertRequest",
                "fields": [
                    {
                        "name": "certRequestData",
                        "type": "SSHCertRequestData",
                        "optional": false,
                        "comment": "ssh certificate request data"
                    },
                    {
                        "name": "certRequestMeta",
                        "type": "SSHCertRequestMeta",
                        "optional": false,
                        "comment": "ssh certificate request meta"
                    },
                    {
                        "name": "csr",
                        "type": "String",
                        "optional": true,
                        "comment": "free-form csr if not using data/meta fields."
                    },
                    {
                        "name": "attestationData",
                        "type": "String",
                        "optional": true,
                        "comment": "identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc."
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SSHCertificate",
                "fields": [
                    {
                        "name": "certificate",
                        "type": "String",
                        "optional": false,
                        "comment": "the SSH certificate, signed by the CA"
                    },
                    {
                        "name": "publicKey",
                        "type": "String",
                        "optional": true,
                        "comment": "certificate public key if generated by SSH RA"
                    },
                    {
                        "name": "privateKey",
                        "type": "String",
                        "optional": true,
                        "comment": "certificate private key if generated by SSH Agent"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "SSHCertificates",
                "fields": [
                    {
                        "name": "certificates",
                        "type": "Array",
                        "optional": false,
                        "comment": "set of user ssh certificates",
                        "items": "SSHCertificate"
                    },
                    {
                        "name": "certificateSigner",
                        "type": "String",
                        "optional": true,
                        "comment": "the SSH CA's public key for the sshCertificate (user or host)"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "AccessTokenResponse",
                "fields": [
                    {
                        "name": "access_token",
                        "type": "String",
                        "optional": false,
                        "comment": "access token"
                    },
                    {
                        "name": "token_type",
                        "type": "String",
                        "optional": false,
                        "comment": "token type e.g. Bearer"
                    },
                    {
                        "name": "expires_in",
                        "type": "Int32",
                        "optional": true,
                        "comment": "expiration in seconds"
                    },
                    {
                        "name": "scope",
                        "type": "String",
                        "optional": true,
                        "comment": "scope of the access token e.g. openid"
                    },
                    {
                        "name": "refresh_token",
                        "type": "String",
                        "optional": true,
                        "comment": "refresh token"
                    },
                    {
                        "name": "id_token",
                        "type": "String",
                        "optional": true,
                        "comment": "id token"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "JWK",
                "fields": [
                    {
                        "name": "kty",
                        "type": "String",
                        "optional": false,
                        "comment": "key type: EC or RSA"
                    },
                    {
                        "name": "kid",
                        "type": "String",
                        "optional": false,
                        "comment": "identifier"
                    },
                    {
                        "name": "alg",
                        "type": "String",
                        "optional": true,
                        "comment": "key algorithm"
                    },
                    {
                        "name": "use",
                        "type": "String",
                        "optional": true,
                        "comment": "usage: sig or enc"
                    },
                    {
                        "name": "crv",
                        "type": "String",
                        "optional": true,
                        "comment": "ec curve name"
                    },
                    {
                        "name": "x",
                        "type": "String",
                        "optional": true,
                        "comment": "ec x value"
                    },
                    {
                        "name": "y",
                        "type": "String",
                        "optional": true,
                        "comment": "ec y value"
                    },
                    {
                        "name": "n",
                        "type": "String",
                        "optional": true,
                        "comment": "rsa modulus value"
                    },
                    {
                        "name": "e",
                        "type": "String",
                        "optional": true,
                        "comment": "rsa public exponent value"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "OpenIDConfig",
                "fields": [
                    {
                        "name": "issuer",
                        "type": "String",
                        "optional": false,
                        "comment": "url using the https scheme"
                    },
                    {
                        "name": "authorization_endpoint",
                        "type": "String",
                        "optional": false,
                        "comment": "oauth 2.0 authorization endpoint url"
                    },
                    {
                        "name": "jwks_uri",
                        "type": "String",
                        "optional": false,
                        "comment": "public server jwk set url"
                    },
                    {
                        "name": "response_types_supported",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of supported response types",
                        "items": "String"
                    },
                    {
                        "name": "subject_types_supported",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of supported subject identifier types",
                        "items": "String"
                    },
                    {
                        "name": "id_token_signing_alg_values_supported",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of supported algorithms for issued id tokens",
                        "items": "String"
                    },
                    {
                        "name": "claims_supported",
                        "type": "Array",
                        "optional": true,
                        "comment": "list of supported id claims",
                        "items": "String"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "OAuthConfig",
                "fields": [
                    {
                        "name": "issuer",
                        "type": "String",
                        "optional": false,
                        "comment": "url using the https scheme"
                    },
                    {
                        "name": "authorization_endpoint",
                        "type": "String",
                        "optional": false,
                        "comment": "oauth 2.0 authorization endpoint url"
                    },
                    {
                        "name": "token_endpoint",
                        "type": "String",
                        "optional": false,
                        "comment": "authorization server token endpoint"
                    },
                    {
                        "name": "jwks_uri",
                        "type": "String",
                        "optional": false,
                        "comment": "public server jwk set url"
                    },
                    {
                        "name": "response_types_supported",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of supported response types",
                        "items": "String"
                    },
                    {
                        "name": "grant_types_supported",
                        "type": "Array",
                        "optional": false,
                        "comment": "supported grant types",
                        "items": "String"
                    },
                    {
                        "name": "token_endpoint_auth_signing_alg_values_supported",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of supported algorithms for issued access tokens",
                        "items": "String"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "JWKList",
                "comment": "JSON Web Key (JWK) List",
                "fields": [
                    {
                        "name": "keys",
                        "type": "Array",
                        "optional": false,
                        "comment": "array of JWKs",
                        "items": "JWK"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "OIDCResponse",
                "fields": [
                    {
                        "name": "version",
                        "type": "Int32",
                        "optional": false,
                        "comment": "version number"
                    },
                    {
                        "name": "id_token",
                        "type": "String",
                        "optional": false,
                        "comment": "id token"
                    },
                    {
                        "name": "token_type",
                        "type": "String",
                        "optional": false,
                        "comment": "token type e.g. urn:ietf:params:oauth:token-type:id_token"
                    },
                    {
                        "name": "success",
                        "type": "Bool",
                        "optional": false,
                        "comment": "response status"
                    },
                    {
                        "name": "expiration_time",
                        "type": "Int64",
                        "optional": false,
                        "comment": "expiration time in UTC"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "InstanceRegisterInformation",
                "fields": [
                    {
                        "name": "provider",
                        "type": "ServiceName",
                        "optional": false,
                        "comment": "the provider service name (i.e. \"aws.us-west-2\", \"sys.openstack.cluster1\")"
                    },
                    {
                        "name": "domain",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "the domain of the instance"
                    },
                    {
                        "name": "service",
                        "type": "SimpleName",
                        "optional": false,
                        "comment": "the service this instance is supposed to run"
                    },
                    {
                        "name": "attestationData",
                        "type": "String",
                        "optional": false,
                        "comment": "identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc."
                    },
                    {
                        "name": "csr",
                        "type": "String",
                        "optional": false,
                        "comment": "the Certificate Signing Request for the expected X.509 certificate in the response"
                    },
                    {
                        "name": "ssh",
                        "type": "String",
                        "optional": true,
                        "comment": "deprecated - use sshCertRequest, if present, return an SSH host certificate. Format is JSON."
                    },
                    {
                        "name": "sshCertRequest",
                        "type": "SSHCertRequest",
                        "optional": true,
                        "comment": "if present, return an SSH host certificate"
                    },
                    {
                        "name": "token",
                        "type": "Bool",
                        "optional": true,
                        "comment": "if true, return a service token signed by ZTS for this service"
                    },
                    {
                        "name": "expiryTime",
                        "type": "Int32",
                        "optional": true,
                        "comment": "expiry time in minutes for the certificate (server enforces max expiry)"
                    },
                    {
                        "name": "hostname",
                        "type": "DomainName",
                        "optional": true,
                        "comment": "optional hostname in case included in the csr SAN dnsName attribute"
                    },
                    {
                        "name": "hostCnames",
                        "type": "Array",
                        "optional": true,
                        "comment": "optional host CNAMEs included in the csr SAN dnsName attribute",
                        "items": "DomainName"
                    },
                    {
                        "name": "athenzJWK",
                        "type": "Bool",
                        "optional": true,
                        "comment": "if true, return an Athenz JWK public keys file"
                    },
                    {
                        "name": "athenzJWKModified",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "return the public keys file only if modified after the given timestamp"
                    },
                    {
                        "name": "namespace",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "spiffe/k8s namespace value"
                    },
                    {
                        "name": "cloud",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "optional cloud name where the instance is bootstrapped. e.g. aws / gcp / azure / openstack etc."
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "InstanceRefreshInformation",
                "fields": [
                    {
                        "name": "attestationData",
                        "type": "String",
                        "optional": true,
                        "comment": "identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc."
                    },
                    {
                        "name": "csr",
                        "type": "String",
                        "optional": true,
                        "comment": "the Certificate Signing Request for the expected X.509 certificate in the response"
                    },
                    {
                        "name": "ssh",
                        "type": "String",
                        "optional": true,
                        "comment": "deprecated - use sshCertRequest, if present, return an SSH host certificate. Format is JSON."
                    },
                    {
                        "name": "sshCertRequest",
                        "type": "SSHCertRequest",
                        "optional": true,
                        "comment": "if present, return an SSH host certificate"
                    },
                    {
                        "name": "token",
                        "type": "Bool",
                        "optional": true,
                        "comment": "if true, return a service token signed by ZTS for this service"
                    },
                    {
                        "name": "expiryTime",
                        "type": "Int32",
                        "optional": true,
                        "comment": "expiry time in minutes for the certificate (server enforces max expiry)"
                    },
                    {
                        "name": "hostname",
                        "type": "DomainName",
                        "optional": true,
                        "comment": "optional hostname in case included in the csr SAN dnsName attribute"
                    },
                    {
                        "name": "hostCnames",
                        "type": "Array",
                        "optional": true,
                        "comment": "optional host CNAMEs included in the csr SAN dnsName attribute",
                        "items": "DomainName"
                    },
                    {
                        "name": "athenzJWK",
                        "type": "Bool",
                        "optional": true,
                        "comment": "if true, return an Athenz JWK public keys file"
                    },
                    {
                        "name": "athenzJWKModified",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "return the public keys file only if modified after the given timestamp"
                    },
                    {
                        "name": "namespace",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "spiffe/k8s namespace value"
                    },
                    {
                        "name": "cloud",
                        "type": "SimpleName",
                        "optional": true,
                        "comment": "optional cloud name where the instance is bootstrapped. e.g. aws / gcp / azure / openstack etc."
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "InstanceRegisterToken",
                "fields": [
                    {
                        "name": "provider",
                        "type": "ServiceName",
                        "optional": false,
                        "comment": "provider service name"
                    },
                    {
                        "name": "domain",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "the domain of the instance"
                    },
                    {
                        "name": "service",
                        "type": "SimpleName",
                        "optional": false,
                        "comment": "the service this instance is supposed to run"
                    },
                    {
                        "name": "attestationData",
                        "type": "String",
                        "optional": false,
                        "comment": "identity attestation data including document with its signature containing attributes like IP address, instance-id, account#, etc."
                    },
                    {
                        "name": "attributes",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional non-signed attributes that assist in attestation. I.e. \"keyId\", \"accessKey\", etc",
                        "items": "String",
                        "keys": "String"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "AthenzJWKConfig",
                "fields": [
                    {
                        "name": "zms",
                        "type": "JWKList",
                        "optional": false,
                        "comment": "ZMS JSON Web Key (JWK) List"
                    },
                    {
                        "name": "zts",
                        "type": "JWKList",
                        "optional": false,
                        "comment": "ZTS JSON Web Key (JWK) List"
                    },
                    {
                        "name": "modified",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "the last modification timestamp of the Athenz JWK configuration"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "InstanceIdentity",
                "fields": [
                    {
                        "name": "provider",
                        "type": "ServiceName",
                        "optional": false,
                        "comment": "the provider service name (i.e. \"aws.us-west-2\", \"sys.openstack.cluster1\")"
                    },
                    {
                        "name": "name",
                        "type": "ServiceName",
                        "optional": false,
                        "comment": "name of the identity, fully qualified, i.e. my.domain.service1"
                    },
                    {
                        "name": "instanceId",
                        "type": "PathElement",
                        "optional": false,
                        "comment": "unique instance id within provider's namespace"
                    },
                    {
                        "name": "x509Certificate",
                        "type": "String",
                        "optional": true,
                        "comment": "an X.509 certificate usable for both client and server in TLS connections"
                    },
                    {
                        "name": "x509CertificateSigner",
                        "type": "String",
                        "optional": true,
                        "comment": "the CA certificate chain to verify all generated X.509 certs"
                    },
                    {
                        "name": "sshCertificate",
                        "type": "String",
                        "optional": true,
                        "comment": "the SSH certificate, signed by the CA (user or host)"
                    },
                    {
                        "name": "sshCertificateSigner",
                        "type": "String",
                        "optional": true,
                        "comment": "the SSH CA's public key for the sshCertificate (user or host)"
                    },
                    {
                        "name": "serviceToken",
                        "type": "SignedToken",
                        "optional": true,
                        "comment": "service token instead of TLS certificate"
                    },
                    {
                        "name": "attributes",
                        "type": "Map",
                        "optional": true,
                        "comment": "other config-like attributes determined at boot time",
                        "items": "String",
                        "keys": "String"
                    },
                    {
                        "name": "athenzJWK",
                        "type": "AthenzJWKConfig",
                        "optional": true,
                        "comment": "the Athenz JSON Web Key (JWK) configuration object"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "CertificateAuthorityBundle",
                "fields": [
                    {
                        "name": "name",
                        "type": "SimpleName",
                        "optional": false,
                        "comment": "name of the bundle"
                    },
                    {
                        "name": "certs",
                        "type": "String",
                        "optional": false,
                        "comment": "set of certificates included in the bundle"
                    }
                ],
                "closed": false
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "DomainMetricType",
                "comment": "zpe metric attributes",
                "elements": [
                    {
                        "symbol": "ACCESS_ALLOWED"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_DENY"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_DENY_NO_MATCH"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_ALLOW"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_ERROR"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_TOKEN_INVALID"
                    },
                    {
                        "symbol": "ACCESS_Allowed_TOKEN_EXPIRED"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_DOMAIN_NOT_FOUND"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_DOMAIN_MISMATCH"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_DOMAIN_EXPIRED"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_DOMAIN_EMPTY"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_TOKEN_CACHE_FAILURE"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_TOKEN_CACHE_NOT_FOUND"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_TOKEN_CACHE_SUCCESS"
                    },
                    {
                        "symbol": "ACCESS_ALLOWED_TOKEN_VALIDATE"
                    },
                    {
                        "symbol": "LOAD_FILE_FAIL"
                    },
                    {
                        "symbol": "LOAD_FILE_GOOD"
                    },
                    {
                        "symbol": "LOAD_DOMAIN_GOOD"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "DomainMetric",
                "fields": [
                    {
                        "name": "metricType",
                        "type": "DomainMetricType",
                        "optional": false
                    },
                    {
                        "name": "metricVal",
                        "type": "Int32",
                        "optional": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "DomainMetrics",
                "fields": [
                    {
                        "name": "domainName",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "name of the domain the metrics pertain to"
                    },
                    {
                        "name": "metricList",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of the domains metrics",
                        "items": "DomainMetric"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Status",
                "comment": "The representation for a status object",
                "fields": [
                    {
                        "name": "code",
                        "type": "Int32",
                        "optional": false,
                        "comment": "status message code"
                    },
                    {
                        "name": "message",
                        "type": "String",
                        "optional": false,
                        "comment": "status message of the server"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Workload",
                "fields": [
                    {
                        "name": "domainName",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "name of the domain, optional for getWorkloadsByService API call"
                    },
                    {
                        "name": "serviceName",
                        "type": "EntityName",
                        "optional": false,
                        "comment": "name of the service, , optional for getWorkloadsByService API call"
                    },
                    {
                        "name": "uuid",
                        "type": "String",
                        "optional": false,
                        "comment": "unique identifier for the workload, usually defined by provider"
                    },
                    {
                        "name": "ipAddresses",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of IP addresses associated with the workload, optional for getWorkloadsByIP API call",
                        "items": "String"
                    },
                    {
                        "name": "hostname",
                        "type": "String",
                        "optional": false,
                        "comment": "hostname associated with the workload"
                    },
                    {
                        "name": "provider",
                        "type": "String",
                        "optional": false,
                        "comment": "infrastructure provider e.g. k8s, AWS, Azure, openstack etc."
                    },
                    {
                        "name": "updateTime",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "most recent update timestamp in the backend"
                    },
                    {
                        "name": "certExpiryTime",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "certificate expiry time (ex: getNotAfter)"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Workloads",
                "fields": [
                    {
                        "name": "workloadList",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of workloads",
                        "items": "Workload"
                    }
                ],
                "closed": false
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "TransportDirection",
                "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms.",
                "elements": [
                    {
                        "symbol": "IN"
                    },
                    {
                        "symbol": "OUT"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportRule",
                "fields": [
                    {
                        "name": "endPoint",
                        "type": "String",
                        "optional": false,
                        "comment": "source or destination endpoints defined in terms of CIDR notation"
                    },
                    {
                        "name": "sourcePortRange",
                        "type": "String",
                        "optional": false,
                        "comment": "range of port numbers for incoming connections"
                    },
                    {
                        "name": "port",
                        "type": "Int32",
                        "optional": false,
                        "comment": "destination / listener port of the service"
                    },
                    {
                        "name": "protocol",
                        "type": "String",
                        "optional": false,
                        "comment": "protocol of the connection"
                    },
                    {
                        "name": "direction",
                        "type": "TransportDirection",
                        "optional": false,
                        "comment": "transport direction"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportRules",
                "fields": [
                    {
                        "name": "ingressRules",
                        "type": "Array",
                        "optional": false,
                        "items": "TransportRule"
                    },
                    {
                        "name": "egressRules",
                        "type": "Array",
                        "optional": false,
                        "items": "TransportRule"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Info",
                "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms. The representation for an info object",
                "fields": [
                    {
                        "name": "buildJdkSpec",
                        "type": "String",
                        "optional": true,
                        "comment": "jdk build version"
                    },
                    {
                        "name": "implementationTitle",
                        "type": "String",
                        "optional": true,
                        "comment": "implementation title - e.g. athenz-zms-server"
                    },
                    {
                        "name": "implementationVersion",
                        "type": "String",
                        "optional": true,
                        "comment": "implementation version - e.g. 1.11.1"
                    },
                    {
                        "name": "implementationVendor",
                        "type": "String",
                        "optional": true,
                        "comment": "implementation vendor - Athenz"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "ExternalCredentialsRequest",
                "fields": [
                    {
                        "name": "clientId",
                        "type": "ServiceName",
                        "optional": false,
                        "comment": "client id to be referenced in the ID token as audience"
                    },
                    {
                        "name": "expiryTime",
                        "type": "Int32",
                        "optional": true,
                        "comment": "optional expiry period specified in seconds"
                    },
                    {
                        "name": "attributes",
                        "type": "Map",
                        "optional": true,
                        "comment": "credential request attributes",
                        "items": "String",
                        "keys": "String"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "ExternalCredentialsResponse",
                "fields": [
                    {
                        "name": "attributes",
                        "type": "Map",
                        "optional": false,
                        "comment": "credential response attributes",
                        "items": "String",
                        "keys": "String"
                    },
                    {
                        "name": "expiration",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "credential expiry timestamp"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "DomainDetails",
                "fields": [
                    {
                        "name": "name",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "name of the athenz domain"
                    },
                    {
                        "name": "awsAccount",
                        "type": "String",
                        "optional": true,
                        "comment": "associated aws account id"
                    },
                    {
                        "name": "azureSubscription",
                        "type": "String",
                        "optional": true,
                        "comment": "associated azure subscription id"
                    },
                    {
                        "name": "gcpProjectId",
                        "type": "String",
                        "optional": true,
                        "comment": "associated gcp project id"
                    },
                    {
                        "name": "gcpProjectNumber",
                        "type": "String",
                        "optional": true,
                        "comment": "associated gcp project number"
                    }
                ],
                "closed": false
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "rdl.Identifier",
                "comment": "All names need to be of this restricted string type",
                "pattern": "[a-zA-Z_]+[a-zA-Z_0-9]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "rdl.NamespacedIdentifier",
                "comment": "A Namespace is a dotted compound name, using reverse domain name order (i.e. \"com.yahoo.auth\")",
                "pattern": "([a-zA-Z_]+[a-zA-Z_0-9]*)(\\.[a-zA-Z_]+[a-zA-Z_0-9])*"
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "rdl.BaseType",
                "elements": [
                    {
                        "symbol": "Bool"
                    },
                    {
                        "symbol": "Int8"
                    },
                    {
                        "symbol": "Int16"
                    },
                    {
                        "symbol": "Int32"
                    },
                    {
                        "symbol": "Int64"
                    },
                    {
                        "symbol": "Float32"
                    },
                    {
                        "symbol": "Float64"
                    },
                    {
                        "symbol": "Bytes"
                    },
                    {
                        "symbol": "String"
                    },
                    {
                        "symbol": "Timestamp"
                    },
                    {
                        "symbol": "Symbol"
                    },
                    {
                        "symbol": "UUID"
                    },
                    {
                        "symbol": "Array"
                    },
                    {
                        "symbol": "Map"
                    },
                    {
                        "symbol": "Struct"
                    },
                    {
                        "symbol": "Enum"
                    },
                    {
                        "symbol": "Union"
                    },
                    {
                        "symbol": "Any"
                    }
                ]
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "rdl.ExtendedAnnotation",
                "comment": "ExtendedAnnotation - parsed and preserved, but has no defined meaning in RDL. Such annotations must begin with \"x_\", and may have an associated string literal value (the value will be \"\" if the annotation is just a flag).",
                "pattern": "x_[a-zA-Z_0-9]*"
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.TypeDef",
                "comment": "TypeDef is the basic type definition.",
                "fields": [
                    {
                        "name": "type",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type this type is derived from. For base types, it is the same as the name"
                    },
                    {
                        "name": "name",
                        "type": "rdl.TypeName",
                        "optional": false,
                        "comment": "The name of the type"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "The comment for the type"
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.AliasTypeDef",
                "comment": "AliasTypeDef is used for type definitions that add no additional attributes, and thus just create an alias",
                "fields": [],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.BytesTypeDef",
                "comment": "Bytes allow the restriction by fixed size, or min/max size.",
                "fields": [
                    {
                        "name": "size",
                        "type": "Int32",
                        "optional": true,
                        "comment": "Fixed size"
                    },
                    {
                        "name": "minSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "Min size"
                    },
                    {
                        "name": "maxSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "Max size"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.StringTypeDef",
                "comment": "Strings allow the restriction by regular expression pattern or by an explicit set of values. An optional maximum size may be asserted",
                "fields": [
                    {
                        "name": "pattern",
                        "type": "String",
                        "optional": true,
                        "comment": "A regular expression that must be matched. Mutually exclusive with values"
                    },
                    {
                        "name": "values",
                        "type": "Array",
                        "optional": true,
                        "comment": "A set of allowable values",
                        "items": "String"
                    },
                    {
                        "name": "minSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "Min size"
                    },
                    {
                        "name": "maxSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "Max size"
                    }
                ],
                "closed": false
            }
        },
        {
            "UnionTypeDef": {
                "type": "Union",
                "name": "rdl.Number",
                "comment": "A numeric is any of the primitive numeric types",
                "variants": [
                    "Int8",
                    "Int16",
                    "Int32",
                    "Int64",
                    "Float32",
                    "Float64"
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.NumberTypeDef",
                "comment": "A number type definition allows the restriction of numeric values.",
                "fields": [
                    {
                        "name": "min",
                        "type": "rdl.Number",
                        "optional": true,
                        "comment": "Min value"
                    },
                    {
                        "name": "max",
                        "type": "rdl.Number",
                        "optional": true,
                        "comment": "Max value"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.ArrayTypeDef",
                "comment": "Array types can be restricted by item type and size",
                "fields": [
                    {
                        "name": "items",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the items, default to any type"
                    },
                    {
                        "name": "size",
                        "type": "Int32",
                        "optional": true,
                        "comment": "If present, indicate the fixed size."
                    },
                    {
                        "name": "minSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "If present, indicate the min size"
                    },
                    {
                        "name": "maxSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "If present, indicate the max size"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.MapTypeDef",
                "comment": "Map types can be restricted by key type, item type and size",
                "fields": [
                    {
                        "name": "keys",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the keys, default to String."
                    },
                    {
                        "name": "items",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the items, default to Any type"
                    },
                    {
                        "name": "size",
                        "type": "Int32",
                        "optional": true,
                        "comment": "If present, indicates the fixed size."
                    },
                    {
                        "name": "minSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "If present, indicate the min size"
                    },
                    {
                        "name": "maxSize",
                        "type": "Int32",
                        "optional": true,
                        "comment": "If present, indicate the max size"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.StructFieldDef",
                "comment": "Each field in a struct_field_spec is defined by this type",
                "fields": [
                    {
                        "name": "name",
                        "type": "rdl.Identifier",
                        "optional": false,
                        "comment": "The name of the field"
                    },
                    {
                        "name": "type",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the field"
                    },
                    {
                        "name": "optional",
                        "type": "Bool",
                        "optional": false,
                        "comment": "The field may be omitted even if specified",
                        "default": false
                    },
                    {
                        "name": "default",
                        "type": "Any",
                        "optional": true,
                        "comment": "If field is absent, what default value should be assumed."
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "The comment for the field"
                    },
                    {
                        "name": "items",
                        "type": "rdl.TypeRef",
                        "optional": true,
                        "comment": "For map or array fields, the type of the items"
                    },
                    {
                        "name": "keys",
                        "type": "rdl.TypeRef",
                        "optional": true,
                        "comment": "For map type fields, the type of the keys"
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.StructTypeDef",
                "comment": "A struct can restrict specific named fields to specific types. By default, any field not specified is allowed, and can be of any type. Specifying closed means only those fields explicitly",
                "fields": [
                    {
                        "name": "fields",
                        "type": "Array",
                        "optional": false,
                        "comment": "The fields in this struct. By default, open Structs can have any fields in addition to these",
                        "items": "rdl.StructFieldDef"
                    },
                    {
                        "name": "closed",
                        "type": "Bool",
                        "optional": false,
                        "comment": "indicates that only the specified fields are acceptable. Default is open (any fields)",
                        "default": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.EnumElementDef",
                "comment": "EnumElementDef defines one of the elements of an Enum",
                "fields": [
                    {
                        "name": "symbol",
                        "type": "rdl.Identifier",
                        "optional": false,
                        "comment": "The identifier representing the value"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "the comment for the element"
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.EnumTypeDef",
                "comment": "Define an enumerated type. Each value of the type is represented by a symbolic identifier.",
                "fields": [
                    {
                        "name": "elements",
                        "type": "Array",
                        "optional": false,
                        "comment": "The enumeration of the possible elements",
                        "items": "rdl.EnumElementDef"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "rdl.TypeDef",
                "name": "rdl.UnionTypeDef",
                "comment": "Define a type as one of any other specified type.",
                "fields": [
                    {
                        "name": "variants",
                        "type": "Array",
                        "optional": false,
                        "comment": "The type names of constituent types. Union types get expanded, this is a flat list",
                        "items": "rdl.TypeRef"
                    }
                ],
                "closed": false
            }
        },
        {
            "UnionTypeDef": {
                "type": "Union",
                "name": "rdl.Type",
                "comment": "A Type can be specified by any of the above specialized Types, determined by the value of the the 'type' field",
                "variants": [
                    "rdl.BaseType",
                    "rdl.StructTypeDef",
                    "rdl.MapTypeDef",
                    "rdl.ArrayTypeDef",
                    "rdl.EnumTypeDef",
                    "rdl.UnionTypeDef",
                    "rdl.StringTypeDef",
                    "rdl.BytesTypeDef",
                    "rdl.NumberTypeDef",
                    "rdl.AliasTypeDef"
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.ResourceInput",
                "comment": "ResourceOutput defines input characteristics of a Resource",
                "fields": [
                    {
                        "name": "name",
                        "type": "rdl.Identifier",
                        "optional": false,
                        "comment": "the formal name of the input"
                    },
                    {
                        "name": "type",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the input"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "The optional comment"
                    },
                    {
                        "name": "pathParam",
                        "type": "Bool",
                        "optional": false,
                        "comment": "true of this input is a path parameter",
                        "default": false
                    },
                    {
                        "name": "queryParam",
                        "type": "String",
                        "optional": true,
                        "comment": "if present, the name of the query param name"
                    },
                    {
                        "name": "header",
                        "type": "String",
                        "optional": true,
                        "comment": "If present, the name of the header the input is associated with"
                    },
                    {
                        "name": "pattern",
                        "type": "String",
                        "optional": true,
                        "comment": "If present, the pattern associated with the pathParam (i.e. wildcard path matches)"
                    },
                    {
                        "name": "default",
                        "type": "Any",
                        "optional": true,
                        "comment": "If present, the default value for optional params"
                    },
                    {
                        "name": "optional",
                        "type": "Bool",
                        "optional": false,
                        "comment": "If present, indicates that the input is optional",
                        "default": false
                    },
                    {
                        "name": "flag",
                        "type": "Bool",
                        "optional": false,
                        "comment": "If present, indicates the queryparam is of flag style (no value)",
                        "default": false
                    },
                    {
                        "name": "context",
                        "type": "String",
                        "optional": true,
                        "comment": "If present, indicates the parameter comes form the implementation context"
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.ResourceOutput",
                "comment": "ResourceOutput defines output characteristics of a Resource",
                "fields": [
                    {
                        "name": "name",
                        "type": "rdl.Identifier",
                        "optional": false,
                        "comment": "the formal name of the output"
                    },
                    {
                        "name": "type",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the output"
                    },
                    {
                        "name": "header",
                        "type": "String",
                        "optional": false,
                        "comment": "the name of the header associated with this output"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "The optional comment for the output"
                    },
                    {
                        "name": "optional",
                        "type": "Bool",
                        "optional": false,
                        "comment": "If present, indicates that the output is optional (the server decides)",
                        "default": false
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.ResourceAuth",
                "comment": "ResourceAuth defines authentication and authorization attributes of a resource. Presence of action, resource, or domain implies authentication; the authentication flag alone is required only when no authorization is done.",
                "fields": [
                    {
                        "name": "authenticate",
                        "type": "Bool",
                        "optional": false,
                        "comment": "if present and true, then the requester must be authenticated",
                        "default": false
                    },
                    {
                        "name": "action",
                        "type": "String",
                        "optional": true,
                        "comment": "the action to authorize access to. This forces authentication"
                    },
                    {
                        "name": "resource",
                        "type": "String",
                        "optional": true,
                        "comment": "the resource identity to authorize access to"
                    },
                    {
                        "name": "domain",
                        "type": "String",
                        "optional": true,
                        "comment": "if present, the alternate domain to check access to. This is rare."
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.ExceptionDef",
                "comment": "ExceptionDef describes the exception a symbolic response code maps to.",
                "fields": [
                    {
                        "name": "type",
                        "type": "String",
                        "optional": false,
                        "comment": "The type of the exception"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "the optional comment for the exception"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.Resource",
                "comment": "A Resource of a REST service",
                "fields": [
                    {
                        "name": "type",
                        "type": "rdl.TypeRef",
                        "optional": false,
                        "comment": "The type of the resource"
                    },
                    {
                        "name": "method",
                        "type": "String",
                        "optional": false,
                        "comment": "The method for the action (typically GET, POST, etc for HTTP access)"
                    },
                    {
                        "name": "path",
                        "type": "String",
                        "optional": false,
                        "comment": "The resource path template"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "The optional comment"
                    },
                    {
                        "name": "inputs",
                        "type": "Array",
                        "optional": true,
                        "comment": "An Array named inputs",
                        "items": "rdl.ResourceInput"
                    },
                    {
                        "name": "outputs",
                        "type": "Array",
                        "optional": true,
                        "comment": "An Array of named outputs",
                        "items": "rdl.ResourceOutput"
                    },
                    {
                        "name": "auth",
                        "type": "rdl.ResourceAuth",
                        "optional": true,
                        "comment": "The optional authentication or authorization directive"
                    },
                    {
                        "name": "expected",
                        "type": "String",
                        "optional": false,
                        "comment": "The expected symbolic response code",
                        "default": "OK"
                    },
                    {
                        "name": "alternatives",
                        "type": "Array",
                        "optional": true,
                        "comment": "The set of alternative but non-error response codes",
                        "items": "String"
                    },
                    {
                        "name": "exceptions",
                        "type": "Map",
                        "optional": true,
                        "comment": "A map of symbolic response code to Exception definitions",
                        "items": "rdl.ExceptionDef",
                        "keys": "String"
                    },
                    {
                        "name": "async",
                        "type": "Bool",
                        "optional": true,
                        "comment": "A hint to server implementations that this resource would be better implemented with async I/O"
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    },
                    {
                        "name": "consumes",
                        "type": "Array",
                        "optional": true,
                        "comment": "Optional hint for resource acceptable input types",
                        "items": "String"
                    },
                    {
                        "name": "produces",
                        "type": "Array",
                        "optional": true,
                        "comment": "Optional hint for resource output content types",
                        "items": "String"
                    },
                    {
                        "name": "name",
                        "type": "rdl.Identifier",
                        "optional": true,
                        "comment": "The optional name of the resource"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "rdl.Schema",
                "comment": "A Schema is a container for types and resources. It is self-contained (no external references). and is the output of the RDL parser.",
                "fields": [
                    {
                        "name": "namespace",
                        "type": "rdl.NamespacedIdentifier",
                        "optional": true,
                        "comment": "The namespace for the schema"
                    },
                    {
                        "name": "name",
                        "type": "rdl.Identifier",
                        "optional": true,
                        "comment": "The name of the schema"
                    },
                    {
                        "name": "version",
                        "type": "Int32",
                        "optional": true,
                        "comment": "The version of the schema"
                    },
                    {
                        "name": "comment",
                        "type": "String",
                        "optional": true,
                        "comment": "The comment for the entire schema"
                    },
                    {
                        "name": "types",
                        "type": "Array",
                        "optional": true,
                        "comment": "The types this schema defines.",
                        "items": "rdl.Type"
                    },
                    {
                        "name": "resources",
                        "type": "Array",
                        "optional": true,
                        "comment": "The resources for a service this schema defines",
                        "items": "rdl.Resource"
                    },
                    {
                        "name": "base",
                        "type": "String",
                        "optional": true,
                        "comment": "the base path for resources in the schema."
                    },
                    {
                        "name": "annotations",
                        "type": "Map",
                        "optional": true,
                        "comment": "additional annotations starting with \"x_\"",
                        "items": "String",
                        "keys": "rdl.ExtendedAnnotation"
                    }
                ],
                "closed": false
            }
        }
    ],
    "resources": [
        {
            "type": "ResourceAccess",
            "method": "GET",
            "path": "/access/{action}/{resource}",
            "comment": "Check access for the specified operation on the specified resource for the currently authenticated user. This is the slow centralized access for control-plane purposes. Use distributed mechanisms for decentralized (data-plane) access by fetching signed policies and role tokens for users. With this endpoint the resource is part of the uri and restricted to its strict definition of resource name. If needed, you can use the GetAccessExt api that allows resource name to be less restrictive.",
            "inputs": [
                {
                    "name": "action",
                    "type": "ActionName",
                    "comment": "action as specified in the policy assertion, i.e. update or read",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "resource",
                    "type": "ResourceName",
                    "comment": "the resource to check access against, i.e. \"media.news:articles\"",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "domain",
                    "type": "DomainName",
                    "comment": "usually null. If present, it specifies an alternate domain for cross-domain trust relation",
                    "pathParam": false,
                    "queryParam": "domain",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "checkPrincipal",
                    "type": "EntityName",
                    "comment": "usually null. If present, carry out the access check for this principal",
                    "pathParam": false,
                    "queryParam": "principal",
                    "optional": true,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "ResourceAccess",
            "method": "GET",
            "path": "/access/{action}",
            "comment": "Check access for the specified operation on the specified resource for the currently authenticated user. This is the slow centralized access for control-plane purposes.",
            "inputs": [
                {
                    "name": "action",
                    "type": "ActionName",
                    "comment": "action as specified in the policy assertion, i.e. update or read",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "resource",
                    "type": "String",
                    "comment": "the resource to check access against, i.e. \"media.news:articles\"",
                    "pathParam": false,
                    "queryParam": "resource",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "domain",
                    "type": "DomainName",
                    "comment": "usually null. If present, it specifies an alternate domain for cross-domain trust relation",
                    "pathParam": false,
                    "queryParam": "domain",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "checkPrincipal",
                    "type": "EntityName",
                    "comment": "usually null. If present, carry out the access check for this principal",
                    "pathParam": false,
                    "queryParam": "principal",
                    "optional": true,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "GetResourceAccessExt"
        },
        {
            "type": "ServiceIdentity",
            "method": "GET",
            "path": "/domain/{domainName}/service/{serviceName}",
            "comment": "Get info for the specified ServiceIdentity.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "ServiceName",
                    "comment": "name of the service to be retrieved",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "ServiceIdentityList",
            "method": "GET",
            "path": "/domain/{domainName}/service",
            "comment": "Enumerate services provisioned in this domain.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "PublicKeyEntry",
            "method": "GET",
            "path": "/domain/{domainName}/service/{serviceName}/publickey/{keyId}",
            "comment": "Retrieve the specified public key from the service.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "SimpleName",
                    "comment": "name of the service",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "keyId",
                    "type": "String",
                    "comment": "the identifier of the public key to be retrieved",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "HostServices",
            "method": "GET",
            "path": "/host/{host}/services",
            "comment": "Enumerate services provisioned on a specific host",
            "inputs": [
                {
                    "name": "host",
                    "type": "String",
                    "comment": "name of the host",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "DomainSignedPolicyData",
            "method": "GET",
            "path": "/domain/{domainName}/signed_policy_data",
            "comment": "Get a signed policy enumeration from the service, to transfer to a local store. An ETag is generated for the PolicyList that changes when any item in the list changes. If the If-None-Match header is provided, and it matches the ETag that would be returned, then a NOT_MODIFIED response is returned instead of the list.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "matchingTag",
                    "type": "String",
                    "comment": "Retrieved from the previous request, this timestamp specifies to the server to return any policies modified since this time",
                    "pathParam": false,
                    "header": "If-None-Match",
                    "optional": true,
                    "flag": false
                }
            ],
            "outputs": [
                {
                    "name": "tag",
                    "type": "String",
                    "header": "ETag",
                    "comment": "The current latest modification timestamp is returned in this header",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "SignedPolicyRequest",
            "method": "POST",
            "path": "/domain/{domainName}/policy/signed",
            "comment": "Get a signed policy enumeration from the service, to transfer to a local store. An ETag is generated for the PolicyList that changes when any item in the list changes. If the If-None-Match header is provided, and it matches the ETag that would be returned, then a NOT_MODIFIED response is returned instead of the list.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "request",
                    "type": "SignedPolicyRequest",
                    "comment": "policy version request details",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "matchingTag",
                    "type": "String",
                    "comment": "Retrieved from the previous request, this timestamp specifies to the server to return any policies modified since this time",
                    "pathParam": false,
                    "header": "If-None-Match",
                    "optional": true,
                    "flag": false
                }
            ],
            "outputs": [
                {
                    "name": "tag",
                    "type": "String",
                    "header": "ETag",
                    "comment": "The current latest modification timestamp is returned in this header",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "RoleToken",
            "method": "GET",
            "path": "/domain/{domainName}/token",
            "comment": "Return a security token for the specific role in the namespace that the principal can assume. If the role is omitted, then all roles in the namespace that the authenticated user can assume are returned. the caller can specify how long the RoleToken should be valid for by specifying the minExpiryTime and maxExpiryTime parameters. The minExpiryTime specifies that the returned RoleToken must be at least valid (min/lower bound) for specified number of seconds, while maxExpiryTime specifies that the RoleToken must be at most valid (max/upper bound) for specified number of seconds. If both values are the same, the server must return a RoleToken for that many seconds. If no values are specified, the server's default RoleToken Timeout value is used.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "role",
                    "type": "EntityList",
                    "comment": "only interested for a token for these comma separated roles",
                    "pathParam": false,
                    "queryParam": "role",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "minExpiryTime",
                    "type": "Int32",
                    "comment": "in seconds min expiry time",
                    "pathParam": false,
                    "queryParam": "minExpiryTime",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "maxExpiryTime",
                    "type": "Int32",
                    "comment": "in seconds max expiry time",
                    "pathParam": false,
                    "queryParam": "maxExpiryTime",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "proxyForPrincipal",
                    "type": "EntityName",
                    "comment": "optional this request is proxy for this principal",
                    "pathParam": false,
                    "queryParam": "proxyForPrincipal",
                    "optional": true,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "RoleCertificateRequest",
            "method": "POST",
            "path": "/domain/{domainName}/role/{roleName}/token",
            "comment": "Return a TLS certificate for the specific role in the namespace that the principal can assume. Role certificates are valid for 30 days by default. This is deprecated and \"POST /rolecert\" api should be used instead.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "roleName",
                    "type": "EntityName",
                    "comment": "name of role",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "req",
                    "type": "RoleCertificateRequest",
                    "comment": "csr request",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "Access",
            "method": "GET",
            "path": "/access/domain/{domainName}/role/{roleName}/principal/{principal}",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "roleName",
                    "type": "EntityName",
                    "comment": "name of the role to check access for",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "principal",
                    "type": "EntityName",
                    "comment": "carry out the access check for this principal",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "RoleAccess",
            "method": "GET",
            "path": "/access/domain/{domainName}/principal/{principal}",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "principal",
                    "type": "EntityName",
                    "comment": "carry out the role access lookup for this principal",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "TenantDomains",
            "method": "GET",
            "path": "/providerdomain/{providerDomainName}/user/{userName}",
            "comment": "Get list of tenant domains user has access to for specified provider domain and service",
            "inputs": [
                {
                    "name": "providerDomainName",
                    "type": "DomainName",
                    "comment": "name of the provider domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "userName",
                    "type": "EntityName",
                    "comment": "name of the user to retrieve tenant domain access for",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "roleName",
                    "type": "EntityName",
                    "comment": "role name to filter on when looking for the tenants in provider",
                    "pathParam": false,
                    "queryParam": "roleName",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "ServiceName",
                    "comment": "service name to filter on when looking for the tenants in provider",
                    "pathParam": false,
                    "queryParam": "serviceName",
                    "optional": true,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "InstanceRefreshRequest",
            "method": "POST",
            "path": "/instance/{domain}/{service}/refresh",
            "comment": "Refresh Service tokens into TLS Certificate",
            "inputs": [
                {
                    "name": "domain",
                    "type": "CompoundName",
                    "comment": "name of the domain requesting the refresh",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "service",
                    "type": "SimpleName",
                    "comment": "name of the service requesting the refresh",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "req",
                    "type": "InstanceRefreshRequest",
                    "comment": "the refresh request",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "INTERNAL_SERVER_ERROR": {
                    "type": "ResourceError"
                },
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "AWSTemporaryCredentials",
            "method": "GET",
            "path": "/domain/{domainName}/role/{role}/creds",
            "comment": "perform an AWS AssumeRole of the target role and return the credentials. ZTS must have been granted the ability to assume the role in IAM, and granted the ability to assume_aws_role in Athenz for this to succeed.",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain containing the role, which implies the target account",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "role",
                    "type": "AWSArnRoleName",
                    "comment": "the target AWS role name in the domain account, in Athenz terms, i.e. \"the.role\"",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "durationSeconds",
                    "type": "Int32",
                    "comment": "how long the aws temp creds should be issued for",
                    "pathParam": false,
                    "queryParam": "durationSeconds",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "externalId",
                    "type": "String",
                    "comment": "aws assume role external id",
                    "pathParam": false,
                    "queryParam": "externalId",
                    "optional": true,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "InstanceRegisterInformation",
            "method": "POST",
            "path": "/instance",
            "comment": "Register a new service instance and issue an x.509 service identity certificate once the provider validates the attestation data along with the request attributes. We have an authenticate enabled for this endpoint but in most cases the service owner might need to make it optional by setting the zts servers no_auth_uri list to include this endpoint. We need the authenticate in case the request comes with a client certificate and the provider needs to know who that principal was in the client certificate",
            "inputs": [
                {
                    "name": "info",
                    "type": "InstanceRegisterInformation",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "outputs": [
                {
                    "name": "location",
                    "type": "String",
                    "header": "Location",
                    "comment": "return location for subsequent patch requests",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "CREATED",
            "exceptions": {
                "INTERNAL_SERVER_ERROR": {
                    "type": "ResourceError"
                },
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "InstanceRefreshInformation",
            "method": "POST",
            "path": "/instance/{provider}/{domain}/{service}/{instanceId}",
            "comment": "Refresh the given service instance and issue a new x.509 service identity certificate once the provider validates the attestation data along with the request attributes. only TLS Certificate authentication is allowed",
            "inputs": [
                {
                    "name": "provider",
                    "type": "ServiceName",
                    "comment": "the provider service name (i.e. \"aws.us-west-2\", \"paas.manhattan.corp-gq1\")",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "domain",
                    "type": "DomainName",
                    "comment": "the domain of the instance",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "service",
                    "type": "SimpleName",
                    "comment": "the service this instance is supposed to run",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "instanceId",
                    "type": "PathElement",
                    "comment": "unique instance id within provider's namespace",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "info",
                    "type": "InstanceRefreshInformation",
                    "comment": "the refresh request",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "INTERNAL_SERVER_ERROR": {
                    "type": "ResourceError"
                },
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "InstanceRegisterToken",
            "method": "GET",
            "path": "/instance/{provider}/{domain}/{service}/{instanceId}/token",
            "comment": "Request a token for the given service to be bootstrapped for the given provider. The caller must have authorization to manage the service in the given domain. The token will be valid for 30 mins for one time use only for the initial registration. The token must be sent back in the register request as the value of the attestationData field in the InstanceRegisterInformation object",
            "inputs": [
                {
                    "name": "provider",
                    "type": "ServiceName",
                    "comment": "the provider service name (i.e. \"aws.us-west-2\")",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "domain",
                    "type": "DomainName",
                    "comment": "the domain of the instance",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "service",
                    "type": "SimpleName",
                    "comment": "the service this instance is supposed to run",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "instanceId",
                    "type": "PathElement",
                    "comment": "unique instance id within provider's namespace",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": false,
                "action": "update",
                "resource": "{domain}:service.{service}"
            },
            "expected": "OK",
            "exceptions": {
                "INTERNAL_SERVER_ERROR": {
                    "type": "ResourceError"
                },
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "InstanceIdentity",
            "method": "DELETE",
            "path": "/instance/{provider}/{domain}/{service}/{instanceId}",
            "comment": "Delete the given service instance certificate record thus blocking any future refresh requests from the given instance for this service There are two possible authorization checks for this endpoint: 1) domain admin: authorize(\"delete\", \"{domain}:instance.{instanceId}\") the authorized user can remove the instance record from the datastore 2) provider itself: if the identity of the caller is the provider itself then the provider is notifying ZTS that the instance was deleted",
            "inputs": [
                {
                    "name": "provider",
                    "type": "ServiceName",
                    "comment": "the provider service name (i.e. \"aws.us-west-2\", \"paas.manhattan.corp-gq1\")",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "domain",
                    "type": "DomainName",
                    "comment": "the domain of the instance",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "service",
                    "type": "SimpleName",
                    "comment": "the service this instance is supposed to run",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "instanceId",
                    "type": "PathElement",
                    "comment": "unique instance id within provider's namespace",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "NO_CONTENT",
            "exceptions": {
                "INTERNAL_SERVER_ERROR": {
                    "type": "ResourceError"
                },
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "CertificateAuthorityBundle",
            "method": "GET",
            "path": "/cacerts/{name}",
            "comment": "Return the request CA X.509 Certificate bundle",
            "inputs": [
                {
                    "name": "name",
                    "type": "SimpleName",
                    "comment": "name of the CA cert bundle",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "Status",
            "method": "GET",
            "path": "/status",
            "comment": "Retrieve the server status",
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "SSHCertRequest",
            "method": "POST",
            "path": "/sshcert",
            "inputs": [
                {
                    "name": "certRequest",
                    "type": "SSHCertRequest",
                    "comment": "ssh certificate request",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "CREATED",
            "exceptions": {
                "INTERNAL_SERVER_ERROR": {
                    "type": "ResourceError"
                },
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "OpenIDConfig",
            "method": "GET",
            "path": "/.well-known/openid-configuration",
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "OAuthConfig",
            "method": "GET",
            "path": "/.well-known/oauth-authorization-server",
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "JWKList",
            "method": "GET",
            "path": "/oauth2/keys",
            "inputs": [
                {
                    "name": "rfc",
                    "type": "Bool",
                    "comment": "flag to indicate ec curve names are restricted to RFC values",
                    "pathParam": false,
                    "queryParam": "rfc",
                    "optional": false,
                    "flag": false,
                    "default": false
                }
            ],
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "AccessTokenRequest",
            "method": "POST",
            "path": "/oauth2/token",
            "comment": "Fetch OAuth2 Access Token",
            "inputs": [
                {
                    "name": "request",
                    "type": "AccessTokenRequest",
                    "comment": "token request details include scope",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "OIDCResponse",
            "method": "GET",
            "path": "/oauth2/auth",
            "comment": "Fetch OAuth OpenID Connect ID Token",
            "inputs": [
                {
                    "name": "responseType",
                    "type": "String",
                    "comment": "response type - currently only supporting id tokens - id_token",
                    "pathParam": false,
                    "queryParam": "response_type",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "clientId",
                    "type": "ServiceName",
                    "comment": "client id - must be valid athenz service identity name",
                    "pathParam": false,
                    "queryParam": "client_id",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "redirectUri",
                    "type": "String",
                    "comment": "redirect uri for the response",
                    "pathParam": false,
                    "queryParam": "redirect_uri",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "scope",
                    "type": "String",
                    "comment": "id token scope",
                    "pathParam": false,
                    "queryParam": "scope",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "state",
                    "type": "EntityName",
                    "comment": "optional state claim included in the response location header",
                    "pathParam": false,
                    "queryParam": "state",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "nonce",
                    "type": "EntityName",
                    "comment": "nonce claim included in the id token",
                    "pathParam": false,
                    "queryParam": "nonce",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "keyType",
                    "type": "SimpleName",
                    "comment": "optional signing key type - RSA or EC. Might be ignored if server doesn't have the requested type configured",
                    "pathParam": false,
                    "queryParam": "keyType",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "fullArn",
                    "type": "Bool",
                    "comment": "flag to indicate to use full arn in group claim (e.g. sports:role.deployer instead of deployer)",
                    "pathParam": false,
                    "queryParam": "fullArn",
                    "optional": false,
                    "flag": false,
                    "default": false
                },
                {
                    "name": "expiryTime",
                    "type": "Int32",
                    "comment": "optional expiry period specified in seconds",
                    "pathParam": false,
                    "queryParam": "expiryTime",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "output",
                    "type": "SimpleName",
                    "comment": "optional output format of json",
                    "pathParam": false,
                    "queryParam": "output",
                    "optional": true,
                    "flag": false
                },
                {
                    "name": "roleInAudClaim",
                    "type": "Bool",
                    "comment": "flag to indicate to include role name in the audience claim only if we have a single role in response",
                    "pathParam": false,
                    "queryParam": "roleInAudClaim",
                    "optional": false,
                    "flag": false,
                    "default": false
                }
            ],
            "outputs": [
                {
                    "name": "location",
                    "type": "String",
                    "header": "Location",
                    "comment": "return location header with id token",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "RoleCertificateRequest",
            "method": "POST",
            "path": "/rolecert",
            "comment": "Return a TLS certificate for a role that the principal can assume. The role arn is in the CN field of the Subject and the principal is in the SAN URI field.",
            "inputs": [
                {
                    "name": "req",
                    "type": "RoleCertificateRequest",
                    "comment": "csr request",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "PostRoleCertificateRequestExt"
        },
        {
            "type": "RoleAccess",
            "method": "GET",
            "path": "/role/cert",
            "comment": "Fetch all roles that are tagged as requiring role certificates for principal",
            "inputs": [
                {
                    "name": "principal",
                    "type": "EntityName",
                    "comment": "If not present, will return roles for the user making the call",
                    "pathParam": false,
                    "queryParam": "principal",
                    "optional": true,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "getRolesRequireRoleCert"
        },
        {
            "type": "Workloads",
            "method": "GET",
            "path": "/domain/{domainName}/service/{serviceName}/workloads",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "EntityName",
                    "comment": "name of the service",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "getWorkloadsByService"
        },
        {
            "type": "Workloads",
            "method": "GET",
            "path": "/workloads/{ip}",
            "inputs": [
                {
                    "name": "ip",
                    "type": "String",
                    "comment": "ip address to query",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "getWorkloadsByIP"
        },
        {
            "type": "TransportRules",
            "method": "GET",
            "path": "/domain/{domainName}/service/{serviceName}/transportRules",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "EntityName",
                    "comment": "name of the service",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "Info",
            "method": "GET",
            "path": "/sys/info",
            "comment": "Retrieve the server info. Since we're exposing server version details, the request will require authorization",
            "auth": {
                "authenticate": false,
                "action": "get",
                "resource": "sys.auth:info"
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "ExternalCredentialsRequest",
            "method": "POST",
            "path": "/external/{provider}/domain/{domainName}/creds",
            "comment": "request external credentials from the specified provider based on the specified request attributes and the principal's id token (that will be internally generated by ZTS). Based on the provider, the server will carry out internal authorization checks (e.g. is the principal authorized to request a given scope in the credentials).",
            "inputs": [
                {
                    "name": "provider",
                    "type": "SimpleName",
                    "comment": "provider name to request credentials from",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "request credentials from account/project associated with this athenz domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "request",
                    "type": "ExternalCredentialsRequest",
                    "comment": "request object with optional and required attributes",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "rdl.Schema",
            "method": "GET",
            "path": "/schema",
            "comment": "Get RDL Schema",
            "auth": {
                "authenticate": true
            },
            "expected": "OK"
        }
    ]
}
