{
    "namespace": "com.yahoo.athenz.msd",
    "name": "MSD",
    "version": 1,
    "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms. The Micro Segmentation Defense (MSD) API",
    "types": [
        {
            "StringTypeDef": {
                "type": "String",
                "name": "SimpleName",
                "comment": "Copyright The Athenz Authors Licensed under the terms of the Apache version 2.0 license. See LICENSE file for terms. Common name types used by several API definitions A simple identifier, an element of compound name.",
                "pattern": "[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "CompoundName",
                "comment": "A compound name. Most names in this API are compound names.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "DomainName",
                "comment": "A domain name is the general qualifier prefix, as its uniqueness is managed.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "EntityName",
                "comment": "An entity name is a short form of a resource name, including only the domain and entity.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "EntityList",
                "comment": "An Entity list is comma separated compound Names",
                "pattern": "(([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*,)*([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "ServiceName",
                "comment": "A service name will generally be a unique subdomain.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "ActionName",
                "comment": "An action (operation) name.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "ResourceName",
                "comment": "A resource name Note that the EntityName part is optional, that is, a domain name followed by a colon is valid resource name.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*(:([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*)?"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "YBase64",
                "comment": "The Y-specific URL-safe Base64 variant.",
                "pattern": "[a-zA-Z0-9\\._-]+"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "YEncoded",
                "comment": "YEncoded includes ybase64 chars, as well as = and %. This can represent a user cookie and URL-encoded values.",
                "pattern": "[a-zA-Z0-9\\._%=-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "AuthorityName",
                "comment": "Used as the prefix in a signed assertion. This uniquely identifies a signing authority.",
                "pattern": "([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "PathElement",
                "comment": "A uri-safe path element",
                "pattern": "[a-zA-Z0-9-\\._~=+@$,:]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "TransportPolicySubjectDomainName",
                "comment": "DomainName in TransportPolicySubject should allow * to indicate ANY",
                "pattern": "\\*|([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "StringTypeDef": {
                "type": "String",
                "name": "TransportPolicySubjectServiceName",
                "comment": "ServiceName in TransportPolicySubject should allow * to indicate ANY",
                "pattern": "\\*|([a-zA-Z0-9_][a-zA-Z0-9_-]*\\.)*[a-zA-Z0-9_][a-zA-Z0-9_-]*"
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "TransportPolicyEnforcementState",
                "comment": "Types of transport policy enforcement states",
                "elements": [
                    {
                        "symbol": "ENFORCE"
                    },
                    {
                        "symbol": "REPORT"
                    }
                ]
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "TransportPolicyProtocol",
                "comment": "Types of transport policy protocols",
                "elements": [
                    {
                        "symbol": "TCP"
                    },
                    {
                        "symbol": "UDP"
                    }
                ]
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "TransportPolicyValidationStatus",
                "comment": "Validation Status of transport policy vs network policy",
                "elements": [
                    {
                        "symbol": "VALID"
                    },
                    {
                        "symbol": "INVALID"
                    },
                    {
                        "symbol": "PARTIAL"
                    }
                ]
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "TransportPolicyTrafficDirection",
                "comment": "Types of transport policy traffic direction",
                "elements": [
                    {
                        "symbol": "INGRESS"
                    },
                    {
                        "symbol": "EGRESS"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicySubject",
                "comment": "Subject for a transport policy",
                "fields": [
                    {
                        "name": "domainName",
                        "type": "TransportPolicySubjectDomainName",
                        "optional": false,
                        "comment": "Name of the domain"
                    },
                    {
                        "name": "serviceName",
                        "type": "TransportPolicySubjectServiceName",
                        "optional": false,
                        "comment": "Name of the service"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyCondition",
                "comment": "Transport policy condition. Used to specify additional restrictions for the subject of a transport policy",
                "fields": [
                    {
                        "name": "enforcementState",
                        "type": "TransportPolicyEnforcementState",
                        "optional": false,
                        "comment": "State of transport policy enforcement ( ENFORCE / REPORT )"
                    },
                    {
                        "name": "instances",
                        "type": "Array",
                        "optional": true,
                        "comment": "Acts as restrictions. If present, this transport policy should be restricted to only mentioned instances.",
                        "items": "String"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "PolicyPort",
                "comment": "generic policy port. Will be used by TransportPolicyPort and NetworkPolicyPort structs",
                "fields": [
                    {
                        "name": "port",
                        "type": "Int32",
                        "optional": false,
                        "comment": "Start port of the port range. port and endPort will have same values for a single port definition."
                    },
                    {
                        "name": "endPort",
                        "type": "Int32",
                        "optional": false,
                        "comment": "End port of the port range. port and endPort will have same values for a single port definition."
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "PolicyPort",
                "name": "TransportPolicyPort",
                "comment": "Transport policy port",
                "fields": [
                    {
                        "name": "protocol",
                        "type": "TransportPolicyProtocol",
                        "optional": false,
                        "comment": "Protocol for this transport policy"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyMatch",
                "comment": "Selector for the subject of a transport policy",
                "fields": [
                    {
                        "name": "athenzService",
                        "type": "TransportPolicySubject",
                        "optional": false,
                        "comment": "Subject where this transport policy applies"
                    },
                    {
                        "name": "conditions",
                        "type": "Array",
                        "optional": false,
                        "comment": "List of additional requirements for restrictions. Requirements are ANDed.",
                        "items": "TransportPolicyCondition"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyPeer",
                "comment": "Source or destination for a transport policy",
                "fields": [
                    {
                        "name": "athenzServices",
                        "type": "Array",
                        "optional": false,
                        "comment": "List of transport policy subjects",
                        "items": "TransportPolicySubject"
                    },
                    {
                        "name": "ports",
                        "type": "Array",
                        "optional": false,
                        "comment": "List of network traffic port part of this transport policy",
                        "items": "TransportPolicyPort"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyEntitySelector",
                "comment": "Entity to which a transport policy applies. Describes the subject and port(s) for a transport policy.",
                "fields": [
                    {
                        "name": "match",
                        "type": "TransportPolicyMatch",
                        "optional": false,
                        "comment": "Requirements for selecting the subject for this transport policy."
                    },
                    {
                        "name": "ports",
                        "type": "Array",
                        "optional": false,
                        "comment": "List of network traffic port of the subject eligible for the transport policy",
                        "items": "TransportPolicyPort"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyIngressRule",
                "comment": "Transport policy ingress rule",
                "fields": [
                    {
                        "name": "id",
                        "type": "Int64",
                        "optional": false,
                        "comment": "Assertion id associated with this transport policy"
                    },
                    {
                        "name": "lastModified",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "Last modification timestamp of this transport policy"
                    },
                    {
                        "name": "entitySelector",
                        "type": "TransportPolicyEntitySelector",
                        "optional": false,
                        "comment": "Describes the entity to which this transport policy applies"
                    },
                    {
                        "name": "from",
                        "type": "TransportPolicyPeer",
                        "optional": false,
                        "comment": "Source of network traffic"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyEgressRule",
                "comment": "Transport policy egress rule",
                "fields": [
                    {
                        "name": "id",
                        "type": "Int64",
                        "optional": false,
                        "comment": "Assertion id associated with this transport policy"
                    },
                    {
                        "name": "lastModified",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "Last modification timestamp of this transport policy"
                    },
                    {
                        "name": "entitySelector",
                        "type": "TransportPolicyEntitySelector",
                        "optional": false,
                        "comment": "Entity to which this transport policy applies"
                    },
                    {
                        "name": "to",
                        "type": "TransportPolicyPeer",
                        "optional": false,
                        "comment": "Destination of network traffic"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyRules",
                "comment": "Transport policy containing ingress and egress rules",
                "fields": [
                    {
                        "name": "ingress",
                        "type": "Array",
                        "optional": false,
                        "comment": "List of ingress rules",
                        "items": "TransportPolicyIngressRule"
                    },
                    {
                        "name": "egress",
                        "type": "Array",
                        "optional": false,
                        "comment": "List of egress rules",
                        "items": "TransportPolicyEgressRule"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyValidationRequest",
                "comment": "Transport policy request object to be validated",
                "fields": [
                    {
                        "name": "entitySelector",
                        "type": "TransportPolicyEntitySelector",
                        "optional": false,
                        "comment": "Describes the entity to which this transport policy applies"
                    },
                    {
                        "name": "peer",
                        "type": "TransportPolicyPeer",
                        "optional": false,
                        "comment": "source or destination of the network traffic depending on direction"
                    },
                    {
                        "name": "id",
                        "type": "Int64",
                        "optional": true,
                        "comment": "If present, assertion id associated with this transport policy"
                    },
                    {
                        "name": "trafficDirection",
                        "type": "TransportPolicyTrafficDirection",
                        "optional": false
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyValidationResponse",
                "comment": "Response object of transport policy rule validation",
                "fields": [
                    {
                        "name": "status",
                        "type": "TransportPolicyValidationStatus",
                        "optional": false
                    },
                    {
                        "name": "errors",
                        "type": "Array",
                        "optional": true,
                        "items": "String"
                    },
                    {
                        "name": "updateTime",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "most recent update timestamp in the backend"
                    },
                    {
                        "name": "id",
                        "type": "Int64",
                        "optional": true,
                        "comment": "If present, assertion id associated with the transport policy"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "TransportPolicyValidationResponseList",
                "comment": "List of TransportPolicyValidationResponse",
                "fields": [
                    {
                        "name": "responseList",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of transport policy validation response",
                        "items": "TransportPolicyValidationResponse"
                    }
                ],
                "closed": false
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "StaticWorkloadType",
                "comment": "Enum representing defined types of static workloads.",
                "elements": [
                    {
                        "symbol": "VIP"
                    },
                    {
                        "symbol": "ENTERPRISE_APPLIANCE"
                    },
                    {
                        "symbol": "CLOUD_LB"
                    },
                    {
                        "symbol": "CLOUD_NAT"
                    },
                    {
                        "symbol": "EXTERNAL_APPLIANCE"
                    },
                    {
                        "symbol": "VIP_LB"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "DynamicWorkload",
                "comment": "workload type describing workload bootstrapped with an identity",
                "fields": [
                    {
                        "name": "domainName",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "name of the domain"
                    },
                    {
                        "name": "serviceName",
                        "type": "EntityName",
                        "optional": false,
                        "comment": "name of the service"
                    },
                    {
                        "name": "uuid",
                        "type": "String",
                        "optional": false,
                        "comment": "unique identifier for the workload, usually defined by provider"
                    },
                    {
                        "name": "ipAddresses",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of IP addresses associated with the workload, optional for getWorkloadsByIP API call",
                        "items": "String"
                    },
                    {
                        "name": "hostname",
                        "type": "String",
                        "optional": false,
                        "comment": "hostname associated with the workload"
                    },
                    {
                        "name": "provider",
                        "type": "String",
                        "optional": false,
                        "comment": "infrastructure provider e.g. Kubernetes, AWS, Azure, openstack etc."
                    },
                    {
                        "name": "updateTime",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "most recent update timestamp in the backend"
                    },
                    {
                        "name": "certExpiryTime",
                        "type": "Timestamp",
                        "optional": false,
                        "comment": "certificate expiry time (ex: getNotAfter)"
                    },
                    {
                        "name": "certIssueTime",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "certificate issue time (ex: getNotBefore)"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "DynamicWorkload",
                "name": "Workload",
                "comment": "kept for backward compatibility sake. Will be eventually deprecated in favor of DynamicWorkload",
                "fields": [],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "StaticWorkload",
                "comment": "workload type describing workload indirectly associated with an identity ( without bootstrap )",
                "fields": [
                    {
                        "name": "domainName",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "name of the domain"
                    },
                    {
                        "name": "serviceName",
                        "type": "EntityName",
                        "optional": false,
                        "comment": "name of the service"
                    },
                    {
                        "name": "type",
                        "type": "StaticWorkloadType",
                        "optional": false,
                        "comment": "value representing one of the StaticWorkloadType enum"
                    },
                    {
                        "name": "ipAddresses",
                        "type": "Array",
                        "optional": true,
                        "comment": "list of IP addresses associated with the workload, optional for getWorkloadsByIP API call",
                        "items": "String"
                    },
                    {
                        "name": "name",
                        "type": "String",
                        "optional": true,
                        "comment": "name associated with the workload. In most cases will be a FQDN"
                    },
                    {
                        "name": "updateTime",
                        "type": "Timestamp",
                        "optional": true,
                        "comment": "most recent update timestamp in the backend"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "WorkloadOptions",
                "fields": [
                    {
                        "name": "ipChanged",
                        "type": "Bool",
                        "optional": false,
                        "comment": "boolean flag to signal a change in IP state"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "Workloads",
                "comment": "list of workloads",
                "fields": [
                    {
                        "name": "workloadList",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of workloads",
                        "items": "Workload"
                    },
                    {
                        "name": "dynamicWorkloadList",
                        "type": "Array",
                        "optional": true,
                        "comment": "list of dynamic workloads",
                        "items": "DynamicWorkload"
                    },
                    {
                        "name": "staticWorkloadList",
                        "type": "Array",
                        "optional": true,
                        "comment": "list of static workloads",
                        "items": "StaticWorkload"
                    }
                ],
                "closed": false
            }
        },
        {
            "EnumTypeDef": {
                "type": "Enum",
                "name": "NetworkPolicyChangeEffect",
                "comment": "IMPACT indicates that a change in network policy will interfere with workings of one or more transport policies NO_IMAPCT indicates that a change in network policy will not interfere with workings of any transport policy",
                "elements": [
                    {
                        "symbol": "IMPACT"
                    },
                    {
                        "symbol": "NO_IMPACT"
                    }
                ]
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "IPBlock",
                "comment": "Struct representing ip blocks used by network policy in CIDR (Classless inter-domain routing) format",
                "fields": [
                    {
                        "name": "cidr",
                        "type": "String",
                        "optional": false,
                        "comment": "cidr notation. can be used for ipv4 or ipv6"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "PolicyPort",
                "name": "NetworkPolicyPort",
                "comment": "network policy port.",
                "fields": [
                    {
                        "name": "protocol",
                        "type": "TransportPolicyProtocol",
                        "optional": false,
                        "comment": "protocol used by the network policy"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "NetworkPolicyChangeImpactRequest",
                "comment": "struct representing input details for evaluating network policies change impact on transport policies",
                "fields": [
                    {
                        "name": "from",
                        "type": "Array",
                        "optional": false,
                        "comment": "from ip address range list in cidr format",
                        "items": "IPBlock"
                    },
                    {
                        "name": "to",
                        "type": "Array",
                        "optional": false,
                        "comment": "to ip address range list in cidr format",
                        "items": "IPBlock"
                    },
                    {
                        "name": "sourcePorts",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of source ports",
                        "items": "NetworkPolicyPort"
                    },
                    {
                        "name": "destinationPorts",
                        "type": "Array",
                        "optional": false,
                        "comment": "list of destination ports",
                        "items": "NetworkPolicyPort"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "NetworkPolicyChangeImpactDetail",
                "fields": [
                    {
                        "name": "domain",
                        "type": "DomainName",
                        "optional": false,
                        "comment": "Name of the domain of the corresponding transport policy"
                    },
                    {
                        "name": "policy",
                        "type": "EntityName",
                        "optional": false,
                        "comment": "Name of the Athenz policy corresponding to transport policy"
                    },
                    {
                        "name": "transportPolicyId",
                        "type": "Int64",
                        "optional": false,
                        "comment": "Unique id of the transport policy"
                    }
                ],
                "closed": false
            }
        },
        {
            "StructTypeDef": {
                "type": "Struct",
                "name": "NetworkPolicyChangeImpactResponse",
                "comment": "struct representing response of evaluating network policies change impact on transport policies",
                "fields": [
                    {
                        "name": "effect",
                        "type": "NetworkPolicyChangeEffect",
                        "optional": false,
                        "comment": "enum indicating effect of network policy change on one or more transport policies"
                    },
                    {
                        "name": "details",
                        "type": "Array",
                        "optional": true,
                        "comment": "if the above enum value is IMPACT then this optional object contains more details about the impacted transport policies",
                        "items": "NetworkPolicyChangeImpactDetail"
                    }
                ],
                "closed": false
            }
        }
    ],
    "resources": [
        {
            "type": "TransportPolicyRules",
            "method": "GET",
            "path": "/transportpolicies",
            "comment": "API endpoint to get the transport policy rules defined in Athenz",
            "inputs": [
                {
                    "name": "matchingTag",
                    "type": "String",
                    "comment": "Retrieved from the previous request, this timestamp specifies to the server to return any policies modified since this time",
                    "pathParam": false,
                    "header": "If-None-Match",
                    "optional": true,
                    "flag": false
                }
            ],
            "outputs": [
                {
                    "name": "tag",
                    "type": "String",
                    "header": "ETag",
                    "comment": "The current latest modification timestamp is returned in this header",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            }
        },
        {
            "type": "TransportPolicyValidationRequest",
            "method": "POST",
            "path": "/transportpolicy/validate",
            "comment": "API to validate microsegmentation policies against network policies",
            "inputs": [
                {
                    "name": "transportPolicy",
                    "type": "TransportPolicyValidationRequest",
                    "comment": "Struct representing microsegmentation policy entered by the user",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "validateTransportPolicy"
        },
        {
            "type": "TransportPolicyValidationResponseList",
            "method": "GET",
            "path": "/domain/{domainName}/transportpolicy/validationstatus",
            "comment": "API to get transport policy validation response for transport policies of a domain",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "getTransportPolicyValidationStatus"
        },
        {
            "type": "Workloads",
            "method": "GET",
            "path": "/domain/{domainName}/service/{serviceName}/workloads",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "EntityName",
                    "comment": "name of the service",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "matchingTag",
                    "type": "String",
                    "comment": "Retrieved from the previous request, this timestamp specifies to the server to return any workloads modified since this time",
                    "pathParam": false,
                    "header": "If-None-Match",
                    "optional": true,
                    "flag": false
                }
            ],
            "outputs": [
                {
                    "name": "tag",
                    "type": "String",
                    "header": "ETag",
                    "comment": "The current latest modification timestamp is returned in this header",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "getWorkloadsByService"
        },
        {
            "type": "Workloads",
            "method": "GET",
            "path": "/workloads/{ip}",
            "inputs": [
                {
                    "name": "ip",
                    "type": "String",
                    "comment": "ip address to query",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "matchingTag",
                    "type": "String",
                    "comment": "Retrieved from the previous request, this timestamp specifies to the server to return any workloads modified since this time",
                    "pathParam": false,
                    "header": "If-None-Match",
                    "optional": true,
                    "flag": false
                }
            ],
            "outputs": [
                {
                    "name": "tag",
                    "type": "String",
                    "header": "ETag",
                    "comment": "The current latest modification timestamp is returned in this header",
                    "optional": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "getWorkloadsByIP"
        },
        {
            "type": "WorkloadOptions",
            "method": "PUT",
            "path": "/domain/{domainName}/service/{serviceName}/workload/dynamic",
            "comment": "Api to perform a dynamic workload PUT operation for a domain and service Workload details are obtained from the service certificate",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "EntityName",
                    "comment": "name of the service",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "options",
                    "type": "WorkloadOptions",
                    "comment": "metadata about the dynamic workload",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "NO_CONTENT",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "putDynamicWorkload"
        },
        {
            "type": "StaticWorkload",
            "method": "PUT",
            "path": "/domain/{domainName}/service/{serviceName}/workload/static",
            "comment": "Api to perform a static workload PUT operation for a domain and service",
            "inputs": [
                {
                    "name": "domainName",
                    "type": "DomainName",
                    "comment": "name of the domain",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "serviceName",
                    "type": "EntityName",
                    "comment": "name of the service",
                    "pathParam": true,
                    "optional": false,
                    "flag": false
                },
                {
                    "name": "staticWorkload",
                    "type": "StaticWorkload",
                    "comment": "Struct representing static workload entered by the user",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": false,
                "action": "update",
                "resource": "{domainName}:service.{serviceName}"
            },
            "expected": "NO_CONTENT",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "putStaticWorkload"
        },
        {
            "type": "NetworkPolicyChangeImpactRequest",
            "method": "POST",
            "path": "/transportpolicy/evaluatenetworkpolicychange",
            "comment": "API to evaluate network policies change impact on transport policies",
            "inputs": [
                {
                    "name": "detail",
                    "type": "NetworkPolicyChangeImpactRequest",
                    "comment": "Struct representing a network policy present in the system",
                    "pathParam": false,
                    "optional": false,
                    "flag": false
                }
            ],
            "auth": {
                "authenticate": true
            },
            "expected": "OK",
            "exceptions": {
                "TOO_MANY_REQUESTS": {
                    "type": "ResourceError"
                },
                "UNAUTHORIZED": {
                    "type": "ResourceError"
                },
                "BAD_REQUEST": {
                    "type": "ResourceError"
                },
                "NOT_FOUND": {
                    "type": "ResourceError"
                },
                "FORBIDDEN": {
                    "type": "ResourceError"
                }
            },
            "name": "evaluateNetworkPolicyChange"
        }
    ]
}
